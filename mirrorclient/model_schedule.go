/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
)

// checks if the Schedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Schedule{}

// Schedule struct for Schedule
type Schedule struct {
	AdminKey NullableKey `json:"admin_key,omitempty"`
	ConsensusTimestamp *string `json:"consensus_timestamp,omitempty"`
	// Network entity ID in the format of `shard.realm.num`
	CreatorAccountId NullableString `json:"creator_account_id,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	ExecutedTimestamp NullableString `json:"executed_timestamp,omitempty"`
	ExpirationTime NullableString `json:"expiration_time,omitempty"`
	Memo *string `json:"memo,omitempty"`
	// Network entity ID in the format of `shard.realm.num`
	PayerAccountId NullableString `json:"payer_account_id,omitempty"`
	// Network entity ID in the format of `shard.realm.num`
	ScheduleId NullableString `json:"schedule_id,omitempty"`
	Signatures []ScheduleSignature `json:"signatures,omitempty"`
	TransactionBody *string `json:"transaction_body,omitempty"`
	WaitForExpiry *bool `json:"wait_for_expiry,omitempty"`
}

// NewSchedule instantiates a new Schedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchedule() *Schedule {
	this := Schedule{}
	return &this
}

// NewScheduleWithDefaults instantiates a new Schedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleWithDefaults() *Schedule {
	this := Schedule{}
	return &this
}

// GetAdminKey returns the AdminKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Schedule) GetAdminKey() Key {
	if o == nil || IsNil(o.AdminKey.Get()) {
		var ret Key
		return ret
	}
	return *o.AdminKey.Get()
}

// GetAdminKeyOk returns a tuple with the AdminKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Schedule) GetAdminKeyOk() (*Key, bool) {
	if o == nil {
		return nil, false
	}
	return o.AdminKey.Get(), o.AdminKey.IsSet()
}

// HasAdminKey returns a boolean if a field has been set.
func (o *Schedule) HasAdminKey() bool {
	if o != nil && o.AdminKey.IsSet() {
		return true
	}

	return false
}

// SetAdminKey gets a reference to the given NullableKey and assigns it to the AdminKey field.
func (o *Schedule) SetAdminKey(v Key) {
	o.AdminKey.Set(&v)
}
// SetAdminKeyNil sets the value for AdminKey to be an explicit nil
func (o *Schedule) SetAdminKeyNil() {
	o.AdminKey.Set(nil)
}

// UnsetAdminKey ensures that no value is present for AdminKey, not even an explicit nil
func (o *Schedule) UnsetAdminKey() {
	o.AdminKey.Unset()
}

// GetConsensusTimestamp returns the ConsensusTimestamp field value if set, zero value otherwise.
func (o *Schedule) GetConsensusTimestamp() string {
	if o == nil || IsNil(o.ConsensusTimestamp) {
		var ret string
		return ret
	}
	return *o.ConsensusTimestamp
}

// GetConsensusTimestampOk returns a tuple with the ConsensusTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schedule) GetConsensusTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.ConsensusTimestamp) {
		return nil, false
	}
	return o.ConsensusTimestamp, true
}

// HasConsensusTimestamp returns a boolean if a field has been set.
func (o *Schedule) HasConsensusTimestamp() bool {
	if o != nil && !IsNil(o.ConsensusTimestamp) {
		return true
	}

	return false
}

// SetConsensusTimestamp gets a reference to the given string and assigns it to the ConsensusTimestamp field.
func (o *Schedule) SetConsensusTimestamp(v string) {
	o.ConsensusTimestamp = &v
}

// GetCreatorAccountId returns the CreatorAccountId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Schedule) GetCreatorAccountId() string {
	if o == nil || IsNil(o.CreatorAccountId.Get()) {
		var ret string
		return ret
	}
	return *o.CreatorAccountId.Get()
}

// GetCreatorAccountIdOk returns a tuple with the CreatorAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Schedule) GetCreatorAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatorAccountId.Get(), o.CreatorAccountId.IsSet()
}

// HasCreatorAccountId returns a boolean if a field has been set.
func (o *Schedule) HasCreatorAccountId() bool {
	if o != nil && o.CreatorAccountId.IsSet() {
		return true
	}

	return false
}

// SetCreatorAccountId gets a reference to the given NullableString and assigns it to the CreatorAccountId field.
func (o *Schedule) SetCreatorAccountId(v string) {
	o.CreatorAccountId.Set(&v)
}
// SetCreatorAccountIdNil sets the value for CreatorAccountId to be an explicit nil
func (o *Schedule) SetCreatorAccountIdNil() {
	o.CreatorAccountId.Set(nil)
}

// UnsetCreatorAccountId ensures that no value is present for CreatorAccountId, not even an explicit nil
func (o *Schedule) UnsetCreatorAccountId() {
	o.CreatorAccountId.Unset()
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *Schedule) GetDeleted() bool {
	if o == nil || IsNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schedule) GetDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *Schedule) HasDeleted() bool {
	if o != nil && !IsNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *Schedule) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetExecutedTimestamp returns the ExecutedTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Schedule) GetExecutedTimestamp() string {
	if o == nil || IsNil(o.ExecutedTimestamp.Get()) {
		var ret string
		return ret
	}
	return *o.ExecutedTimestamp.Get()
}

// GetExecutedTimestampOk returns a tuple with the ExecutedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Schedule) GetExecutedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExecutedTimestamp.Get(), o.ExecutedTimestamp.IsSet()
}

// HasExecutedTimestamp returns a boolean if a field has been set.
func (o *Schedule) HasExecutedTimestamp() bool {
	if o != nil && o.ExecutedTimestamp.IsSet() {
		return true
	}

	return false
}

// SetExecutedTimestamp gets a reference to the given NullableString and assigns it to the ExecutedTimestamp field.
func (o *Schedule) SetExecutedTimestamp(v string) {
	o.ExecutedTimestamp.Set(&v)
}
// SetExecutedTimestampNil sets the value for ExecutedTimestamp to be an explicit nil
func (o *Schedule) SetExecutedTimestampNil() {
	o.ExecutedTimestamp.Set(nil)
}

// UnsetExecutedTimestamp ensures that no value is present for ExecutedTimestamp, not even an explicit nil
func (o *Schedule) UnsetExecutedTimestamp() {
	o.ExecutedTimestamp.Unset()
}

// GetExpirationTime returns the ExpirationTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Schedule) GetExpirationTime() string {
	if o == nil || IsNil(o.ExpirationTime.Get()) {
		var ret string
		return ret
	}
	return *o.ExpirationTime.Get()
}

// GetExpirationTimeOk returns a tuple with the ExpirationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Schedule) GetExpirationTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpirationTime.Get(), o.ExpirationTime.IsSet()
}

// HasExpirationTime returns a boolean if a field has been set.
func (o *Schedule) HasExpirationTime() bool {
	if o != nil && o.ExpirationTime.IsSet() {
		return true
	}

	return false
}

// SetExpirationTime gets a reference to the given NullableString and assigns it to the ExpirationTime field.
func (o *Schedule) SetExpirationTime(v string) {
	o.ExpirationTime.Set(&v)
}
// SetExpirationTimeNil sets the value for ExpirationTime to be an explicit nil
func (o *Schedule) SetExpirationTimeNil() {
	o.ExpirationTime.Set(nil)
}

// UnsetExpirationTime ensures that no value is present for ExpirationTime, not even an explicit nil
func (o *Schedule) UnsetExpirationTime() {
	o.ExpirationTime.Unset()
}

// GetMemo returns the Memo field value if set, zero value otherwise.
func (o *Schedule) GetMemo() string {
	if o == nil || IsNil(o.Memo) {
		var ret string
		return ret
	}
	return *o.Memo
}

// GetMemoOk returns a tuple with the Memo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schedule) GetMemoOk() (*string, bool) {
	if o == nil || IsNil(o.Memo) {
		return nil, false
	}
	return o.Memo, true
}

// HasMemo returns a boolean if a field has been set.
func (o *Schedule) HasMemo() bool {
	if o != nil && !IsNil(o.Memo) {
		return true
	}

	return false
}

// SetMemo gets a reference to the given string and assigns it to the Memo field.
func (o *Schedule) SetMemo(v string) {
	o.Memo = &v
}

// GetPayerAccountId returns the PayerAccountId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Schedule) GetPayerAccountId() string {
	if o == nil || IsNil(o.PayerAccountId.Get()) {
		var ret string
		return ret
	}
	return *o.PayerAccountId.Get()
}

// GetPayerAccountIdOk returns a tuple with the PayerAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Schedule) GetPayerAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PayerAccountId.Get(), o.PayerAccountId.IsSet()
}

// HasPayerAccountId returns a boolean if a field has been set.
func (o *Schedule) HasPayerAccountId() bool {
	if o != nil && o.PayerAccountId.IsSet() {
		return true
	}

	return false
}

// SetPayerAccountId gets a reference to the given NullableString and assigns it to the PayerAccountId field.
func (o *Schedule) SetPayerAccountId(v string) {
	o.PayerAccountId.Set(&v)
}
// SetPayerAccountIdNil sets the value for PayerAccountId to be an explicit nil
func (o *Schedule) SetPayerAccountIdNil() {
	o.PayerAccountId.Set(nil)
}

// UnsetPayerAccountId ensures that no value is present for PayerAccountId, not even an explicit nil
func (o *Schedule) UnsetPayerAccountId() {
	o.PayerAccountId.Unset()
}

// GetScheduleId returns the ScheduleId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Schedule) GetScheduleId() string {
	if o == nil || IsNil(o.ScheduleId.Get()) {
		var ret string
		return ret
	}
	return *o.ScheduleId.Get()
}

// GetScheduleIdOk returns a tuple with the ScheduleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Schedule) GetScheduleIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScheduleId.Get(), o.ScheduleId.IsSet()
}

// HasScheduleId returns a boolean if a field has been set.
func (o *Schedule) HasScheduleId() bool {
	if o != nil && o.ScheduleId.IsSet() {
		return true
	}

	return false
}

// SetScheduleId gets a reference to the given NullableString and assigns it to the ScheduleId field.
func (o *Schedule) SetScheduleId(v string) {
	o.ScheduleId.Set(&v)
}
// SetScheduleIdNil sets the value for ScheduleId to be an explicit nil
func (o *Schedule) SetScheduleIdNil() {
	o.ScheduleId.Set(nil)
}

// UnsetScheduleId ensures that no value is present for ScheduleId, not even an explicit nil
func (o *Schedule) UnsetScheduleId() {
	o.ScheduleId.Unset()
}

// GetSignatures returns the Signatures field value if set, zero value otherwise.
func (o *Schedule) GetSignatures() []ScheduleSignature {
	if o == nil || IsNil(o.Signatures) {
		var ret []ScheduleSignature
		return ret
	}
	return o.Signatures
}

// GetSignaturesOk returns a tuple with the Signatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schedule) GetSignaturesOk() ([]ScheduleSignature, bool) {
	if o == nil || IsNil(o.Signatures) {
		return nil, false
	}
	return o.Signatures, true
}

// HasSignatures returns a boolean if a field has been set.
func (o *Schedule) HasSignatures() bool {
	if o != nil && !IsNil(o.Signatures) {
		return true
	}

	return false
}

// SetSignatures gets a reference to the given []ScheduleSignature and assigns it to the Signatures field.
func (o *Schedule) SetSignatures(v []ScheduleSignature) {
	o.Signatures = v
}

// GetTransactionBody returns the TransactionBody field value if set, zero value otherwise.
func (o *Schedule) GetTransactionBody() string {
	if o == nil || IsNil(o.TransactionBody) {
		var ret string
		return ret
	}
	return *o.TransactionBody
}

// GetTransactionBodyOk returns a tuple with the TransactionBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schedule) GetTransactionBodyOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionBody) {
		return nil, false
	}
	return o.TransactionBody, true
}

// HasTransactionBody returns a boolean if a field has been set.
func (o *Schedule) HasTransactionBody() bool {
	if o != nil && !IsNil(o.TransactionBody) {
		return true
	}

	return false
}

// SetTransactionBody gets a reference to the given string and assigns it to the TransactionBody field.
func (o *Schedule) SetTransactionBody(v string) {
	o.TransactionBody = &v
}

// GetWaitForExpiry returns the WaitForExpiry field value if set, zero value otherwise.
func (o *Schedule) GetWaitForExpiry() bool {
	if o == nil || IsNil(o.WaitForExpiry) {
		var ret bool
		return ret
	}
	return *o.WaitForExpiry
}

// GetWaitForExpiryOk returns a tuple with the WaitForExpiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schedule) GetWaitForExpiryOk() (*bool, bool) {
	if o == nil || IsNil(o.WaitForExpiry) {
		return nil, false
	}
	return o.WaitForExpiry, true
}

// HasWaitForExpiry returns a boolean if a field has been set.
func (o *Schedule) HasWaitForExpiry() bool {
	if o != nil && !IsNil(o.WaitForExpiry) {
		return true
	}

	return false
}

// SetWaitForExpiry gets a reference to the given bool and assigns it to the WaitForExpiry field.
func (o *Schedule) SetWaitForExpiry(v bool) {
	o.WaitForExpiry = &v
}

func (o Schedule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Schedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AdminKey.IsSet() {
		toSerialize["admin_key"] = o.AdminKey.Get()
	}
	if !IsNil(o.ConsensusTimestamp) {
		toSerialize["consensus_timestamp"] = o.ConsensusTimestamp
	}
	if o.CreatorAccountId.IsSet() {
		toSerialize["creator_account_id"] = o.CreatorAccountId.Get()
	}
	if !IsNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	if o.ExecutedTimestamp.IsSet() {
		toSerialize["executed_timestamp"] = o.ExecutedTimestamp.Get()
	}
	if o.ExpirationTime.IsSet() {
		toSerialize["expiration_time"] = o.ExpirationTime.Get()
	}
	if !IsNil(o.Memo) {
		toSerialize["memo"] = o.Memo
	}
	if o.PayerAccountId.IsSet() {
		toSerialize["payer_account_id"] = o.PayerAccountId.Get()
	}
	if o.ScheduleId.IsSet() {
		toSerialize["schedule_id"] = o.ScheduleId.Get()
	}
	if !IsNil(o.Signatures) {
		toSerialize["signatures"] = o.Signatures
	}
	if !IsNil(o.TransactionBody) {
		toSerialize["transaction_body"] = o.TransactionBody
	}
	if !IsNil(o.WaitForExpiry) {
		toSerialize["wait_for_expiry"] = o.WaitForExpiry
	}
	return toSerialize, nil
}

type NullableSchedule struct {
	value *Schedule
	isSet bool
}

func (v NullableSchedule) Get() *Schedule {
	return v.value
}

func (v *NullableSchedule) Set(val *Schedule) {
	v.value = val
	v.isSet = true
}

func (v NullableSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchedule(val *Schedule) *NullableSchedule {
	return &NullableSchedule{value: val, isSet: true}
}

func (v NullableSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


