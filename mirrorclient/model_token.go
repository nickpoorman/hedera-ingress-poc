/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
)

// checks if the Token type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Token{}

// Token struct for Token
type Token struct {
	// Network entity ID in the format of `shard.realm.num`
	TokenId NullableString `json:"token_id"`
	Symbol string `json:"symbol"`
	AdminKey NullableKey `json:"admin_key"`
	Type string `json:"type"`
}

// NewToken instantiates a new Token object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToken(tokenId NullableString, symbol string, adminKey NullableKey, type_ string) *Token {
	this := Token{}
	this.TokenId = tokenId
	this.Symbol = symbol
	this.AdminKey = adminKey
	this.Type = type_
	return &this
}

// NewTokenWithDefaults instantiates a new Token object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenWithDefaults() *Token {
	this := Token{}
	return &this
}

// GetTokenId returns the TokenId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Token) GetTokenId() string {
	if o == nil || o.TokenId.Get() == nil {
		var ret string
		return ret
	}

	return *o.TokenId.Get()
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Token) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TokenId.Get(), o.TokenId.IsSet()
}

// SetTokenId sets field value
func (o *Token) SetTokenId(v string) {
	o.TokenId.Set(&v)
}

// GetSymbol returns the Symbol field value
func (o *Token) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *Token) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *Token) SetSymbol(v string) {
	o.Symbol = v
}

// GetAdminKey returns the AdminKey field value
// If the value is explicit nil, the zero value for Key will be returned
func (o *Token) GetAdminKey() Key {
	if o == nil || o.AdminKey.Get() == nil {
		var ret Key
		return ret
	}

	return *o.AdminKey.Get()
}

// GetAdminKeyOk returns a tuple with the AdminKey field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Token) GetAdminKeyOk() (*Key, bool) {
	if o == nil {
		return nil, false
	}
	return o.AdminKey.Get(), o.AdminKey.IsSet()
}

// SetAdminKey sets field value
func (o *Token) SetAdminKey(v Key) {
	o.AdminKey.Set(&v)
}

// GetType returns the Type field value
func (o *Token) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Token) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Token) SetType(v string) {
	o.Type = v
}

func (o Token) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Token) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["token_id"] = o.TokenId.Get()
	toSerialize["symbol"] = o.Symbol
	toSerialize["admin_key"] = o.AdminKey.Get()
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableToken struct {
	value *Token
	isSet bool
}

func (v NullableToken) Get() *Token {
	return v.value
}

func (v *NullableToken) Set(val *Token) {
	v.value = val
	v.isSet = true
}

func (v NullableToken) IsSet() bool {
	return v.isSet
}

func (v *NullableToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToken(val *Token) *NullableToken {
	return &NullableToken{value: val, isSet: true}
}

func (v NullableToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


