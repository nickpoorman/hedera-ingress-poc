/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
)

// checks if the TokenInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenInfo{}

// TokenInfo struct for TokenInfo
type TokenInfo struct {
	AdminKey NullableKey `json:"admin_key,omitempty"`
	// Network entity ID in the format of `shard.realm.num`
	AutoRenewAccount NullableString `json:"auto_renew_account,omitempty"`
	AutoRenewPeriod NullableInt64 `json:"auto_renew_period,omitempty"`
	CreatedTimestamp *string `json:"created_timestamp,omitempty"`
	Decimals *string `json:"decimals,omitempty"`
	Deleted NullableBool `json:"deleted,omitempty"`
	ExpiryTimestamp NullableInt64 `json:"expiry_timestamp,omitempty"`
	FeeScheduleKey NullableKey `json:"fee_schedule_key,omitempty"`
	FreezeDefault *bool `json:"freeze_default,omitempty"`
	FreezeKey NullableKey `json:"freeze_key,omitempty"`
	InitialSupply *string `json:"initial_supply,omitempty"`
	KycKey NullableKey `json:"kyc_key,omitempty"`
	MaxSupply *string `json:"max_supply,omitempty"`
	ModifiedTimestamp *string `json:"modified_timestamp,omitempty"`
	Name *string `json:"name,omitempty"`
	Memo *string `json:"memo,omitempty"`
	PauseKey NullableKey `json:"pause_key,omitempty"`
	PauseStatus *string `json:"pause_status,omitempty"`
	SupplyKey NullableKey `json:"supply_key,omitempty"`
	SupplyType *string `json:"supply_type,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	// Network entity ID in the format of `shard.realm.num`
	TokenId NullableString `json:"token_id,omitempty"`
	TotalSupply *string `json:"total_supply,omitempty"`
	// Network entity ID in the format of `shard.realm.num`
	TreasuryAccountId NullableString `json:"treasury_account_id,omitempty"`
	Type *string `json:"type,omitempty"`
	WipeKey NullableKey `json:"wipe_key,omitempty"`
	CustomFees *CustomFees `json:"custom_fees,omitempty"`
}

// NewTokenInfo instantiates a new TokenInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenInfo() *TokenInfo {
	this := TokenInfo{}
	return &this
}

// NewTokenInfoWithDefaults instantiates a new TokenInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenInfoWithDefaults() *TokenInfo {
	this := TokenInfo{}
	return &this
}

// GetAdminKey returns the AdminKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TokenInfo) GetAdminKey() Key {
	if o == nil || IsNil(o.AdminKey.Get()) {
		var ret Key
		return ret
	}
	return *o.AdminKey.Get()
}

// GetAdminKeyOk returns a tuple with the AdminKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TokenInfo) GetAdminKeyOk() (*Key, bool) {
	if o == nil {
		return nil, false
	}
	return o.AdminKey.Get(), o.AdminKey.IsSet()
}

// HasAdminKey returns a boolean if a field has been set.
func (o *TokenInfo) HasAdminKey() bool {
	if o != nil && o.AdminKey.IsSet() {
		return true
	}

	return false
}

// SetAdminKey gets a reference to the given NullableKey and assigns it to the AdminKey field.
func (o *TokenInfo) SetAdminKey(v Key) {
	o.AdminKey.Set(&v)
}
// SetAdminKeyNil sets the value for AdminKey to be an explicit nil
func (o *TokenInfo) SetAdminKeyNil() {
	o.AdminKey.Set(nil)
}

// UnsetAdminKey ensures that no value is present for AdminKey, not even an explicit nil
func (o *TokenInfo) UnsetAdminKey() {
	o.AdminKey.Unset()
}

// GetAutoRenewAccount returns the AutoRenewAccount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TokenInfo) GetAutoRenewAccount() string {
	if o == nil || IsNil(o.AutoRenewAccount.Get()) {
		var ret string
		return ret
	}
	return *o.AutoRenewAccount.Get()
}

// GetAutoRenewAccountOk returns a tuple with the AutoRenewAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TokenInfo) GetAutoRenewAccountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutoRenewAccount.Get(), o.AutoRenewAccount.IsSet()
}

// HasAutoRenewAccount returns a boolean if a field has been set.
func (o *TokenInfo) HasAutoRenewAccount() bool {
	if o != nil && o.AutoRenewAccount.IsSet() {
		return true
	}

	return false
}

// SetAutoRenewAccount gets a reference to the given NullableString and assigns it to the AutoRenewAccount field.
func (o *TokenInfo) SetAutoRenewAccount(v string) {
	o.AutoRenewAccount.Set(&v)
}
// SetAutoRenewAccountNil sets the value for AutoRenewAccount to be an explicit nil
func (o *TokenInfo) SetAutoRenewAccountNil() {
	o.AutoRenewAccount.Set(nil)
}

// UnsetAutoRenewAccount ensures that no value is present for AutoRenewAccount, not even an explicit nil
func (o *TokenInfo) UnsetAutoRenewAccount() {
	o.AutoRenewAccount.Unset()
}

// GetAutoRenewPeriod returns the AutoRenewPeriod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TokenInfo) GetAutoRenewPeriod() int64 {
	if o == nil || IsNil(o.AutoRenewPeriod.Get()) {
		var ret int64
		return ret
	}
	return *o.AutoRenewPeriod.Get()
}

// GetAutoRenewPeriodOk returns a tuple with the AutoRenewPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TokenInfo) GetAutoRenewPeriodOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutoRenewPeriod.Get(), o.AutoRenewPeriod.IsSet()
}

// HasAutoRenewPeriod returns a boolean if a field has been set.
func (o *TokenInfo) HasAutoRenewPeriod() bool {
	if o != nil && o.AutoRenewPeriod.IsSet() {
		return true
	}

	return false
}

// SetAutoRenewPeriod gets a reference to the given NullableInt64 and assigns it to the AutoRenewPeriod field.
func (o *TokenInfo) SetAutoRenewPeriod(v int64) {
	o.AutoRenewPeriod.Set(&v)
}
// SetAutoRenewPeriodNil sets the value for AutoRenewPeriod to be an explicit nil
func (o *TokenInfo) SetAutoRenewPeriodNil() {
	o.AutoRenewPeriod.Set(nil)
}

// UnsetAutoRenewPeriod ensures that no value is present for AutoRenewPeriod, not even an explicit nil
func (o *TokenInfo) UnsetAutoRenewPeriod() {
	o.AutoRenewPeriod.Unset()
}

// GetCreatedTimestamp returns the CreatedTimestamp field value if set, zero value otherwise.
func (o *TokenInfo) GetCreatedTimestamp() string {
	if o == nil || IsNil(o.CreatedTimestamp) {
		var ret string
		return ret
	}
	return *o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetCreatedTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedTimestamp) {
		return nil, false
	}
	return o.CreatedTimestamp, true
}

// HasCreatedTimestamp returns a boolean if a field has been set.
func (o *TokenInfo) HasCreatedTimestamp() bool {
	if o != nil && !IsNil(o.CreatedTimestamp) {
		return true
	}

	return false
}

// SetCreatedTimestamp gets a reference to the given string and assigns it to the CreatedTimestamp field.
func (o *TokenInfo) SetCreatedTimestamp(v string) {
	o.CreatedTimestamp = &v
}

// GetDecimals returns the Decimals field value if set, zero value otherwise.
func (o *TokenInfo) GetDecimals() string {
	if o == nil || IsNil(o.Decimals) {
		var ret string
		return ret
	}
	return *o.Decimals
}

// GetDecimalsOk returns a tuple with the Decimals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetDecimalsOk() (*string, bool) {
	if o == nil || IsNil(o.Decimals) {
		return nil, false
	}
	return o.Decimals, true
}

// HasDecimals returns a boolean if a field has been set.
func (o *TokenInfo) HasDecimals() bool {
	if o != nil && !IsNil(o.Decimals) {
		return true
	}

	return false
}

// SetDecimals gets a reference to the given string and assigns it to the Decimals field.
func (o *TokenInfo) SetDecimals(v string) {
	o.Decimals = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TokenInfo) GetDeleted() bool {
	if o == nil || IsNil(o.Deleted.Get()) {
		var ret bool
		return ret
	}
	return *o.Deleted.Get()
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TokenInfo) GetDeletedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Deleted.Get(), o.Deleted.IsSet()
}

// HasDeleted returns a boolean if a field has been set.
func (o *TokenInfo) HasDeleted() bool {
	if o != nil && o.Deleted.IsSet() {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given NullableBool and assigns it to the Deleted field.
func (o *TokenInfo) SetDeleted(v bool) {
	o.Deleted.Set(&v)
}
// SetDeletedNil sets the value for Deleted to be an explicit nil
func (o *TokenInfo) SetDeletedNil() {
	o.Deleted.Set(nil)
}

// UnsetDeleted ensures that no value is present for Deleted, not even an explicit nil
func (o *TokenInfo) UnsetDeleted() {
	o.Deleted.Unset()
}

// GetExpiryTimestamp returns the ExpiryTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TokenInfo) GetExpiryTimestamp() int64 {
	if o == nil || IsNil(o.ExpiryTimestamp.Get()) {
		var ret int64
		return ret
	}
	return *o.ExpiryTimestamp.Get()
}

// GetExpiryTimestampOk returns a tuple with the ExpiryTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TokenInfo) GetExpiryTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpiryTimestamp.Get(), o.ExpiryTimestamp.IsSet()
}

// HasExpiryTimestamp returns a boolean if a field has been set.
func (o *TokenInfo) HasExpiryTimestamp() bool {
	if o != nil && o.ExpiryTimestamp.IsSet() {
		return true
	}

	return false
}

// SetExpiryTimestamp gets a reference to the given NullableInt64 and assigns it to the ExpiryTimestamp field.
func (o *TokenInfo) SetExpiryTimestamp(v int64) {
	o.ExpiryTimestamp.Set(&v)
}
// SetExpiryTimestampNil sets the value for ExpiryTimestamp to be an explicit nil
func (o *TokenInfo) SetExpiryTimestampNil() {
	o.ExpiryTimestamp.Set(nil)
}

// UnsetExpiryTimestamp ensures that no value is present for ExpiryTimestamp, not even an explicit nil
func (o *TokenInfo) UnsetExpiryTimestamp() {
	o.ExpiryTimestamp.Unset()
}

// GetFeeScheduleKey returns the FeeScheduleKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TokenInfo) GetFeeScheduleKey() Key {
	if o == nil || IsNil(o.FeeScheduleKey.Get()) {
		var ret Key
		return ret
	}
	return *o.FeeScheduleKey.Get()
}

// GetFeeScheduleKeyOk returns a tuple with the FeeScheduleKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TokenInfo) GetFeeScheduleKeyOk() (*Key, bool) {
	if o == nil {
		return nil, false
	}
	return o.FeeScheduleKey.Get(), o.FeeScheduleKey.IsSet()
}

// HasFeeScheduleKey returns a boolean if a field has been set.
func (o *TokenInfo) HasFeeScheduleKey() bool {
	if o != nil && o.FeeScheduleKey.IsSet() {
		return true
	}

	return false
}

// SetFeeScheduleKey gets a reference to the given NullableKey and assigns it to the FeeScheduleKey field.
func (o *TokenInfo) SetFeeScheduleKey(v Key) {
	o.FeeScheduleKey.Set(&v)
}
// SetFeeScheduleKeyNil sets the value for FeeScheduleKey to be an explicit nil
func (o *TokenInfo) SetFeeScheduleKeyNil() {
	o.FeeScheduleKey.Set(nil)
}

// UnsetFeeScheduleKey ensures that no value is present for FeeScheduleKey, not even an explicit nil
func (o *TokenInfo) UnsetFeeScheduleKey() {
	o.FeeScheduleKey.Unset()
}

// GetFreezeDefault returns the FreezeDefault field value if set, zero value otherwise.
func (o *TokenInfo) GetFreezeDefault() bool {
	if o == nil || IsNil(o.FreezeDefault) {
		var ret bool
		return ret
	}
	return *o.FreezeDefault
}

// GetFreezeDefaultOk returns a tuple with the FreezeDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetFreezeDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.FreezeDefault) {
		return nil, false
	}
	return o.FreezeDefault, true
}

// HasFreezeDefault returns a boolean if a field has been set.
func (o *TokenInfo) HasFreezeDefault() bool {
	if o != nil && !IsNil(o.FreezeDefault) {
		return true
	}

	return false
}

// SetFreezeDefault gets a reference to the given bool and assigns it to the FreezeDefault field.
func (o *TokenInfo) SetFreezeDefault(v bool) {
	o.FreezeDefault = &v
}

// GetFreezeKey returns the FreezeKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TokenInfo) GetFreezeKey() Key {
	if o == nil || IsNil(o.FreezeKey.Get()) {
		var ret Key
		return ret
	}
	return *o.FreezeKey.Get()
}

// GetFreezeKeyOk returns a tuple with the FreezeKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TokenInfo) GetFreezeKeyOk() (*Key, bool) {
	if o == nil {
		return nil, false
	}
	return o.FreezeKey.Get(), o.FreezeKey.IsSet()
}

// HasFreezeKey returns a boolean if a field has been set.
func (o *TokenInfo) HasFreezeKey() bool {
	if o != nil && o.FreezeKey.IsSet() {
		return true
	}

	return false
}

// SetFreezeKey gets a reference to the given NullableKey and assigns it to the FreezeKey field.
func (o *TokenInfo) SetFreezeKey(v Key) {
	o.FreezeKey.Set(&v)
}
// SetFreezeKeyNil sets the value for FreezeKey to be an explicit nil
func (o *TokenInfo) SetFreezeKeyNil() {
	o.FreezeKey.Set(nil)
}

// UnsetFreezeKey ensures that no value is present for FreezeKey, not even an explicit nil
func (o *TokenInfo) UnsetFreezeKey() {
	o.FreezeKey.Unset()
}

// GetInitialSupply returns the InitialSupply field value if set, zero value otherwise.
func (o *TokenInfo) GetInitialSupply() string {
	if o == nil || IsNil(o.InitialSupply) {
		var ret string
		return ret
	}
	return *o.InitialSupply
}

// GetInitialSupplyOk returns a tuple with the InitialSupply field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetInitialSupplyOk() (*string, bool) {
	if o == nil || IsNil(o.InitialSupply) {
		return nil, false
	}
	return o.InitialSupply, true
}

// HasInitialSupply returns a boolean if a field has been set.
func (o *TokenInfo) HasInitialSupply() bool {
	if o != nil && !IsNil(o.InitialSupply) {
		return true
	}

	return false
}

// SetInitialSupply gets a reference to the given string and assigns it to the InitialSupply field.
func (o *TokenInfo) SetInitialSupply(v string) {
	o.InitialSupply = &v
}

// GetKycKey returns the KycKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TokenInfo) GetKycKey() Key {
	if o == nil || IsNil(o.KycKey.Get()) {
		var ret Key
		return ret
	}
	return *o.KycKey.Get()
}

// GetKycKeyOk returns a tuple with the KycKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TokenInfo) GetKycKeyOk() (*Key, bool) {
	if o == nil {
		return nil, false
	}
	return o.KycKey.Get(), o.KycKey.IsSet()
}

// HasKycKey returns a boolean if a field has been set.
func (o *TokenInfo) HasKycKey() bool {
	if o != nil && o.KycKey.IsSet() {
		return true
	}

	return false
}

// SetKycKey gets a reference to the given NullableKey and assigns it to the KycKey field.
func (o *TokenInfo) SetKycKey(v Key) {
	o.KycKey.Set(&v)
}
// SetKycKeyNil sets the value for KycKey to be an explicit nil
func (o *TokenInfo) SetKycKeyNil() {
	o.KycKey.Set(nil)
}

// UnsetKycKey ensures that no value is present for KycKey, not even an explicit nil
func (o *TokenInfo) UnsetKycKey() {
	o.KycKey.Unset()
}

// GetMaxSupply returns the MaxSupply field value if set, zero value otherwise.
func (o *TokenInfo) GetMaxSupply() string {
	if o == nil || IsNil(o.MaxSupply) {
		var ret string
		return ret
	}
	return *o.MaxSupply
}

// GetMaxSupplyOk returns a tuple with the MaxSupply field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetMaxSupplyOk() (*string, bool) {
	if o == nil || IsNil(o.MaxSupply) {
		return nil, false
	}
	return o.MaxSupply, true
}

// HasMaxSupply returns a boolean if a field has been set.
func (o *TokenInfo) HasMaxSupply() bool {
	if o != nil && !IsNil(o.MaxSupply) {
		return true
	}

	return false
}

// SetMaxSupply gets a reference to the given string and assigns it to the MaxSupply field.
func (o *TokenInfo) SetMaxSupply(v string) {
	o.MaxSupply = &v
}

// GetModifiedTimestamp returns the ModifiedTimestamp field value if set, zero value otherwise.
func (o *TokenInfo) GetModifiedTimestamp() string {
	if o == nil || IsNil(o.ModifiedTimestamp) {
		var ret string
		return ret
	}
	return *o.ModifiedTimestamp
}

// GetModifiedTimestampOk returns a tuple with the ModifiedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetModifiedTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.ModifiedTimestamp) {
		return nil, false
	}
	return o.ModifiedTimestamp, true
}

// HasModifiedTimestamp returns a boolean if a field has been set.
func (o *TokenInfo) HasModifiedTimestamp() bool {
	if o != nil && !IsNil(o.ModifiedTimestamp) {
		return true
	}

	return false
}

// SetModifiedTimestamp gets a reference to the given string and assigns it to the ModifiedTimestamp field.
func (o *TokenInfo) SetModifiedTimestamp(v string) {
	o.ModifiedTimestamp = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TokenInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TokenInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TokenInfo) SetName(v string) {
	o.Name = &v
}

// GetMemo returns the Memo field value if set, zero value otherwise.
func (o *TokenInfo) GetMemo() string {
	if o == nil || IsNil(o.Memo) {
		var ret string
		return ret
	}
	return *o.Memo
}

// GetMemoOk returns a tuple with the Memo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetMemoOk() (*string, bool) {
	if o == nil || IsNil(o.Memo) {
		return nil, false
	}
	return o.Memo, true
}

// HasMemo returns a boolean if a field has been set.
func (o *TokenInfo) HasMemo() bool {
	if o != nil && !IsNil(o.Memo) {
		return true
	}

	return false
}

// SetMemo gets a reference to the given string and assigns it to the Memo field.
func (o *TokenInfo) SetMemo(v string) {
	o.Memo = &v
}

// GetPauseKey returns the PauseKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TokenInfo) GetPauseKey() Key {
	if o == nil || IsNil(o.PauseKey.Get()) {
		var ret Key
		return ret
	}
	return *o.PauseKey.Get()
}

// GetPauseKeyOk returns a tuple with the PauseKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TokenInfo) GetPauseKeyOk() (*Key, bool) {
	if o == nil {
		return nil, false
	}
	return o.PauseKey.Get(), o.PauseKey.IsSet()
}

// HasPauseKey returns a boolean if a field has been set.
func (o *TokenInfo) HasPauseKey() bool {
	if o != nil && o.PauseKey.IsSet() {
		return true
	}

	return false
}

// SetPauseKey gets a reference to the given NullableKey and assigns it to the PauseKey field.
func (o *TokenInfo) SetPauseKey(v Key) {
	o.PauseKey.Set(&v)
}
// SetPauseKeyNil sets the value for PauseKey to be an explicit nil
func (o *TokenInfo) SetPauseKeyNil() {
	o.PauseKey.Set(nil)
}

// UnsetPauseKey ensures that no value is present for PauseKey, not even an explicit nil
func (o *TokenInfo) UnsetPauseKey() {
	o.PauseKey.Unset()
}

// GetPauseStatus returns the PauseStatus field value if set, zero value otherwise.
func (o *TokenInfo) GetPauseStatus() string {
	if o == nil || IsNil(o.PauseStatus) {
		var ret string
		return ret
	}
	return *o.PauseStatus
}

// GetPauseStatusOk returns a tuple with the PauseStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetPauseStatusOk() (*string, bool) {
	if o == nil || IsNil(o.PauseStatus) {
		return nil, false
	}
	return o.PauseStatus, true
}

// HasPauseStatus returns a boolean if a field has been set.
func (o *TokenInfo) HasPauseStatus() bool {
	if o != nil && !IsNil(o.PauseStatus) {
		return true
	}

	return false
}

// SetPauseStatus gets a reference to the given string and assigns it to the PauseStatus field.
func (o *TokenInfo) SetPauseStatus(v string) {
	o.PauseStatus = &v
}

// GetSupplyKey returns the SupplyKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TokenInfo) GetSupplyKey() Key {
	if o == nil || IsNil(o.SupplyKey.Get()) {
		var ret Key
		return ret
	}
	return *o.SupplyKey.Get()
}

// GetSupplyKeyOk returns a tuple with the SupplyKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TokenInfo) GetSupplyKeyOk() (*Key, bool) {
	if o == nil {
		return nil, false
	}
	return o.SupplyKey.Get(), o.SupplyKey.IsSet()
}

// HasSupplyKey returns a boolean if a field has been set.
func (o *TokenInfo) HasSupplyKey() bool {
	if o != nil && o.SupplyKey.IsSet() {
		return true
	}

	return false
}

// SetSupplyKey gets a reference to the given NullableKey and assigns it to the SupplyKey field.
func (o *TokenInfo) SetSupplyKey(v Key) {
	o.SupplyKey.Set(&v)
}
// SetSupplyKeyNil sets the value for SupplyKey to be an explicit nil
func (o *TokenInfo) SetSupplyKeyNil() {
	o.SupplyKey.Set(nil)
}

// UnsetSupplyKey ensures that no value is present for SupplyKey, not even an explicit nil
func (o *TokenInfo) UnsetSupplyKey() {
	o.SupplyKey.Unset()
}

// GetSupplyType returns the SupplyType field value if set, zero value otherwise.
func (o *TokenInfo) GetSupplyType() string {
	if o == nil || IsNil(o.SupplyType) {
		var ret string
		return ret
	}
	return *o.SupplyType
}

// GetSupplyTypeOk returns a tuple with the SupplyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetSupplyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SupplyType) {
		return nil, false
	}
	return o.SupplyType, true
}

// HasSupplyType returns a boolean if a field has been set.
func (o *TokenInfo) HasSupplyType() bool {
	if o != nil && !IsNil(o.SupplyType) {
		return true
	}

	return false
}

// SetSupplyType gets a reference to the given string and assigns it to the SupplyType field.
func (o *TokenInfo) SetSupplyType(v string) {
	o.SupplyType = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *TokenInfo) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *TokenInfo) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *TokenInfo) SetSymbol(v string) {
	o.Symbol = &v
}

// GetTokenId returns the TokenId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TokenInfo) GetTokenId() string {
	if o == nil || IsNil(o.TokenId.Get()) {
		var ret string
		return ret
	}
	return *o.TokenId.Get()
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TokenInfo) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TokenId.Get(), o.TokenId.IsSet()
}

// HasTokenId returns a boolean if a field has been set.
func (o *TokenInfo) HasTokenId() bool {
	if o != nil && o.TokenId.IsSet() {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given NullableString and assigns it to the TokenId field.
func (o *TokenInfo) SetTokenId(v string) {
	o.TokenId.Set(&v)
}
// SetTokenIdNil sets the value for TokenId to be an explicit nil
func (o *TokenInfo) SetTokenIdNil() {
	o.TokenId.Set(nil)
}

// UnsetTokenId ensures that no value is present for TokenId, not even an explicit nil
func (o *TokenInfo) UnsetTokenId() {
	o.TokenId.Unset()
}

// GetTotalSupply returns the TotalSupply field value if set, zero value otherwise.
func (o *TokenInfo) GetTotalSupply() string {
	if o == nil || IsNil(o.TotalSupply) {
		var ret string
		return ret
	}
	return *o.TotalSupply
}

// GetTotalSupplyOk returns a tuple with the TotalSupply field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetTotalSupplyOk() (*string, bool) {
	if o == nil || IsNil(o.TotalSupply) {
		return nil, false
	}
	return o.TotalSupply, true
}

// HasTotalSupply returns a boolean if a field has been set.
func (o *TokenInfo) HasTotalSupply() bool {
	if o != nil && !IsNil(o.TotalSupply) {
		return true
	}

	return false
}

// SetTotalSupply gets a reference to the given string and assigns it to the TotalSupply field.
func (o *TokenInfo) SetTotalSupply(v string) {
	o.TotalSupply = &v
}

// GetTreasuryAccountId returns the TreasuryAccountId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TokenInfo) GetTreasuryAccountId() string {
	if o == nil || IsNil(o.TreasuryAccountId.Get()) {
		var ret string
		return ret
	}
	return *o.TreasuryAccountId.Get()
}

// GetTreasuryAccountIdOk returns a tuple with the TreasuryAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TokenInfo) GetTreasuryAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TreasuryAccountId.Get(), o.TreasuryAccountId.IsSet()
}

// HasTreasuryAccountId returns a boolean if a field has been set.
func (o *TokenInfo) HasTreasuryAccountId() bool {
	if o != nil && o.TreasuryAccountId.IsSet() {
		return true
	}

	return false
}

// SetTreasuryAccountId gets a reference to the given NullableString and assigns it to the TreasuryAccountId field.
func (o *TokenInfo) SetTreasuryAccountId(v string) {
	o.TreasuryAccountId.Set(&v)
}
// SetTreasuryAccountIdNil sets the value for TreasuryAccountId to be an explicit nil
func (o *TokenInfo) SetTreasuryAccountIdNil() {
	o.TreasuryAccountId.Set(nil)
}

// UnsetTreasuryAccountId ensures that no value is present for TreasuryAccountId, not even an explicit nil
func (o *TokenInfo) UnsetTreasuryAccountId() {
	o.TreasuryAccountId.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TokenInfo) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TokenInfo) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TokenInfo) SetType(v string) {
	o.Type = &v
}

// GetWipeKey returns the WipeKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TokenInfo) GetWipeKey() Key {
	if o == nil || IsNil(o.WipeKey.Get()) {
		var ret Key
		return ret
	}
	return *o.WipeKey.Get()
}

// GetWipeKeyOk returns a tuple with the WipeKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TokenInfo) GetWipeKeyOk() (*Key, bool) {
	if o == nil {
		return nil, false
	}
	return o.WipeKey.Get(), o.WipeKey.IsSet()
}

// HasWipeKey returns a boolean if a field has been set.
func (o *TokenInfo) HasWipeKey() bool {
	if o != nil && o.WipeKey.IsSet() {
		return true
	}

	return false
}

// SetWipeKey gets a reference to the given NullableKey and assigns it to the WipeKey field.
func (o *TokenInfo) SetWipeKey(v Key) {
	o.WipeKey.Set(&v)
}
// SetWipeKeyNil sets the value for WipeKey to be an explicit nil
func (o *TokenInfo) SetWipeKeyNil() {
	o.WipeKey.Set(nil)
}

// UnsetWipeKey ensures that no value is present for WipeKey, not even an explicit nil
func (o *TokenInfo) UnsetWipeKey() {
	o.WipeKey.Unset()
}

// GetCustomFees returns the CustomFees field value if set, zero value otherwise.
func (o *TokenInfo) GetCustomFees() CustomFees {
	if o == nil || IsNil(o.CustomFees) {
		var ret CustomFees
		return ret
	}
	return *o.CustomFees
}

// GetCustomFeesOk returns a tuple with the CustomFees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetCustomFeesOk() (*CustomFees, bool) {
	if o == nil || IsNil(o.CustomFees) {
		return nil, false
	}
	return o.CustomFees, true
}

// HasCustomFees returns a boolean if a field has been set.
func (o *TokenInfo) HasCustomFees() bool {
	if o != nil && !IsNil(o.CustomFees) {
		return true
	}

	return false
}

// SetCustomFees gets a reference to the given CustomFees and assigns it to the CustomFees field.
func (o *TokenInfo) SetCustomFees(v CustomFees) {
	o.CustomFees = &v
}

func (o TokenInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AdminKey.IsSet() {
		toSerialize["admin_key"] = o.AdminKey.Get()
	}
	if o.AutoRenewAccount.IsSet() {
		toSerialize["auto_renew_account"] = o.AutoRenewAccount.Get()
	}
	if o.AutoRenewPeriod.IsSet() {
		toSerialize["auto_renew_period"] = o.AutoRenewPeriod.Get()
	}
	if !IsNil(o.CreatedTimestamp) {
		toSerialize["created_timestamp"] = o.CreatedTimestamp
	}
	if !IsNil(o.Decimals) {
		toSerialize["decimals"] = o.Decimals
	}
	if o.Deleted.IsSet() {
		toSerialize["deleted"] = o.Deleted.Get()
	}
	if o.ExpiryTimestamp.IsSet() {
		toSerialize["expiry_timestamp"] = o.ExpiryTimestamp.Get()
	}
	if o.FeeScheduleKey.IsSet() {
		toSerialize["fee_schedule_key"] = o.FeeScheduleKey.Get()
	}
	if !IsNil(o.FreezeDefault) {
		toSerialize["freeze_default"] = o.FreezeDefault
	}
	if o.FreezeKey.IsSet() {
		toSerialize["freeze_key"] = o.FreezeKey.Get()
	}
	if !IsNil(o.InitialSupply) {
		toSerialize["initial_supply"] = o.InitialSupply
	}
	if o.KycKey.IsSet() {
		toSerialize["kyc_key"] = o.KycKey.Get()
	}
	if !IsNil(o.MaxSupply) {
		toSerialize["max_supply"] = o.MaxSupply
	}
	if !IsNil(o.ModifiedTimestamp) {
		toSerialize["modified_timestamp"] = o.ModifiedTimestamp
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Memo) {
		toSerialize["memo"] = o.Memo
	}
	if o.PauseKey.IsSet() {
		toSerialize["pause_key"] = o.PauseKey.Get()
	}
	if !IsNil(o.PauseStatus) {
		toSerialize["pause_status"] = o.PauseStatus
	}
	if o.SupplyKey.IsSet() {
		toSerialize["supply_key"] = o.SupplyKey.Get()
	}
	if !IsNil(o.SupplyType) {
		toSerialize["supply_type"] = o.SupplyType
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if o.TokenId.IsSet() {
		toSerialize["token_id"] = o.TokenId.Get()
	}
	if !IsNil(o.TotalSupply) {
		toSerialize["total_supply"] = o.TotalSupply
	}
	if o.TreasuryAccountId.IsSet() {
		toSerialize["treasury_account_id"] = o.TreasuryAccountId.Get()
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.WipeKey.IsSet() {
		toSerialize["wipe_key"] = o.WipeKey.Get()
	}
	if !IsNil(o.CustomFees) {
		toSerialize["custom_fees"] = o.CustomFees
	}
	return toSerialize, nil
}

type NullableTokenInfo struct {
	value *TokenInfo
	isSet bool
}

func (v NullableTokenInfo) Get() *TokenInfo {
	return v.value
}

func (v *NullableTokenInfo) Set(val *TokenInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenInfo(val *TokenInfo) *NullableTokenInfo {
	return &NullableTokenInfo{value: val, isSet: true}
}

func (v NullableTokenInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


