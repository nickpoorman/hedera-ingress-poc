/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
)

// checks if the NetworkFee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkFee{}

// NetworkFee struct for NetworkFee
type NetworkFee struct {
	// gas cost in tinybars
	Gas *int64 `json:"gas,omitempty"`
	// type of the transaction
	TransactionType *string `json:"transaction_type,omitempty"`
}

// NewNetworkFee instantiates a new NetworkFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkFee() *NetworkFee {
	this := NetworkFee{}
	return &this
}

// NewNetworkFeeWithDefaults instantiates a new NetworkFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkFeeWithDefaults() *NetworkFee {
	this := NetworkFee{}
	return &this
}

// GetGas returns the Gas field value if set, zero value otherwise.
func (o *NetworkFee) GetGas() int64 {
	if o == nil || IsNil(o.Gas) {
		var ret int64
		return ret
	}
	return *o.Gas
}

// GetGasOk returns a tuple with the Gas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkFee) GetGasOk() (*int64, bool) {
	if o == nil || IsNil(o.Gas) {
		return nil, false
	}
	return o.Gas, true
}

// HasGas returns a boolean if a field has been set.
func (o *NetworkFee) HasGas() bool {
	if o != nil && !IsNil(o.Gas) {
		return true
	}

	return false
}

// SetGas gets a reference to the given int64 and assigns it to the Gas field.
func (o *NetworkFee) SetGas(v int64) {
	o.Gas = &v
}

// GetTransactionType returns the TransactionType field value if set, zero value otherwise.
func (o *NetworkFee) GetTransactionType() string {
	if o == nil || IsNil(o.TransactionType) {
		var ret string
		return ret
	}
	return *o.TransactionType
}

// GetTransactionTypeOk returns a tuple with the TransactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkFee) GetTransactionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionType) {
		return nil, false
	}
	return o.TransactionType, true
}

// HasTransactionType returns a boolean if a field has been set.
func (o *NetworkFee) HasTransactionType() bool {
	if o != nil && !IsNil(o.TransactionType) {
		return true
	}

	return false
}

// SetTransactionType gets a reference to the given string and assigns it to the TransactionType field.
func (o *NetworkFee) SetTransactionType(v string) {
	o.TransactionType = &v
}

func (o NetworkFee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Gas) {
		toSerialize["gas"] = o.Gas
	}
	if !IsNil(o.TransactionType) {
		toSerialize["transaction_type"] = o.TransactionType
	}
	return toSerialize, nil
}

type NullableNetworkFee struct {
	value *NetworkFee
	isSet bool
}

func (v NullableNetworkFee) Get() *NetworkFee {
	return v.value
}

func (v *NullableNetworkFee) Set(val *NetworkFee) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkFee) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkFee(val *NetworkFee) *NullableNetworkFee {
	return &NullableNetworkFee{value: val, isSet: true}
}

func (v NullableNetworkFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


