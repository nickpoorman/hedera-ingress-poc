/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
)

// checks if the ScheduleSignature type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduleSignature{}

// ScheduleSignature struct for ScheduleSignature
type ScheduleSignature struct {
	ConsensusTimestamp *string `json:"consensus_timestamp,omitempty"`
	PublicKeyPrefix *string `json:"public_key_prefix,omitempty"`
	Signature *string `json:"signature,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewScheduleSignature instantiates a new ScheduleSignature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduleSignature() *ScheduleSignature {
	this := ScheduleSignature{}
	return &this
}

// NewScheduleSignatureWithDefaults instantiates a new ScheduleSignature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleSignatureWithDefaults() *ScheduleSignature {
	this := ScheduleSignature{}
	return &this
}

// GetConsensusTimestamp returns the ConsensusTimestamp field value if set, zero value otherwise.
func (o *ScheduleSignature) GetConsensusTimestamp() string {
	if o == nil || IsNil(o.ConsensusTimestamp) {
		var ret string
		return ret
	}
	return *o.ConsensusTimestamp
}

// GetConsensusTimestampOk returns a tuple with the ConsensusTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleSignature) GetConsensusTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.ConsensusTimestamp) {
		return nil, false
	}
	return o.ConsensusTimestamp, true
}

// HasConsensusTimestamp returns a boolean if a field has been set.
func (o *ScheduleSignature) HasConsensusTimestamp() bool {
	if o != nil && !IsNil(o.ConsensusTimestamp) {
		return true
	}

	return false
}

// SetConsensusTimestamp gets a reference to the given string and assigns it to the ConsensusTimestamp field.
func (o *ScheduleSignature) SetConsensusTimestamp(v string) {
	o.ConsensusTimestamp = &v
}

// GetPublicKeyPrefix returns the PublicKeyPrefix field value if set, zero value otherwise.
func (o *ScheduleSignature) GetPublicKeyPrefix() string {
	if o == nil || IsNil(o.PublicKeyPrefix) {
		var ret string
		return ret
	}
	return *o.PublicKeyPrefix
}

// GetPublicKeyPrefixOk returns a tuple with the PublicKeyPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleSignature) GetPublicKeyPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.PublicKeyPrefix) {
		return nil, false
	}
	return o.PublicKeyPrefix, true
}

// HasPublicKeyPrefix returns a boolean if a field has been set.
func (o *ScheduleSignature) HasPublicKeyPrefix() bool {
	if o != nil && !IsNil(o.PublicKeyPrefix) {
		return true
	}

	return false
}

// SetPublicKeyPrefix gets a reference to the given string and assigns it to the PublicKeyPrefix field.
func (o *ScheduleSignature) SetPublicKeyPrefix(v string) {
	o.PublicKeyPrefix = &v
}

// GetSignature returns the Signature field value if set, zero value otherwise.
func (o *ScheduleSignature) GetSignature() string {
	if o == nil || IsNil(o.Signature) {
		var ret string
		return ret
	}
	return *o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleSignature) GetSignatureOk() (*string, bool) {
	if o == nil || IsNil(o.Signature) {
		return nil, false
	}
	return o.Signature, true
}

// HasSignature returns a boolean if a field has been set.
func (o *ScheduleSignature) HasSignature() bool {
	if o != nil && !IsNil(o.Signature) {
		return true
	}

	return false
}

// SetSignature gets a reference to the given string and assigns it to the Signature field.
func (o *ScheduleSignature) SetSignature(v string) {
	o.Signature = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ScheduleSignature) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleSignature) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ScheduleSignature) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ScheduleSignature) SetType(v string) {
	o.Type = &v
}

func (o ScheduleSignature) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduleSignature) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConsensusTimestamp) {
		toSerialize["consensus_timestamp"] = o.ConsensusTimestamp
	}
	if !IsNil(o.PublicKeyPrefix) {
		toSerialize["public_key_prefix"] = o.PublicKeyPrefix
	}
	if !IsNil(o.Signature) {
		toSerialize["signature"] = o.Signature
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableScheduleSignature struct {
	value *ScheduleSignature
	isSet bool
}

func (v NullableScheduleSignature) Get() *ScheduleSignature {
	return v.value
}

func (v *NullableScheduleSignature) Set(val *ScheduleSignature) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleSignature) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleSignature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleSignature(val *ScheduleSignature) *NullableScheduleSignature {
	return &NullableScheduleSignature{value: val, isSet: true}
}

func (v NullableScheduleSignature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleSignature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


