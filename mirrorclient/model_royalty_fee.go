/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
)

// checks if the RoyaltyFee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoyaltyFee{}

// RoyaltyFee struct for RoyaltyFee
type RoyaltyFee struct {
	AllCollectorsAreExempt *bool `json:"all_collectors_are_exempt,omitempty"`
	Amount *RoyaltyFeeAmount `json:"amount,omitempty"`
	// Network entity ID in the format of `shard.realm.num`
	CollectorAccountId NullableString `json:"collector_account_id,omitempty"`
	FallbackFee *RoyaltyFeeFallbackFee `json:"fallback_fee,omitempty"`
}

// NewRoyaltyFee instantiates a new RoyaltyFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoyaltyFee() *RoyaltyFee {
	this := RoyaltyFee{}
	return &this
}

// NewRoyaltyFeeWithDefaults instantiates a new RoyaltyFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoyaltyFeeWithDefaults() *RoyaltyFee {
	this := RoyaltyFee{}
	return &this
}

// GetAllCollectorsAreExempt returns the AllCollectorsAreExempt field value if set, zero value otherwise.
func (o *RoyaltyFee) GetAllCollectorsAreExempt() bool {
	if o == nil || IsNil(o.AllCollectorsAreExempt) {
		var ret bool
		return ret
	}
	return *o.AllCollectorsAreExempt
}

// GetAllCollectorsAreExemptOk returns a tuple with the AllCollectorsAreExempt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoyaltyFee) GetAllCollectorsAreExemptOk() (*bool, bool) {
	if o == nil || IsNil(o.AllCollectorsAreExempt) {
		return nil, false
	}
	return o.AllCollectorsAreExempt, true
}

// HasAllCollectorsAreExempt returns a boolean if a field has been set.
func (o *RoyaltyFee) HasAllCollectorsAreExempt() bool {
	if o != nil && !IsNil(o.AllCollectorsAreExempt) {
		return true
	}

	return false
}

// SetAllCollectorsAreExempt gets a reference to the given bool and assigns it to the AllCollectorsAreExempt field.
func (o *RoyaltyFee) SetAllCollectorsAreExempt(v bool) {
	o.AllCollectorsAreExempt = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *RoyaltyFee) GetAmount() RoyaltyFeeAmount {
	if o == nil || IsNil(o.Amount) {
		var ret RoyaltyFeeAmount
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoyaltyFee) GetAmountOk() (*RoyaltyFeeAmount, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *RoyaltyFee) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given RoyaltyFeeAmount and assigns it to the Amount field.
func (o *RoyaltyFee) SetAmount(v RoyaltyFeeAmount) {
	o.Amount = &v
}

// GetCollectorAccountId returns the CollectorAccountId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RoyaltyFee) GetCollectorAccountId() string {
	if o == nil || IsNil(o.CollectorAccountId.Get()) {
		var ret string
		return ret
	}
	return *o.CollectorAccountId.Get()
}

// GetCollectorAccountIdOk returns a tuple with the CollectorAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RoyaltyFee) GetCollectorAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CollectorAccountId.Get(), o.CollectorAccountId.IsSet()
}

// HasCollectorAccountId returns a boolean if a field has been set.
func (o *RoyaltyFee) HasCollectorAccountId() bool {
	if o != nil && o.CollectorAccountId.IsSet() {
		return true
	}

	return false
}

// SetCollectorAccountId gets a reference to the given NullableString and assigns it to the CollectorAccountId field.
func (o *RoyaltyFee) SetCollectorAccountId(v string) {
	o.CollectorAccountId.Set(&v)
}
// SetCollectorAccountIdNil sets the value for CollectorAccountId to be an explicit nil
func (o *RoyaltyFee) SetCollectorAccountIdNil() {
	o.CollectorAccountId.Set(nil)
}

// UnsetCollectorAccountId ensures that no value is present for CollectorAccountId, not even an explicit nil
func (o *RoyaltyFee) UnsetCollectorAccountId() {
	o.CollectorAccountId.Unset()
}

// GetFallbackFee returns the FallbackFee field value if set, zero value otherwise.
func (o *RoyaltyFee) GetFallbackFee() RoyaltyFeeFallbackFee {
	if o == nil || IsNil(o.FallbackFee) {
		var ret RoyaltyFeeFallbackFee
		return ret
	}
	return *o.FallbackFee
}

// GetFallbackFeeOk returns a tuple with the FallbackFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoyaltyFee) GetFallbackFeeOk() (*RoyaltyFeeFallbackFee, bool) {
	if o == nil || IsNil(o.FallbackFee) {
		return nil, false
	}
	return o.FallbackFee, true
}

// HasFallbackFee returns a boolean if a field has been set.
func (o *RoyaltyFee) HasFallbackFee() bool {
	if o != nil && !IsNil(o.FallbackFee) {
		return true
	}

	return false
}

// SetFallbackFee gets a reference to the given RoyaltyFeeFallbackFee and assigns it to the FallbackFee field.
func (o *RoyaltyFee) SetFallbackFee(v RoyaltyFeeFallbackFee) {
	o.FallbackFee = &v
}

func (o RoyaltyFee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoyaltyFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllCollectorsAreExempt) {
		toSerialize["all_collectors_are_exempt"] = o.AllCollectorsAreExempt
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if o.CollectorAccountId.IsSet() {
		toSerialize["collector_account_id"] = o.CollectorAccountId.Get()
	}
	if !IsNil(o.FallbackFee) {
		toSerialize["fallback_fee"] = o.FallbackFee
	}
	return toSerialize, nil
}

type NullableRoyaltyFee struct {
	value *RoyaltyFee
	isSet bool
}

func (v NullableRoyaltyFee) Get() *RoyaltyFee {
	return v.value
}

func (v *NullableRoyaltyFee) Set(val *RoyaltyFee) {
	v.value = val
	v.isSet = true
}

func (v NullableRoyaltyFee) IsSet() bool {
	return v.isSet
}

func (v *NullableRoyaltyFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoyaltyFee(val *RoyaltyFee) *NullableRoyaltyFee {
	return &NullableRoyaltyFee{value: val, isSet: true}
}

func (v NullableRoyaltyFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoyaltyFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


