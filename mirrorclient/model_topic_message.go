/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
)

// checks if the TopicMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TopicMessage{}

// TopicMessage struct for TopicMessage
type TopicMessage struct {
	ChunkInfo NullableChunkInfo `json:"chunk_info,omitempty"`
	ConsensusTimestamp string `json:"consensus_timestamp"`
	Message string `json:"message"`
	// Network entity ID in the format of `shard.realm.num`
	PayerAccountId NullableString `json:"payer_account_id"`
	RunningHash string `json:"running_hash"`
	RunningHashVersion int32 `json:"running_hash_version"`
	SequenceNumber int64 `json:"sequence_number"`
	// Network entity ID in the format of `shard.realm.num`
	TopicId NullableString `json:"topic_id"`
}

// NewTopicMessage instantiates a new TopicMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTopicMessage(consensusTimestamp string, message string, payerAccountId NullableString, runningHash string, runningHashVersion int32, sequenceNumber int64, topicId NullableString) *TopicMessage {
	this := TopicMessage{}
	this.ConsensusTimestamp = consensusTimestamp
	this.Message = message
	this.PayerAccountId = payerAccountId
	this.RunningHash = runningHash
	this.RunningHashVersion = runningHashVersion
	this.SequenceNumber = sequenceNumber
	this.TopicId = topicId
	return &this
}

// NewTopicMessageWithDefaults instantiates a new TopicMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTopicMessageWithDefaults() *TopicMessage {
	this := TopicMessage{}
	return &this
}

// GetChunkInfo returns the ChunkInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TopicMessage) GetChunkInfo() ChunkInfo {
	if o == nil || IsNil(o.ChunkInfo.Get()) {
		var ret ChunkInfo
		return ret
	}
	return *o.ChunkInfo.Get()
}

// GetChunkInfoOk returns a tuple with the ChunkInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TopicMessage) GetChunkInfoOk() (*ChunkInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChunkInfo.Get(), o.ChunkInfo.IsSet()
}

// HasChunkInfo returns a boolean if a field has been set.
func (o *TopicMessage) HasChunkInfo() bool {
	if o != nil && o.ChunkInfo.IsSet() {
		return true
	}

	return false
}

// SetChunkInfo gets a reference to the given NullableChunkInfo and assigns it to the ChunkInfo field.
func (o *TopicMessage) SetChunkInfo(v ChunkInfo) {
	o.ChunkInfo.Set(&v)
}
// SetChunkInfoNil sets the value for ChunkInfo to be an explicit nil
func (o *TopicMessage) SetChunkInfoNil() {
	o.ChunkInfo.Set(nil)
}

// UnsetChunkInfo ensures that no value is present for ChunkInfo, not even an explicit nil
func (o *TopicMessage) UnsetChunkInfo() {
	o.ChunkInfo.Unset()
}

// GetConsensusTimestamp returns the ConsensusTimestamp field value
func (o *TopicMessage) GetConsensusTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConsensusTimestamp
}

// GetConsensusTimestampOk returns a tuple with the ConsensusTimestamp field value
// and a boolean to check if the value has been set.
func (o *TopicMessage) GetConsensusTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConsensusTimestamp, true
}

// SetConsensusTimestamp sets field value
func (o *TopicMessage) SetConsensusTimestamp(v string) {
	o.ConsensusTimestamp = v
}

// GetMessage returns the Message field value
func (o *TopicMessage) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *TopicMessage) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *TopicMessage) SetMessage(v string) {
	o.Message = v
}

// GetPayerAccountId returns the PayerAccountId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *TopicMessage) GetPayerAccountId() string {
	if o == nil || o.PayerAccountId.Get() == nil {
		var ret string
		return ret
	}

	return *o.PayerAccountId.Get()
}

// GetPayerAccountIdOk returns a tuple with the PayerAccountId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TopicMessage) GetPayerAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PayerAccountId.Get(), o.PayerAccountId.IsSet()
}

// SetPayerAccountId sets field value
func (o *TopicMessage) SetPayerAccountId(v string) {
	o.PayerAccountId.Set(&v)
}

// GetRunningHash returns the RunningHash field value
func (o *TopicMessage) GetRunningHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RunningHash
}

// GetRunningHashOk returns a tuple with the RunningHash field value
// and a boolean to check if the value has been set.
func (o *TopicMessage) GetRunningHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RunningHash, true
}

// SetRunningHash sets field value
func (o *TopicMessage) SetRunningHash(v string) {
	o.RunningHash = v
}

// GetRunningHashVersion returns the RunningHashVersion field value
func (o *TopicMessage) GetRunningHashVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RunningHashVersion
}

// GetRunningHashVersionOk returns a tuple with the RunningHashVersion field value
// and a boolean to check if the value has been set.
func (o *TopicMessage) GetRunningHashVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RunningHashVersion, true
}

// SetRunningHashVersion sets field value
func (o *TopicMessage) SetRunningHashVersion(v int32) {
	o.RunningHashVersion = v
}

// GetSequenceNumber returns the SequenceNumber field value
func (o *TopicMessage) GetSequenceNumber() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SequenceNumber
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value
// and a boolean to check if the value has been set.
func (o *TopicMessage) GetSequenceNumberOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SequenceNumber, true
}

// SetSequenceNumber sets field value
func (o *TopicMessage) SetSequenceNumber(v int64) {
	o.SequenceNumber = v
}

// GetTopicId returns the TopicId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *TopicMessage) GetTopicId() string {
	if o == nil || o.TopicId.Get() == nil {
		var ret string
		return ret
	}

	return *o.TopicId.Get()
}

// GetTopicIdOk returns a tuple with the TopicId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TopicMessage) GetTopicIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TopicId.Get(), o.TopicId.IsSet()
}

// SetTopicId sets field value
func (o *TopicMessage) SetTopicId(v string) {
	o.TopicId.Set(&v)
}

func (o TopicMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TopicMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ChunkInfo.IsSet() {
		toSerialize["chunk_info"] = o.ChunkInfo.Get()
	}
	toSerialize["consensus_timestamp"] = o.ConsensusTimestamp
	toSerialize["message"] = o.Message
	toSerialize["payer_account_id"] = o.PayerAccountId.Get()
	toSerialize["running_hash"] = o.RunningHash
	toSerialize["running_hash_version"] = o.RunningHashVersion
	toSerialize["sequence_number"] = o.SequenceNumber
	toSerialize["topic_id"] = o.TopicId.Get()
	return toSerialize, nil
}

type NullableTopicMessage struct {
	value *TopicMessage
	isSet bool
}

func (v NullableTopicMessage) Get() *TopicMessage {
	return v.value
}

func (v *NullableTopicMessage) Set(val *TopicMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableTopicMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableTopicMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTopicMessage(val *TopicMessage) *NullableTopicMessage {
	return &NullableTopicMessage{value: val, isSet: true}
}

func (v NullableTopicMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTopicMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


