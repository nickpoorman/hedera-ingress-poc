/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
)

// checks if the ExchangeRate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExchangeRate{}

// ExchangeRate struct for ExchangeRate
type ExchangeRate struct {
	CentEquivalent *int32 `json:"cent_equivalent,omitempty"`
	ExpirationTime *int64 `json:"expiration_time,omitempty"`
	HbarEquivalent *int32 `json:"hbar_equivalent,omitempty"`
}

// NewExchangeRate instantiates a new ExchangeRate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchangeRate() *ExchangeRate {
	this := ExchangeRate{}
	return &this
}

// NewExchangeRateWithDefaults instantiates a new ExchangeRate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeRateWithDefaults() *ExchangeRate {
	this := ExchangeRate{}
	return &this
}

// GetCentEquivalent returns the CentEquivalent field value if set, zero value otherwise.
func (o *ExchangeRate) GetCentEquivalent() int32 {
	if o == nil || IsNil(o.CentEquivalent) {
		var ret int32
		return ret
	}
	return *o.CentEquivalent
}

// GetCentEquivalentOk returns a tuple with the CentEquivalent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeRate) GetCentEquivalentOk() (*int32, bool) {
	if o == nil || IsNil(o.CentEquivalent) {
		return nil, false
	}
	return o.CentEquivalent, true
}

// HasCentEquivalent returns a boolean if a field has been set.
func (o *ExchangeRate) HasCentEquivalent() bool {
	if o != nil && !IsNil(o.CentEquivalent) {
		return true
	}

	return false
}

// SetCentEquivalent gets a reference to the given int32 and assigns it to the CentEquivalent field.
func (o *ExchangeRate) SetCentEquivalent(v int32) {
	o.CentEquivalent = &v
}

// GetExpirationTime returns the ExpirationTime field value if set, zero value otherwise.
func (o *ExchangeRate) GetExpirationTime() int64 {
	if o == nil || IsNil(o.ExpirationTime) {
		var ret int64
		return ret
	}
	return *o.ExpirationTime
}

// GetExpirationTimeOk returns a tuple with the ExpirationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeRate) GetExpirationTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.ExpirationTime) {
		return nil, false
	}
	return o.ExpirationTime, true
}

// HasExpirationTime returns a boolean if a field has been set.
func (o *ExchangeRate) HasExpirationTime() bool {
	if o != nil && !IsNil(o.ExpirationTime) {
		return true
	}

	return false
}

// SetExpirationTime gets a reference to the given int64 and assigns it to the ExpirationTime field.
func (o *ExchangeRate) SetExpirationTime(v int64) {
	o.ExpirationTime = &v
}

// GetHbarEquivalent returns the HbarEquivalent field value if set, zero value otherwise.
func (o *ExchangeRate) GetHbarEquivalent() int32 {
	if o == nil || IsNil(o.HbarEquivalent) {
		var ret int32
		return ret
	}
	return *o.HbarEquivalent
}

// GetHbarEquivalentOk returns a tuple with the HbarEquivalent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeRate) GetHbarEquivalentOk() (*int32, bool) {
	if o == nil || IsNil(o.HbarEquivalent) {
		return nil, false
	}
	return o.HbarEquivalent, true
}

// HasHbarEquivalent returns a boolean if a field has been set.
func (o *ExchangeRate) HasHbarEquivalent() bool {
	if o != nil && !IsNil(o.HbarEquivalent) {
		return true
	}

	return false
}

// SetHbarEquivalent gets a reference to the given int32 and assigns it to the HbarEquivalent field.
func (o *ExchangeRate) SetHbarEquivalent(v int32) {
	o.HbarEquivalent = &v
}

func (o ExchangeRate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExchangeRate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CentEquivalent) {
		toSerialize["cent_equivalent"] = o.CentEquivalent
	}
	if !IsNil(o.ExpirationTime) {
		toSerialize["expiration_time"] = o.ExpirationTime
	}
	if !IsNil(o.HbarEquivalent) {
		toSerialize["hbar_equivalent"] = o.HbarEquivalent
	}
	return toSerialize, nil
}

type NullableExchangeRate struct {
	value *ExchangeRate
	isSet bool
}

func (v NullableExchangeRate) Get() *ExchangeRate {
	return v.value
}

func (v *NullableExchangeRate) Set(val *ExchangeRate) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeRate) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeRate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeRate(val *ExchangeRate) *NullableExchangeRate {
	return &NullableExchangeRate{value: val, isSet: true}
}

func (v NullableExchangeRate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeRate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


