/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
)

// checks if the Allowance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Allowance{}

// Allowance struct for Allowance
type Allowance struct {
	// The amount remaining of the original amount granted.
	Amount *int64 `json:"amount,omitempty"`
	// The granted amount of the spender's allowance.
	AmountGranted *int64 `json:"amount_granted,omitempty"`
	// Network entity ID in the format of `shard.realm.num`
	Owner NullableString `json:"owner,omitempty"`
	// Network entity ID in the format of `shard.realm.num`
	Spender NullableString `json:"spender,omitempty"`
	Timestamp *TimestampRange `json:"timestamp,omitempty"`
}

// NewAllowance instantiates a new Allowance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllowance() *Allowance {
	this := Allowance{}
	return &this
}

// NewAllowanceWithDefaults instantiates a new Allowance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllowanceWithDefaults() *Allowance {
	this := Allowance{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *Allowance) GetAmount() int64 {
	if o == nil || IsNil(o.Amount) {
		var ret int64
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allowance) GetAmountOk() (*int64, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *Allowance) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int64 and assigns it to the Amount field.
func (o *Allowance) SetAmount(v int64) {
	o.Amount = &v
}

// GetAmountGranted returns the AmountGranted field value if set, zero value otherwise.
func (o *Allowance) GetAmountGranted() int64 {
	if o == nil || IsNil(o.AmountGranted) {
		var ret int64
		return ret
	}
	return *o.AmountGranted
}

// GetAmountGrantedOk returns a tuple with the AmountGranted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allowance) GetAmountGrantedOk() (*int64, bool) {
	if o == nil || IsNil(o.AmountGranted) {
		return nil, false
	}
	return o.AmountGranted, true
}

// HasAmountGranted returns a boolean if a field has been set.
func (o *Allowance) HasAmountGranted() bool {
	if o != nil && !IsNil(o.AmountGranted) {
		return true
	}

	return false
}

// SetAmountGranted gets a reference to the given int64 and assigns it to the AmountGranted field.
func (o *Allowance) SetAmountGranted(v int64) {
	o.AmountGranted = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Allowance) GetOwner() string {
	if o == nil || IsNil(o.Owner.Get()) {
		var ret string
		return ret
	}
	return *o.Owner.Get()
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Allowance) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Owner.Get(), o.Owner.IsSet()
}

// HasOwner returns a boolean if a field has been set.
func (o *Allowance) HasOwner() bool {
	if o != nil && o.Owner.IsSet() {
		return true
	}

	return false
}

// SetOwner gets a reference to the given NullableString and assigns it to the Owner field.
func (o *Allowance) SetOwner(v string) {
	o.Owner.Set(&v)
}
// SetOwnerNil sets the value for Owner to be an explicit nil
func (o *Allowance) SetOwnerNil() {
	o.Owner.Set(nil)
}

// UnsetOwner ensures that no value is present for Owner, not even an explicit nil
func (o *Allowance) UnsetOwner() {
	o.Owner.Unset()
}

// GetSpender returns the Spender field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Allowance) GetSpender() string {
	if o == nil || IsNil(o.Spender.Get()) {
		var ret string
		return ret
	}
	return *o.Spender.Get()
}

// GetSpenderOk returns a tuple with the Spender field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Allowance) GetSpenderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Spender.Get(), o.Spender.IsSet()
}

// HasSpender returns a boolean if a field has been set.
func (o *Allowance) HasSpender() bool {
	if o != nil && o.Spender.IsSet() {
		return true
	}

	return false
}

// SetSpender gets a reference to the given NullableString and assigns it to the Spender field.
func (o *Allowance) SetSpender(v string) {
	o.Spender.Set(&v)
}
// SetSpenderNil sets the value for Spender to be an explicit nil
func (o *Allowance) SetSpenderNil() {
	o.Spender.Set(nil)
}

// UnsetSpender ensures that no value is present for Spender, not even an explicit nil
func (o *Allowance) UnsetSpender() {
	o.Spender.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *Allowance) GetTimestamp() TimestampRange {
	if o == nil || IsNil(o.Timestamp) {
		var ret TimestampRange
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allowance) GetTimestampOk() (*TimestampRange, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *Allowance) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given TimestampRange and assigns it to the Timestamp field.
func (o *Allowance) SetTimestamp(v TimestampRange) {
	o.Timestamp = &v
}

func (o Allowance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Allowance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.AmountGranted) {
		toSerialize["amount_granted"] = o.AmountGranted
	}
	if o.Owner.IsSet() {
		toSerialize["owner"] = o.Owner.Get()
	}
	if o.Spender.IsSet() {
		toSerialize["spender"] = o.Spender.Get()
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	return toSerialize, nil
}

type NullableAllowance struct {
	value *Allowance
	isSet bool
}

func (v NullableAllowance) Get() *Allowance {
	return v.value
}

func (v *NullableAllowance) Set(val *Allowance) {
	v.value = val
	v.isSet = true
}

func (v NullableAllowance) IsSet() bool {
	return v.isSet
}

func (v *NullableAllowance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllowance(val *Allowance) *NullableAllowance {
	return &NullableAllowance{value: val, isSet: true}
}

func (v NullableAllowance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllowance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


