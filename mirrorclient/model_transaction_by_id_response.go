/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
)

// checks if the TransactionByIdResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionByIdResponse{}

// TransactionByIdResponse struct for TransactionByIdResponse
type TransactionByIdResponse struct {
	Transactions []TransactionDetail `json:"transactions,omitempty"`
}

// NewTransactionByIdResponse instantiates a new TransactionByIdResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionByIdResponse() *TransactionByIdResponse {
	this := TransactionByIdResponse{}
	return &this
}

// NewTransactionByIdResponseWithDefaults instantiates a new TransactionByIdResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionByIdResponseWithDefaults() *TransactionByIdResponse {
	this := TransactionByIdResponse{}
	return &this
}

// GetTransactions returns the Transactions field value if set, zero value otherwise.
func (o *TransactionByIdResponse) GetTransactions() []TransactionDetail {
	if o == nil || IsNil(o.Transactions) {
		var ret []TransactionDetail
		return ret
	}
	return o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionByIdResponse) GetTransactionsOk() ([]TransactionDetail, bool) {
	if o == nil || IsNil(o.Transactions) {
		return nil, false
	}
	return o.Transactions, true
}

// HasTransactions returns a boolean if a field has been set.
func (o *TransactionByIdResponse) HasTransactions() bool {
	if o != nil && !IsNil(o.Transactions) {
		return true
	}

	return false
}

// SetTransactions gets a reference to the given []TransactionDetail and assigns it to the Transactions field.
func (o *TransactionByIdResponse) SetTransactions(v []TransactionDetail) {
	o.Transactions = v
}

func (o TransactionByIdResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionByIdResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Transactions) {
		toSerialize["transactions"] = o.Transactions
	}
	return toSerialize, nil
}

type NullableTransactionByIdResponse struct {
	value *TransactionByIdResponse
	isSet bool
}

func (v NullableTransactionByIdResponse) Get() *TransactionByIdResponse {
	return v.value
}

func (v *NullableTransactionByIdResponse) Set(val *TransactionByIdResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionByIdResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionByIdResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionByIdResponse(val *TransactionByIdResponse) *NullableTransactionByIdResponse {
	return &NullableTransactionByIdResponse{value: val, isSet: true}
}

func (v NullableTransactionByIdResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionByIdResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


