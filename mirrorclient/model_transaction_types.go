/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
	"fmt"
)

// TransactionTypes the model 'TransactionTypes'
type TransactionTypes string

// List of TransactionTypes
const (
	CONSENSUSCREATETOPIC TransactionTypes = "CONSENSUSCREATETOPIC"
	CONSENSUSDELETETOPIC TransactionTypes = "CONSENSUSDELETETOPIC"
	CONSENSUSSUBMITMESSAGE TransactionTypes = "CONSENSUSSUBMITMESSAGE"
	CONSENSUSUPDATETOPIC TransactionTypes = "CONSENSUSUPDATETOPIC"
	CONTRACTCALL TransactionTypes = "CONTRACTCALL"
	CONTRACTCREATEINSTANCE TransactionTypes = "CONTRACTCREATEINSTANCE"
	CONTRACTDELETEINSTANCE TransactionTypes = "CONTRACTDELETEINSTANCE"
	CONTRACTUPDATEINSTANCE TransactionTypes = "CONTRACTUPDATEINSTANCE"
	CRYPTOADDLIVEHASH TransactionTypes = "CRYPTOADDLIVEHASH"
	CRYPTOAPPROVEALLOWANCE TransactionTypes = "CRYPTOAPPROVEALLOWANCE"
	CRYPTOCREATEACCOUNT TransactionTypes = "CRYPTOCREATEACCOUNT"
	CRYPTODELETE TransactionTypes = "CRYPTODELETE"
	CRYPTODELETEALLOWANCE TransactionTypes = "CRYPTODELETEALLOWANCE"
	CRYPTODELETELIVEHASH TransactionTypes = "CRYPTODELETELIVEHASH"
	CRYPTOTRANSFER TransactionTypes = "CRYPTOTRANSFER"
	CRYPTOUPDATEACCOUNT TransactionTypes = "CRYPTOUPDATEACCOUNT"
	ETHEREUMTRANSACTION TransactionTypes = "ETHEREUMTRANSACTION"
	FILEAPPEND TransactionTypes = "FILEAPPEND"
	FILECREATE TransactionTypes = "FILECREATE"
	FILEDELETE TransactionTypes = "FILEDELETE"
	FILEUPDATE TransactionTypes = "FILEUPDATE"
	FREEZE TransactionTypes = "FREEZE"
	NODESTAKEUPDATE TransactionTypes = "NODESTAKEUPDATE"
	SCHEDULECREATE TransactionTypes = "SCHEDULECREATE"
	SCHEDULEDELETE TransactionTypes = "SCHEDULEDELETE"
	SCHEDULESIGN TransactionTypes = "SCHEDULESIGN"
	SYSTEMDELETE TransactionTypes = "SYSTEMDELETE"
	SYSTEMUNDELETE TransactionTypes = "SYSTEMUNDELETE"
	TOKENASSOCIATE TransactionTypes = "TOKENASSOCIATE"
	TOKENBURN TransactionTypes = "TOKENBURN"
	TOKENCREATION TransactionTypes = "TOKENCREATION"
	TOKENDELETION TransactionTypes = "TOKENDELETION"
	TOKENDISSOCIATE TransactionTypes = "TOKENDISSOCIATE"
	TOKENFEESCHEDULEUPDATE TransactionTypes = "TOKENFEESCHEDULEUPDATE"
	TOKENFREEZE TransactionTypes = "TOKENFREEZE"
	TOKENGRANTKYC TransactionTypes = "TOKENGRANTKYC"
	TOKENMINT TransactionTypes = "TOKENMINT"
	TOKENPAUSE TransactionTypes = "TOKENPAUSE"
	TOKENREVOKEKYC TransactionTypes = "TOKENREVOKEKYC"
	TOKENUNFREEZE TransactionTypes = "TOKENUNFREEZE"
	TOKENUNPAUSE TransactionTypes = "TOKENUNPAUSE"
	TOKENUPDATE TransactionTypes = "TOKENUPDATE"
	TOKENWIPE TransactionTypes = "TOKENWIPE"
	UNCHECKEDSUBMIT TransactionTypes = "UNCHECKEDSUBMIT"
	UNKNOWN TransactionTypes = "UNKNOWN"
	UTILPRNG TransactionTypes = "UTILPRNG"
)

// All allowed values of TransactionTypes enum
var AllowedTransactionTypesEnumValues = []TransactionTypes{
	"CONSENSUSCREATETOPIC",
	"CONSENSUSDELETETOPIC",
	"CONSENSUSSUBMITMESSAGE",
	"CONSENSUSUPDATETOPIC",
	"CONTRACTCALL",
	"CONTRACTCREATEINSTANCE",
	"CONTRACTDELETEINSTANCE",
	"CONTRACTUPDATEINSTANCE",
	"CRYPTOADDLIVEHASH",
	"CRYPTOAPPROVEALLOWANCE",
	"CRYPTOCREATEACCOUNT",
	"CRYPTODELETE",
	"CRYPTODELETEALLOWANCE",
	"CRYPTODELETELIVEHASH",
	"CRYPTOTRANSFER",
	"CRYPTOUPDATEACCOUNT",
	"ETHEREUMTRANSACTION",
	"FILEAPPEND",
	"FILECREATE",
	"FILEDELETE",
	"FILEUPDATE",
	"FREEZE",
	"NODESTAKEUPDATE",
	"SCHEDULECREATE",
	"SCHEDULEDELETE",
	"SCHEDULESIGN",
	"SYSTEMDELETE",
	"SYSTEMUNDELETE",
	"TOKENASSOCIATE",
	"TOKENBURN",
	"TOKENCREATION",
	"TOKENDELETION",
	"TOKENDISSOCIATE",
	"TOKENFEESCHEDULEUPDATE",
	"TOKENFREEZE",
	"TOKENGRANTKYC",
	"TOKENMINT",
	"TOKENPAUSE",
	"TOKENREVOKEKYC",
	"TOKENUNFREEZE",
	"TOKENUNPAUSE",
	"TOKENUPDATE",
	"TOKENWIPE",
	"UNCHECKEDSUBMIT",
	"UNKNOWN",
	"UTILPRNG",
}

func (v *TransactionTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransactionTypes(value)
	for _, existing := range AllowedTransactionTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TransactionTypes", value)
}

// NewTransactionTypesFromValue returns a pointer to a valid TransactionTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransactionTypesFromValue(v string) (*TransactionTypes, error) {
	ev := TransactionTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransactionTypes: valid values are %v", v, AllowedTransactionTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransactionTypes) IsValid() bool {
	for _, existing := range AllowedTransactionTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransactionTypes value
func (v TransactionTypes) Ptr() *TransactionTypes {
	return &v
}

type NullableTransactionTypes struct {
	value *TransactionTypes
	isSet bool
}

func (v NullableTransactionTypes) Get() *TransactionTypes {
	return v.value
}

func (v *NullableTransactionTypes) Set(val *TransactionTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionTypes(val *TransactionTypes) *NullableTransactionTypes {
	return &NullableTransactionTypes{value: val, isSet: true}
}

func (v NullableTransactionTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

