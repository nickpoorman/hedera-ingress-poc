/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
)

// checks if the Nft type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Nft{}

// Nft struct for Nft
type Nft struct {
	// Network entity ID in the format of `shard.realm.num`
	AccountId NullableString `json:"account_id,omitempty"`
	CreatedTimestamp NullableString `json:"created_timestamp,omitempty"`
	// Network entity ID in the format of `shard.realm.num`
	DelegatingSpender NullableString `json:"delegating_spender,omitempty"`
	// whether the nft or the token it belongs to has been deleted
	Deleted *bool `json:"deleted,omitempty"`
	// base64 encoded binary data
	Metadata *string `json:"metadata,omitempty"`
	ModifiedTimestamp NullableString `json:"modified_timestamp,omitempty"`
	SerialNumber *int64 `json:"serial_number,omitempty"`
	// Network entity ID in the format of `shard.realm.num`
	Spender NullableString `json:"spender,omitempty"`
	// Network entity ID in the format of `shard.realm.num`
	TokenId NullableString `json:"token_id,omitempty"`
}

// NewNft instantiates a new Nft object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNft() *Nft {
	this := Nft{}
	return &this
}

// NewNftWithDefaults instantiates a new Nft object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNftWithDefaults() *Nft {
	this := Nft{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Nft) GetAccountId() string {
	if o == nil || IsNil(o.AccountId.Get()) {
		var ret string
		return ret
	}
	return *o.AccountId.Get()
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Nft) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountId.Get(), o.AccountId.IsSet()
}

// HasAccountId returns a boolean if a field has been set.
func (o *Nft) HasAccountId() bool {
	if o != nil && o.AccountId.IsSet() {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given NullableString and assigns it to the AccountId field.
func (o *Nft) SetAccountId(v string) {
	o.AccountId.Set(&v)
}
// SetAccountIdNil sets the value for AccountId to be an explicit nil
func (o *Nft) SetAccountIdNil() {
	o.AccountId.Set(nil)
}

// UnsetAccountId ensures that no value is present for AccountId, not even an explicit nil
func (o *Nft) UnsetAccountId() {
	o.AccountId.Unset()
}

// GetCreatedTimestamp returns the CreatedTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Nft) GetCreatedTimestamp() string {
	if o == nil || IsNil(o.CreatedTimestamp.Get()) {
		var ret string
		return ret
	}
	return *o.CreatedTimestamp.Get()
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Nft) GetCreatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedTimestamp.Get(), o.CreatedTimestamp.IsSet()
}

// HasCreatedTimestamp returns a boolean if a field has been set.
func (o *Nft) HasCreatedTimestamp() bool {
	if o != nil && o.CreatedTimestamp.IsSet() {
		return true
	}

	return false
}

// SetCreatedTimestamp gets a reference to the given NullableString and assigns it to the CreatedTimestamp field.
func (o *Nft) SetCreatedTimestamp(v string) {
	o.CreatedTimestamp.Set(&v)
}
// SetCreatedTimestampNil sets the value for CreatedTimestamp to be an explicit nil
func (o *Nft) SetCreatedTimestampNil() {
	o.CreatedTimestamp.Set(nil)
}

// UnsetCreatedTimestamp ensures that no value is present for CreatedTimestamp, not even an explicit nil
func (o *Nft) UnsetCreatedTimestamp() {
	o.CreatedTimestamp.Unset()
}

// GetDelegatingSpender returns the DelegatingSpender field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Nft) GetDelegatingSpender() string {
	if o == nil || IsNil(o.DelegatingSpender.Get()) {
		var ret string
		return ret
	}
	return *o.DelegatingSpender.Get()
}

// GetDelegatingSpenderOk returns a tuple with the DelegatingSpender field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Nft) GetDelegatingSpenderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DelegatingSpender.Get(), o.DelegatingSpender.IsSet()
}

// HasDelegatingSpender returns a boolean if a field has been set.
func (o *Nft) HasDelegatingSpender() bool {
	if o != nil && o.DelegatingSpender.IsSet() {
		return true
	}

	return false
}

// SetDelegatingSpender gets a reference to the given NullableString and assigns it to the DelegatingSpender field.
func (o *Nft) SetDelegatingSpender(v string) {
	o.DelegatingSpender.Set(&v)
}
// SetDelegatingSpenderNil sets the value for DelegatingSpender to be an explicit nil
func (o *Nft) SetDelegatingSpenderNil() {
	o.DelegatingSpender.Set(nil)
}

// UnsetDelegatingSpender ensures that no value is present for DelegatingSpender, not even an explicit nil
func (o *Nft) UnsetDelegatingSpender() {
	o.DelegatingSpender.Unset()
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *Nft) GetDeleted() bool {
	if o == nil || IsNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Nft) GetDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *Nft) HasDeleted() bool {
	if o != nil && !IsNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *Nft) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Nft) GetMetadata() string {
	if o == nil || IsNil(o.Metadata) {
		var ret string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Nft) GetMetadataOk() (*string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Nft) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given string and assigns it to the Metadata field.
func (o *Nft) SetMetadata(v string) {
	o.Metadata = &v
}

// GetModifiedTimestamp returns the ModifiedTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Nft) GetModifiedTimestamp() string {
	if o == nil || IsNil(o.ModifiedTimestamp.Get()) {
		var ret string
		return ret
	}
	return *o.ModifiedTimestamp.Get()
}

// GetModifiedTimestampOk returns a tuple with the ModifiedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Nft) GetModifiedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ModifiedTimestamp.Get(), o.ModifiedTimestamp.IsSet()
}

// HasModifiedTimestamp returns a boolean if a field has been set.
func (o *Nft) HasModifiedTimestamp() bool {
	if o != nil && o.ModifiedTimestamp.IsSet() {
		return true
	}

	return false
}

// SetModifiedTimestamp gets a reference to the given NullableString and assigns it to the ModifiedTimestamp field.
func (o *Nft) SetModifiedTimestamp(v string) {
	o.ModifiedTimestamp.Set(&v)
}
// SetModifiedTimestampNil sets the value for ModifiedTimestamp to be an explicit nil
func (o *Nft) SetModifiedTimestampNil() {
	o.ModifiedTimestamp.Set(nil)
}

// UnsetModifiedTimestamp ensures that no value is present for ModifiedTimestamp, not even an explicit nil
func (o *Nft) UnsetModifiedTimestamp() {
	o.ModifiedTimestamp.Unset()
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *Nft) GetSerialNumber() int64 {
	if o == nil || IsNil(o.SerialNumber) {
		var ret int64
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Nft) GetSerialNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *Nft) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given int64 and assigns it to the SerialNumber field.
func (o *Nft) SetSerialNumber(v int64) {
	o.SerialNumber = &v
}

// GetSpender returns the Spender field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Nft) GetSpender() string {
	if o == nil || IsNil(o.Spender.Get()) {
		var ret string
		return ret
	}
	return *o.Spender.Get()
}

// GetSpenderOk returns a tuple with the Spender field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Nft) GetSpenderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Spender.Get(), o.Spender.IsSet()
}

// HasSpender returns a boolean if a field has been set.
func (o *Nft) HasSpender() bool {
	if o != nil && o.Spender.IsSet() {
		return true
	}

	return false
}

// SetSpender gets a reference to the given NullableString and assigns it to the Spender field.
func (o *Nft) SetSpender(v string) {
	o.Spender.Set(&v)
}
// SetSpenderNil sets the value for Spender to be an explicit nil
func (o *Nft) SetSpenderNil() {
	o.Spender.Set(nil)
}

// UnsetSpender ensures that no value is present for Spender, not even an explicit nil
func (o *Nft) UnsetSpender() {
	o.Spender.Unset()
}

// GetTokenId returns the TokenId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Nft) GetTokenId() string {
	if o == nil || IsNil(o.TokenId.Get()) {
		var ret string
		return ret
	}
	return *o.TokenId.Get()
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Nft) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TokenId.Get(), o.TokenId.IsSet()
}

// HasTokenId returns a boolean if a field has been set.
func (o *Nft) HasTokenId() bool {
	if o != nil && o.TokenId.IsSet() {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given NullableString and assigns it to the TokenId field.
func (o *Nft) SetTokenId(v string) {
	o.TokenId.Set(&v)
}
// SetTokenIdNil sets the value for TokenId to be an explicit nil
func (o *Nft) SetTokenIdNil() {
	o.TokenId.Set(nil)
}

// UnsetTokenId ensures that no value is present for TokenId, not even an explicit nil
func (o *Nft) UnsetTokenId() {
	o.TokenId.Unset()
}

func (o Nft) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Nft) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AccountId.IsSet() {
		toSerialize["account_id"] = o.AccountId.Get()
	}
	if o.CreatedTimestamp.IsSet() {
		toSerialize["created_timestamp"] = o.CreatedTimestamp.Get()
	}
	if o.DelegatingSpender.IsSet() {
		toSerialize["delegating_spender"] = o.DelegatingSpender.Get()
	}
	if !IsNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if o.ModifiedTimestamp.IsSet() {
		toSerialize["modified_timestamp"] = o.ModifiedTimestamp.Get()
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serial_number"] = o.SerialNumber
	}
	if o.Spender.IsSet() {
		toSerialize["spender"] = o.Spender.Get()
	}
	if o.TokenId.IsSet() {
		toSerialize["token_id"] = o.TokenId.Get()
	}
	return toSerialize, nil
}

type NullableNft struct {
	value *Nft
	isSet bool
}

func (v NullableNft) Get() *Nft {
	return v.value
}

func (v *NullableNft) Set(val *Nft) {
	v.value = val
	v.isSet = true
}

func (v NullableNft) IsSet() bool {
	return v.isSet
}

func (v *NullableNft) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNft(val *Nft) *NullableNft {
	return &NullableNft{value: val, isSet: true}
}

func (v NullableNft) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNft) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


