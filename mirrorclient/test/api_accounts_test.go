/*
Hedera Mirror Node REST API

Testing AccountsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mirrorclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/nickpoorman/hedera-ingress/mirrorclient"
)

func Test_mirrorclient_AccountsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AccountsAPIService GetAccountByIdOrAliasOrEvmAddress", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var idOrAliasOrEvmAddress string

		resp, httpRes, err := apiClient.AccountsAPI.GetAccountByIdOrAliasOrEvmAddress(context.Background(), idOrAliasOrEvmAddress).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsAPIService ListAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsAPI.ListAccounts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsAPIService ListCryptoAllowancesByAccountId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var idOrAliasOrEvmAddress string

		resp, httpRes, err := apiClient.AccountsAPI.ListCryptoAllowancesByAccountId(context.Background(), idOrAliasOrEvmAddress).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsAPIService ListNftByAccountId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var idOrAliasOrEvmAddress string

		resp, httpRes, err := apiClient.AccountsAPI.ListNftByAccountId(context.Background(), idOrAliasOrEvmAddress).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsAPIService ListStakingRewardsByAccountId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var idOrAliasOrEvmAddress string

		resp, httpRes, err := apiClient.AccountsAPI.ListStakingRewardsByAccountId(context.Background(), idOrAliasOrEvmAddress).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsAPIService ListTokenAllowancesByAccountId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var idOrAliasOrEvmAddress string

		resp, httpRes, err := apiClient.AccountsAPI.ListTokenAllowancesByAccountId(context.Background(), idOrAliasOrEvmAddress).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsAPIService ListTokenRelationshipByAccountId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var idOrAliasOrEvmAddress string

		resp, httpRes, err := apiClient.AccountsAPI.ListTokenRelationshipByAccountId(context.Background(), idOrAliasOrEvmAddress).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
