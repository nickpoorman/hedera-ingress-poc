/*
Hedera Mirror Node REST API

Testing ContractsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mirrorclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/nickpoorman/hedera-ingress/mirrorclient"
)

func Test_mirrorclient_ContractsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ContractsAPIService ContractsCall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ContractsAPI.ContractsCall(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContractsAPIService GetContractActionsByTransactionIdOrHash", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionIdOrHash string

		resp, httpRes, err := apiClient.ContractsAPI.GetContractActionsByTransactionIdOrHash(context.Background(), transactionIdOrHash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContractsAPIService GetContractById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contractIdOrAddress string

		resp, httpRes, err := apiClient.ContractsAPI.GetContractById(context.Background(), contractIdOrAddress).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContractsAPIService GetContractResultByIdAndTimestamp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contractIdOrAddress string
		var timestamp string

		resp, httpRes, err := apiClient.ContractsAPI.GetContractResultByIdAndTimestamp(context.Background(), contractIdOrAddress, timestamp).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContractsAPIService GetContractResultByTransactionIdOrHash", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionIdOrHash string

		resp, httpRes, err := apiClient.ContractsAPI.GetContractResultByTransactionIdOrHash(context.Background(), transactionIdOrHash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContractsAPIService ListAllContractsResults", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ContractsAPI.ListAllContractsResults(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContractsAPIService ListContractLogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contractIdOrAddress string

		resp, httpRes, err := apiClient.ContractsAPI.ListContractLogs(context.Background(), contractIdOrAddress).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContractsAPIService ListContractResults", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contractIdOrAddress string

		resp, httpRes, err := apiClient.ContractsAPI.ListContractResults(context.Background(), contractIdOrAddress).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContractsAPIService ListContractState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contractIdOrAddress string

		resp, httpRes, err := apiClient.ContractsAPI.ListContractState(context.Background(), contractIdOrAddress).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContractsAPIService ListContracts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ContractsAPI.ListContracts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContractsAPIService ListContractsLogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ContractsAPI.ListContractsLogs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
