/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
)

// checks if the NftTransactionHistory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NftTransactionHistory{}

// NftTransactionHistory struct for NftTransactionHistory
type NftTransactionHistory struct {
	Transactions []NftTransactionTransfer `json:"transactions"`
	Links Links `json:"links"`
}

// NewNftTransactionHistory instantiates a new NftTransactionHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNftTransactionHistory(transactions []NftTransactionTransfer, links Links) *NftTransactionHistory {
	this := NftTransactionHistory{}
	this.Transactions = transactions
	this.Links = links
	return &this
}

// NewNftTransactionHistoryWithDefaults instantiates a new NftTransactionHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNftTransactionHistoryWithDefaults() *NftTransactionHistory {
	this := NftTransactionHistory{}
	return &this
}

// GetTransactions returns the Transactions field value
func (o *NftTransactionHistory) GetTransactions() []NftTransactionTransfer {
	if o == nil {
		var ret []NftTransactionTransfer
		return ret
	}

	return o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value
// and a boolean to check if the value has been set.
func (o *NftTransactionHistory) GetTransactionsOk() ([]NftTransactionTransfer, bool) {
	if o == nil {
		return nil, false
	}
	return o.Transactions, true
}

// SetTransactions sets field value
func (o *NftTransactionHistory) SetTransactions(v []NftTransactionTransfer) {
	o.Transactions = v
}

// GetLinks returns the Links field value
func (o *NftTransactionHistory) GetLinks() Links {
	if o == nil {
		var ret Links
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *NftTransactionHistory) GetLinksOk() (*Links, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *NftTransactionHistory) SetLinks(v Links) {
	o.Links = v
}

func (o NftTransactionHistory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NftTransactionHistory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["transactions"] = o.Transactions
	toSerialize["links"] = o.Links
	return toSerialize, nil
}

type NullableNftTransactionHistory struct {
	value *NftTransactionHistory
	isSet bool
}

func (v NullableNftTransactionHistory) Get() *NftTransactionHistory {
	return v.value
}

func (v *NullableNftTransactionHistory) Set(val *NftTransactionHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableNftTransactionHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableNftTransactionHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNftTransactionHistory(val *NftTransactionHistory) *NullableNftTransactionHistory {
	return &NullableNftTransactionHistory{value: val, isSet: true}
}

func (v NullableNftTransactionHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNftTransactionHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


