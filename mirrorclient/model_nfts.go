/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
)

// checks if the Nfts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Nfts{}

// Nfts struct for Nfts
type Nfts struct {
	Nfts []Nft `json:"nfts,omitempty"`
	Links *Links `json:"links,omitempty"`
}

// NewNfts instantiates a new Nfts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNfts() *Nfts {
	this := Nfts{}
	return &this
}

// NewNftsWithDefaults instantiates a new Nfts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNftsWithDefaults() *Nfts {
	this := Nfts{}
	return &this
}

// GetNfts returns the Nfts field value if set, zero value otherwise.
func (o *Nfts) GetNfts() []Nft {
	if o == nil || IsNil(o.Nfts) {
		var ret []Nft
		return ret
	}
	return o.Nfts
}

// GetNftsOk returns a tuple with the Nfts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Nfts) GetNftsOk() ([]Nft, bool) {
	if o == nil || IsNil(o.Nfts) {
		return nil, false
	}
	return o.Nfts, true
}

// HasNfts returns a boolean if a field has been set.
func (o *Nfts) HasNfts() bool {
	if o != nil && !IsNil(o.Nfts) {
		return true
	}

	return false
}

// SetNfts gets a reference to the given []Nft and assigns it to the Nfts field.
func (o *Nfts) SetNfts(v []Nft) {
	o.Nfts = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Nfts) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Nfts) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Nfts) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *Nfts) SetLinks(v Links) {
	o.Links = &v
}

func (o Nfts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Nfts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Nfts) {
		toSerialize["nfts"] = o.Nfts
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	return toSerialize, nil
}

type NullableNfts struct {
	value *Nfts
	isSet bool
}

func (v NullableNfts) Get() *Nfts {
	return v.value
}

func (v *NullableNfts) Set(val *Nfts) {
	v.value = val
	v.isSet = true
}

func (v NullableNfts) IsSet() bool {
	return v.isSet
}

func (v *NullableNfts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNfts(val *Nfts) *NullableNfts {
	return &NullableNfts{value: val, isSet: true}
}

func (v NullableNfts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNfts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


