/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
)

// checks if the FractionalFeeAmount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FractionalFeeAmount{}

// FractionalFeeAmount struct for FractionalFeeAmount
type FractionalFeeAmount struct {
	Numerator *int64 `json:"numerator,omitempty"`
	Denominator *int64 `json:"denominator,omitempty"`
}

// NewFractionalFeeAmount instantiates a new FractionalFeeAmount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFractionalFeeAmount() *FractionalFeeAmount {
	this := FractionalFeeAmount{}
	return &this
}

// NewFractionalFeeAmountWithDefaults instantiates a new FractionalFeeAmount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFractionalFeeAmountWithDefaults() *FractionalFeeAmount {
	this := FractionalFeeAmount{}
	return &this
}

// GetNumerator returns the Numerator field value if set, zero value otherwise.
func (o *FractionalFeeAmount) GetNumerator() int64 {
	if o == nil || IsNil(o.Numerator) {
		var ret int64
		return ret
	}
	return *o.Numerator
}

// GetNumeratorOk returns a tuple with the Numerator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FractionalFeeAmount) GetNumeratorOk() (*int64, bool) {
	if o == nil || IsNil(o.Numerator) {
		return nil, false
	}
	return o.Numerator, true
}

// HasNumerator returns a boolean if a field has been set.
func (o *FractionalFeeAmount) HasNumerator() bool {
	if o != nil && !IsNil(o.Numerator) {
		return true
	}

	return false
}

// SetNumerator gets a reference to the given int64 and assigns it to the Numerator field.
func (o *FractionalFeeAmount) SetNumerator(v int64) {
	o.Numerator = &v
}

// GetDenominator returns the Denominator field value if set, zero value otherwise.
func (o *FractionalFeeAmount) GetDenominator() int64 {
	if o == nil || IsNil(o.Denominator) {
		var ret int64
		return ret
	}
	return *o.Denominator
}

// GetDenominatorOk returns a tuple with the Denominator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FractionalFeeAmount) GetDenominatorOk() (*int64, bool) {
	if o == nil || IsNil(o.Denominator) {
		return nil, false
	}
	return o.Denominator, true
}

// HasDenominator returns a boolean if a field has been set.
func (o *FractionalFeeAmount) HasDenominator() bool {
	if o != nil && !IsNil(o.Denominator) {
		return true
	}

	return false
}

// SetDenominator gets a reference to the given int64 and assigns it to the Denominator field.
func (o *FractionalFeeAmount) SetDenominator(v int64) {
	o.Denominator = &v
}

func (o FractionalFeeAmount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FractionalFeeAmount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Numerator) {
		toSerialize["numerator"] = o.Numerator
	}
	if !IsNil(o.Denominator) {
		toSerialize["denominator"] = o.Denominator
	}
	return toSerialize, nil
}

type NullableFractionalFeeAmount struct {
	value *FractionalFeeAmount
	isSet bool
}

func (v NullableFractionalFeeAmount) Get() *FractionalFeeAmount {
	return v.value
}

func (v *NullableFractionalFeeAmount) Set(val *FractionalFeeAmount) {
	v.value = val
	v.isSet = true
}

func (v NullableFractionalFeeAmount) IsSet() bool {
	return v.isSet
}

func (v *NullableFractionalFeeAmount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFractionalFeeAmount(val *FractionalFeeAmount) *NullableFractionalFeeAmount {
	return &NullableFractionalFeeAmount{value: val, isSet: true}
}

func (v NullableFractionalFeeAmount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFractionalFeeAmount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


