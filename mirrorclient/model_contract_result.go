/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
	"os"
)

// checks if the ContractResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractResult{}

// ContractResult struct for ContractResult
type ContractResult struct {
	// The hex encoded access_list of the wrapped ethereum transaction
	AccessList NullableString `json:"access_list,omitempty"`
	// The hex encoded evm address of contract
	Address *string `json:"address,omitempty"`
	// The number of tinybars sent to the function
	Amount NullableInt64 `json:"amount,omitempty"`
	// The total amount of gas used in the block
	BlockGasUsed NullableInt64 `json:"block_gas_used,omitempty"`
	// The hex encoded block (record file chain) hash
	BlockHash NullableString `json:"block_hash,omitempty"`
	// The block height calculated as the number of record files starting from zero since network start.
	BlockNumber NullableInt64 `json:"block_number,omitempty"`
	Bloom **os.File `json:"bloom,omitempty"`
	// The hex encoded result returned by the function
	CallResult NullableString `json:"call_result,omitempty"`
	// The hex encoded chain_id of the wrapped ethereum transaction
	ChainId NullableString `json:"chain_id,omitempty"`
	// Network entity ID in the format of `shard.realm.num`
	ContractId NullableString `json:"contract_id,omitempty"`
	// The list of smart contracts that were created by the function call.
	CreatedContractIds []*string `json:"created_contract_ids,omitempty"`
	// The message when an error occurs during smart contract execution
	ErrorMessage NullableString `json:"error_message,omitempty"`
	// The hex encoded initcode of a failed contract create transaction
	FailedInitcode *string `json:"failed_initcode,omitempty"`
	// A network entity encoded as an EVM address in hex.
	From **os.File `json:"from,omitempty"`
	// The hex encoded parameters passed to the function
	FunctionParameters NullableString `json:"function_parameters,omitempty"`
	// The maximum units of gas allowed for contract execution
	GasLimit *int64 `json:"gas_limit,omitempty"`
	// The hex encoded gas_price of the wrapped ethereum transaction
	GasPrice NullableString `json:"gas_price,omitempty"`
	// The units of gas used to execute contract
	GasUsed NullableInt64 `json:"gas_used,omitempty"`
	// A hex encoded 32 byte hash and it is only populated for Ethereum transaction case
	Hash *string `json:"hash,omitempty"`
	// The hex encoded max_fee_per_gas of the wrapped ethereum transaction
	MaxFeePerGas NullableString `json:"max_fee_per_gas,omitempty"`
	// The hex encoded max_priority_fee_per_gas of the wrapped ethereum transaction
	MaxPriorityFeePerGas NullableString `json:"max_priority_fee_per_gas,omitempty"`
	// The nonce of the wrapped ethereum transaction
	Nonce NullableInt64 `json:"nonce,omitempty"`
	// The hex encoded signature_r of the wrapped ethereum transaction
	R NullableString `json:"r,omitempty"`
	// The result of the transaction
	Result *string `json:"result,omitempty"`
	// The hex encoded signature_s of the wrapped ethereum transaction
	S NullableString `json:"s,omitempty"`
	// The status of the transaction, 0x1 for a SUCCESS transaction and 0x0 for all else
	Status *string `json:"status,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
	// A network entity encoded as an EVM address in hex.
	To Nullable*os.File `json:"to,omitempty"`
	// The position of the transaction in the block
	TransactionIndex NullableInt64 `json:"transaction_index,omitempty"`
	// The type of the wrapped ethereum transaction, 0 (Pre-Eip1559) or 2 (Post-Eip1559)
	Type NullableInt32 `json:"type,omitempty"`
	// The recovery_id of the wrapped ethereum transaction
	V NullableInt32 `json:"v,omitempty"`
}

// NewContractResult instantiates a new ContractResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractResult() *ContractResult {
	this := ContractResult{}
	return &this
}

// NewContractResultWithDefaults instantiates a new ContractResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractResultWithDefaults() *ContractResult {
	this := ContractResult{}
	return &this
}

// GetAccessList returns the AccessList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractResult) GetAccessList() string {
	if o == nil || IsNil(o.AccessList.Get()) {
		var ret string
		return ret
	}
	return *o.AccessList.Get()
}

// GetAccessListOk returns a tuple with the AccessList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractResult) GetAccessListOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccessList.Get(), o.AccessList.IsSet()
}

// HasAccessList returns a boolean if a field has been set.
func (o *ContractResult) HasAccessList() bool {
	if o != nil && o.AccessList.IsSet() {
		return true
	}

	return false
}

// SetAccessList gets a reference to the given NullableString and assigns it to the AccessList field.
func (o *ContractResult) SetAccessList(v string) {
	o.AccessList.Set(&v)
}
// SetAccessListNil sets the value for AccessList to be an explicit nil
func (o *ContractResult) SetAccessListNil() {
	o.AccessList.Set(nil)
}

// UnsetAccessList ensures that no value is present for AccessList, not even an explicit nil
func (o *ContractResult) UnsetAccessList() {
	o.AccessList.Unset()
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *ContractResult) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractResult) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *ContractResult) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *ContractResult) SetAddress(v string) {
	o.Address = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractResult) GetAmount() int64 {
	if o == nil || IsNil(o.Amount.Get()) {
		var ret int64
		return ret
	}
	return *o.Amount.Get()
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractResult) GetAmountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Amount.Get(), o.Amount.IsSet()
}

// HasAmount returns a boolean if a field has been set.
func (o *ContractResult) HasAmount() bool {
	if o != nil && o.Amount.IsSet() {
		return true
	}

	return false
}

// SetAmount gets a reference to the given NullableInt64 and assigns it to the Amount field.
func (o *ContractResult) SetAmount(v int64) {
	o.Amount.Set(&v)
}
// SetAmountNil sets the value for Amount to be an explicit nil
func (o *ContractResult) SetAmountNil() {
	o.Amount.Set(nil)
}

// UnsetAmount ensures that no value is present for Amount, not even an explicit nil
func (o *ContractResult) UnsetAmount() {
	o.Amount.Unset()
}

// GetBlockGasUsed returns the BlockGasUsed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractResult) GetBlockGasUsed() int64 {
	if o == nil || IsNil(o.BlockGasUsed.Get()) {
		var ret int64
		return ret
	}
	return *o.BlockGasUsed.Get()
}

// GetBlockGasUsedOk returns a tuple with the BlockGasUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractResult) GetBlockGasUsedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.BlockGasUsed.Get(), o.BlockGasUsed.IsSet()
}

// HasBlockGasUsed returns a boolean if a field has been set.
func (o *ContractResult) HasBlockGasUsed() bool {
	if o != nil && o.BlockGasUsed.IsSet() {
		return true
	}

	return false
}

// SetBlockGasUsed gets a reference to the given NullableInt64 and assigns it to the BlockGasUsed field.
func (o *ContractResult) SetBlockGasUsed(v int64) {
	o.BlockGasUsed.Set(&v)
}
// SetBlockGasUsedNil sets the value for BlockGasUsed to be an explicit nil
func (o *ContractResult) SetBlockGasUsedNil() {
	o.BlockGasUsed.Set(nil)
}

// UnsetBlockGasUsed ensures that no value is present for BlockGasUsed, not even an explicit nil
func (o *ContractResult) UnsetBlockGasUsed() {
	o.BlockGasUsed.Unset()
}

// GetBlockHash returns the BlockHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractResult) GetBlockHash() string {
	if o == nil || IsNil(o.BlockHash.Get()) {
		var ret string
		return ret
	}
	return *o.BlockHash.Get()
}

// GetBlockHashOk returns a tuple with the BlockHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractResult) GetBlockHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BlockHash.Get(), o.BlockHash.IsSet()
}

// HasBlockHash returns a boolean if a field has been set.
func (o *ContractResult) HasBlockHash() bool {
	if o != nil && o.BlockHash.IsSet() {
		return true
	}

	return false
}

// SetBlockHash gets a reference to the given NullableString and assigns it to the BlockHash field.
func (o *ContractResult) SetBlockHash(v string) {
	o.BlockHash.Set(&v)
}
// SetBlockHashNil sets the value for BlockHash to be an explicit nil
func (o *ContractResult) SetBlockHashNil() {
	o.BlockHash.Set(nil)
}

// UnsetBlockHash ensures that no value is present for BlockHash, not even an explicit nil
func (o *ContractResult) UnsetBlockHash() {
	o.BlockHash.Unset()
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractResult) GetBlockNumber() int64 {
	if o == nil || IsNil(o.BlockNumber.Get()) {
		var ret int64
		return ret
	}
	return *o.BlockNumber.Get()
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractResult) GetBlockNumberOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.BlockNumber.Get(), o.BlockNumber.IsSet()
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *ContractResult) HasBlockNumber() bool {
	if o != nil && o.BlockNumber.IsSet() {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given NullableInt64 and assigns it to the BlockNumber field.
func (o *ContractResult) SetBlockNumber(v int64) {
	o.BlockNumber.Set(&v)
}
// SetBlockNumberNil sets the value for BlockNumber to be an explicit nil
func (o *ContractResult) SetBlockNumberNil() {
	o.BlockNumber.Set(nil)
}

// UnsetBlockNumber ensures that no value is present for BlockNumber, not even an explicit nil
func (o *ContractResult) UnsetBlockNumber() {
	o.BlockNumber.Unset()
}

// GetBloom returns the Bloom field value if set, zero value otherwise.
func (o *ContractResult) GetBloom() *os.File {
	if o == nil || IsNil(o.Bloom) {
		var ret *os.File
		return ret
	}
	return *o.Bloom
}

// GetBloomOk returns a tuple with the Bloom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractResult) GetBloomOk() (**os.File, bool) {
	if o == nil || IsNil(o.Bloom) {
		return nil, false
	}
	return o.Bloom, true
}

// HasBloom returns a boolean if a field has been set.
func (o *ContractResult) HasBloom() bool {
	if o != nil && !IsNil(o.Bloom) {
		return true
	}

	return false
}

// SetBloom gets a reference to the given *os.File and assigns it to the Bloom field.
func (o *ContractResult) SetBloom(v *os.File) {
	o.Bloom = &v
}

// GetCallResult returns the CallResult field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractResult) GetCallResult() string {
	if o == nil || IsNil(o.CallResult.Get()) {
		var ret string
		return ret
	}
	return *o.CallResult.Get()
}

// GetCallResultOk returns a tuple with the CallResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractResult) GetCallResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CallResult.Get(), o.CallResult.IsSet()
}

// HasCallResult returns a boolean if a field has been set.
func (o *ContractResult) HasCallResult() bool {
	if o != nil && o.CallResult.IsSet() {
		return true
	}

	return false
}

// SetCallResult gets a reference to the given NullableString and assigns it to the CallResult field.
func (o *ContractResult) SetCallResult(v string) {
	o.CallResult.Set(&v)
}
// SetCallResultNil sets the value for CallResult to be an explicit nil
func (o *ContractResult) SetCallResultNil() {
	o.CallResult.Set(nil)
}

// UnsetCallResult ensures that no value is present for CallResult, not even an explicit nil
func (o *ContractResult) UnsetCallResult() {
	o.CallResult.Unset()
}

// GetChainId returns the ChainId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractResult) GetChainId() string {
	if o == nil || IsNil(o.ChainId.Get()) {
		var ret string
		return ret
	}
	return *o.ChainId.Get()
}

// GetChainIdOk returns a tuple with the ChainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractResult) GetChainIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChainId.Get(), o.ChainId.IsSet()
}

// HasChainId returns a boolean if a field has been set.
func (o *ContractResult) HasChainId() bool {
	if o != nil && o.ChainId.IsSet() {
		return true
	}

	return false
}

// SetChainId gets a reference to the given NullableString and assigns it to the ChainId field.
func (o *ContractResult) SetChainId(v string) {
	o.ChainId.Set(&v)
}
// SetChainIdNil sets the value for ChainId to be an explicit nil
func (o *ContractResult) SetChainIdNil() {
	o.ChainId.Set(nil)
}

// UnsetChainId ensures that no value is present for ChainId, not even an explicit nil
func (o *ContractResult) UnsetChainId() {
	o.ChainId.Unset()
}

// GetContractId returns the ContractId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractResult) GetContractId() string {
	if o == nil || IsNil(o.ContractId.Get()) {
		var ret string
		return ret
	}
	return *o.ContractId.Get()
}

// GetContractIdOk returns a tuple with the ContractId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractResult) GetContractIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContractId.Get(), o.ContractId.IsSet()
}

// HasContractId returns a boolean if a field has been set.
func (o *ContractResult) HasContractId() bool {
	if o != nil && o.ContractId.IsSet() {
		return true
	}

	return false
}

// SetContractId gets a reference to the given NullableString and assigns it to the ContractId field.
func (o *ContractResult) SetContractId(v string) {
	o.ContractId.Set(&v)
}
// SetContractIdNil sets the value for ContractId to be an explicit nil
func (o *ContractResult) SetContractIdNil() {
	o.ContractId.Set(nil)
}

// UnsetContractId ensures that no value is present for ContractId, not even an explicit nil
func (o *ContractResult) UnsetContractId() {
	o.ContractId.Unset()
}

// GetCreatedContractIds returns the CreatedContractIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractResult) GetCreatedContractIds() []*string {
	if o == nil {
		var ret []*string
		return ret
	}
	return o.CreatedContractIds
}

// GetCreatedContractIdsOk returns a tuple with the CreatedContractIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractResult) GetCreatedContractIdsOk() ([]*string, bool) {
	if o == nil || IsNil(o.CreatedContractIds) {
		return nil, false
	}
	return o.CreatedContractIds, true
}

// HasCreatedContractIds returns a boolean if a field has been set.
func (o *ContractResult) HasCreatedContractIds() bool {
	if o != nil && IsNil(o.CreatedContractIds) {
		return true
	}

	return false
}

// SetCreatedContractIds gets a reference to the given []*string and assigns it to the CreatedContractIds field.
func (o *ContractResult) SetCreatedContractIds(v []*string) {
	o.CreatedContractIds = v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractResult) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage.Get()) {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractResult) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *ContractResult) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *ContractResult) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *ContractResult) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *ContractResult) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

// GetFailedInitcode returns the FailedInitcode field value if set, zero value otherwise.
func (o *ContractResult) GetFailedInitcode() string {
	if o == nil || IsNil(o.FailedInitcode) {
		var ret string
		return ret
	}
	return *o.FailedInitcode
}

// GetFailedInitcodeOk returns a tuple with the FailedInitcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractResult) GetFailedInitcodeOk() (*string, bool) {
	if o == nil || IsNil(o.FailedInitcode) {
		return nil, false
	}
	return o.FailedInitcode, true
}

// HasFailedInitcode returns a boolean if a field has been set.
func (o *ContractResult) HasFailedInitcode() bool {
	if o != nil && !IsNil(o.FailedInitcode) {
		return true
	}

	return false
}

// SetFailedInitcode gets a reference to the given string and assigns it to the FailedInitcode field.
func (o *ContractResult) SetFailedInitcode(v string) {
	o.FailedInitcode = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *ContractResult) GetFrom() *os.File {
	if o == nil || IsNil(o.From) {
		var ret *os.File
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractResult) GetFromOk() (**os.File, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *ContractResult) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given *os.File and assigns it to the From field.
func (o *ContractResult) SetFrom(v *os.File) {
	o.From = &v
}

// GetFunctionParameters returns the FunctionParameters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractResult) GetFunctionParameters() string {
	if o == nil || IsNil(o.FunctionParameters.Get()) {
		var ret string
		return ret
	}
	return *o.FunctionParameters.Get()
}

// GetFunctionParametersOk returns a tuple with the FunctionParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractResult) GetFunctionParametersOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FunctionParameters.Get(), o.FunctionParameters.IsSet()
}

// HasFunctionParameters returns a boolean if a field has been set.
func (o *ContractResult) HasFunctionParameters() bool {
	if o != nil && o.FunctionParameters.IsSet() {
		return true
	}

	return false
}

// SetFunctionParameters gets a reference to the given NullableString and assigns it to the FunctionParameters field.
func (o *ContractResult) SetFunctionParameters(v string) {
	o.FunctionParameters.Set(&v)
}
// SetFunctionParametersNil sets the value for FunctionParameters to be an explicit nil
func (o *ContractResult) SetFunctionParametersNil() {
	o.FunctionParameters.Set(nil)
}

// UnsetFunctionParameters ensures that no value is present for FunctionParameters, not even an explicit nil
func (o *ContractResult) UnsetFunctionParameters() {
	o.FunctionParameters.Unset()
}

// GetGasLimit returns the GasLimit field value if set, zero value otherwise.
func (o *ContractResult) GetGasLimit() int64 {
	if o == nil || IsNil(o.GasLimit) {
		var ret int64
		return ret
	}
	return *o.GasLimit
}

// GetGasLimitOk returns a tuple with the GasLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractResult) GetGasLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.GasLimit) {
		return nil, false
	}
	return o.GasLimit, true
}

// HasGasLimit returns a boolean if a field has been set.
func (o *ContractResult) HasGasLimit() bool {
	if o != nil && !IsNil(o.GasLimit) {
		return true
	}

	return false
}

// SetGasLimit gets a reference to the given int64 and assigns it to the GasLimit field.
func (o *ContractResult) SetGasLimit(v int64) {
	o.GasLimit = &v
}

// GetGasPrice returns the GasPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractResult) GetGasPrice() string {
	if o == nil || IsNil(o.GasPrice.Get()) {
		var ret string
		return ret
	}
	return *o.GasPrice.Get()
}

// GetGasPriceOk returns a tuple with the GasPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractResult) GetGasPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GasPrice.Get(), o.GasPrice.IsSet()
}

// HasGasPrice returns a boolean if a field has been set.
func (o *ContractResult) HasGasPrice() bool {
	if o != nil && o.GasPrice.IsSet() {
		return true
	}

	return false
}

// SetGasPrice gets a reference to the given NullableString and assigns it to the GasPrice field.
func (o *ContractResult) SetGasPrice(v string) {
	o.GasPrice.Set(&v)
}
// SetGasPriceNil sets the value for GasPrice to be an explicit nil
func (o *ContractResult) SetGasPriceNil() {
	o.GasPrice.Set(nil)
}

// UnsetGasPrice ensures that no value is present for GasPrice, not even an explicit nil
func (o *ContractResult) UnsetGasPrice() {
	o.GasPrice.Unset()
}

// GetGasUsed returns the GasUsed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractResult) GetGasUsed() int64 {
	if o == nil || IsNil(o.GasUsed.Get()) {
		var ret int64
		return ret
	}
	return *o.GasUsed.Get()
}

// GetGasUsedOk returns a tuple with the GasUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractResult) GetGasUsedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.GasUsed.Get(), o.GasUsed.IsSet()
}

// HasGasUsed returns a boolean if a field has been set.
func (o *ContractResult) HasGasUsed() bool {
	if o != nil && o.GasUsed.IsSet() {
		return true
	}

	return false
}

// SetGasUsed gets a reference to the given NullableInt64 and assigns it to the GasUsed field.
func (o *ContractResult) SetGasUsed(v int64) {
	o.GasUsed.Set(&v)
}
// SetGasUsedNil sets the value for GasUsed to be an explicit nil
func (o *ContractResult) SetGasUsedNil() {
	o.GasUsed.Set(nil)
}

// UnsetGasUsed ensures that no value is present for GasUsed, not even an explicit nil
func (o *ContractResult) UnsetGasUsed() {
	o.GasUsed.Unset()
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *ContractResult) GetHash() string {
	if o == nil || IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractResult) GetHashOk() (*string, bool) {
	if o == nil || IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *ContractResult) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *ContractResult) SetHash(v string) {
	o.Hash = &v
}

// GetMaxFeePerGas returns the MaxFeePerGas field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractResult) GetMaxFeePerGas() string {
	if o == nil || IsNil(o.MaxFeePerGas.Get()) {
		var ret string
		return ret
	}
	return *o.MaxFeePerGas.Get()
}

// GetMaxFeePerGasOk returns a tuple with the MaxFeePerGas field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractResult) GetMaxFeePerGasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxFeePerGas.Get(), o.MaxFeePerGas.IsSet()
}

// HasMaxFeePerGas returns a boolean if a field has been set.
func (o *ContractResult) HasMaxFeePerGas() bool {
	if o != nil && o.MaxFeePerGas.IsSet() {
		return true
	}

	return false
}

// SetMaxFeePerGas gets a reference to the given NullableString and assigns it to the MaxFeePerGas field.
func (o *ContractResult) SetMaxFeePerGas(v string) {
	o.MaxFeePerGas.Set(&v)
}
// SetMaxFeePerGasNil sets the value for MaxFeePerGas to be an explicit nil
func (o *ContractResult) SetMaxFeePerGasNil() {
	o.MaxFeePerGas.Set(nil)
}

// UnsetMaxFeePerGas ensures that no value is present for MaxFeePerGas, not even an explicit nil
func (o *ContractResult) UnsetMaxFeePerGas() {
	o.MaxFeePerGas.Unset()
}

// GetMaxPriorityFeePerGas returns the MaxPriorityFeePerGas field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractResult) GetMaxPriorityFeePerGas() string {
	if o == nil || IsNil(o.MaxPriorityFeePerGas.Get()) {
		var ret string
		return ret
	}
	return *o.MaxPriorityFeePerGas.Get()
}

// GetMaxPriorityFeePerGasOk returns a tuple with the MaxPriorityFeePerGas field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractResult) GetMaxPriorityFeePerGasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxPriorityFeePerGas.Get(), o.MaxPriorityFeePerGas.IsSet()
}

// HasMaxPriorityFeePerGas returns a boolean if a field has been set.
func (o *ContractResult) HasMaxPriorityFeePerGas() bool {
	if o != nil && o.MaxPriorityFeePerGas.IsSet() {
		return true
	}

	return false
}

// SetMaxPriorityFeePerGas gets a reference to the given NullableString and assigns it to the MaxPriorityFeePerGas field.
func (o *ContractResult) SetMaxPriorityFeePerGas(v string) {
	o.MaxPriorityFeePerGas.Set(&v)
}
// SetMaxPriorityFeePerGasNil sets the value for MaxPriorityFeePerGas to be an explicit nil
func (o *ContractResult) SetMaxPriorityFeePerGasNil() {
	o.MaxPriorityFeePerGas.Set(nil)
}

// UnsetMaxPriorityFeePerGas ensures that no value is present for MaxPriorityFeePerGas, not even an explicit nil
func (o *ContractResult) UnsetMaxPriorityFeePerGas() {
	o.MaxPriorityFeePerGas.Unset()
}

// GetNonce returns the Nonce field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractResult) GetNonce() int64 {
	if o == nil || IsNil(o.Nonce.Get()) {
		var ret int64
		return ret
	}
	return *o.Nonce.Get()
}

// GetNonceOk returns a tuple with the Nonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractResult) GetNonceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Nonce.Get(), o.Nonce.IsSet()
}

// HasNonce returns a boolean if a field has been set.
func (o *ContractResult) HasNonce() bool {
	if o != nil && o.Nonce.IsSet() {
		return true
	}

	return false
}

// SetNonce gets a reference to the given NullableInt64 and assigns it to the Nonce field.
func (o *ContractResult) SetNonce(v int64) {
	o.Nonce.Set(&v)
}
// SetNonceNil sets the value for Nonce to be an explicit nil
func (o *ContractResult) SetNonceNil() {
	o.Nonce.Set(nil)
}

// UnsetNonce ensures that no value is present for Nonce, not even an explicit nil
func (o *ContractResult) UnsetNonce() {
	o.Nonce.Unset()
}

// GetR returns the R field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractResult) GetR() string {
	if o == nil || IsNil(o.R.Get()) {
		var ret string
		return ret
	}
	return *o.R.Get()
}

// GetROk returns a tuple with the R field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractResult) GetROk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.R.Get(), o.R.IsSet()
}

// HasR returns a boolean if a field has been set.
func (o *ContractResult) HasR() bool {
	if o != nil && o.R.IsSet() {
		return true
	}

	return false
}

// SetR gets a reference to the given NullableString and assigns it to the R field.
func (o *ContractResult) SetR(v string) {
	o.R.Set(&v)
}
// SetRNil sets the value for R to be an explicit nil
func (o *ContractResult) SetRNil() {
	o.R.Set(nil)
}

// UnsetR ensures that no value is present for R, not even an explicit nil
func (o *ContractResult) UnsetR() {
	o.R.Unset()
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *ContractResult) GetResult() string {
	if o == nil || IsNil(o.Result) {
		var ret string
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractResult) GetResultOk() (*string, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *ContractResult) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given string and assigns it to the Result field.
func (o *ContractResult) SetResult(v string) {
	o.Result = &v
}

// GetS returns the S field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractResult) GetS() string {
	if o == nil || IsNil(o.S.Get()) {
		var ret string
		return ret
	}
	return *o.S.Get()
}

// GetSOk returns a tuple with the S field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractResult) GetSOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.S.Get(), o.S.IsSet()
}

// HasS returns a boolean if a field has been set.
func (o *ContractResult) HasS() bool {
	if o != nil && o.S.IsSet() {
		return true
	}

	return false
}

// SetS gets a reference to the given NullableString and assigns it to the S field.
func (o *ContractResult) SetS(v string) {
	o.S.Set(&v)
}
// SetSNil sets the value for S to be an explicit nil
func (o *ContractResult) SetSNil() {
	o.S.Set(nil)
}

// UnsetS ensures that no value is present for S, not even an explicit nil
func (o *ContractResult) UnsetS() {
	o.S.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ContractResult) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractResult) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ContractResult) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ContractResult) SetStatus(v string) {
	o.Status = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *ContractResult) GetTimestamp() string {
	if o == nil || IsNil(o.Timestamp) {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractResult) GetTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *ContractResult) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *ContractResult) SetTimestamp(v string) {
	o.Timestamp = &v
}

// GetTo returns the To field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractResult) GetTo() *os.File {
	if o == nil || IsNil(o.To.Get()) {
		var ret *os.File
		return ret
	}
	return *o.To.Get()
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractResult) GetToOk() (**os.File, bool) {
	if o == nil {
		return nil, false
	}
	return o.To.Get(), o.To.IsSet()
}

// HasTo returns a boolean if a field has been set.
func (o *ContractResult) HasTo() bool {
	if o != nil && o.To.IsSet() {
		return true
	}

	return false
}

// SetTo gets a reference to the given Nullable*os.File and assigns it to the To field.
func (o *ContractResult) SetTo(v *os.File) {
	o.To.Set(&v)
}
// SetToNil sets the value for To to be an explicit nil
func (o *ContractResult) SetToNil() {
	o.To.Set(nil)
}

// UnsetTo ensures that no value is present for To, not even an explicit nil
func (o *ContractResult) UnsetTo() {
	o.To.Unset()
}

// GetTransactionIndex returns the TransactionIndex field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractResult) GetTransactionIndex() int64 {
	if o == nil || IsNil(o.TransactionIndex.Get()) {
		var ret int64
		return ret
	}
	return *o.TransactionIndex.Get()
}

// GetTransactionIndexOk returns a tuple with the TransactionIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractResult) GetTransactionIndexOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransactionIndex.Get(), o.TransactionIndex.IsSet()
}

// HasTransactionIndex returns a boolean if a field has been set.
func (o *ContractResult) HasTransactionIndex() bool {
	if o != nil && o.TransactionIndex.IsSet() {
		return true
	}

	return false
}

// SetTransactionIndex gets a reference to the given NullableInt64 and assigns it to the TransactionIndex field.
func (o *ContractResult) SetTransactionIndex(v int64) {
	o.TransactionIndex.Set(&v)
}
// SetTransactionIndexNil sets the value for TransactionIndex to be an explicit nil
func (o *ContractResult) SetTransactionIndexNil() {
	o.TransactionIndex.Set(nil)
}

// UnsetTransactionIndex ensures that no value is present for TransactionIndex, not even an explicit nil
func (o *ContractResult) UnsetTransactionIndex() {
	o.TransactionIndex.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractResult) GetType() int32 {
	if o == nil || IsNil(o.Type.Get()) {
		var ret int32
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractResult) GetTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *ContractResult) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableInt32 and assigns it to the Type field.
func (o *ContractResult) SetType(v int32) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *ContractResult) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *ContractResult) UnsetType() {
	o.Type.Unset()
}

// GetV returns the V field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractResult) GetV() int32 {
	if o == nil || IsNil(o.V.Get()) {
		var ret int32
		return ret
	}
	return *o.V.Get()
}

// GetVOk returns a tuple with the V field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractResult) GetVOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.V.Get(), o.V.IsSet()
}

// HasV returns a boolean if a field has been set.
func (o *ContractResult) HasV() bool {
	if o != nil && o.V.IsSet() {
		return true
	}

	return false
}

// SetV gets a reference to the given NullableInt32 and assigns it to the V field.
func (o *ContractResult) SetV(v int32) {
	o.V.Set(&v)
}
// SetVNil sets the value for V to be an explicit nil
func (o *ContractResult) SetVNil() {
	o.V.Set(nil)
}

// UnsetV ensures that no value is present for V, not even an explicit nil
func (o *ContractResult) UnsetV() {
	o.V.Unset()
}

func (o ContractResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessList.IsSet() {
		toSerialize["access_list"] = o.AccessList.Get()
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if o.Amount.IsSet() {
		toSerialize["amount"] = o.Amount.Get()
	}
	if o.BlockGasUsed.IsSet() {
		toSerialize["block_gas_used"] = o.BlockGasUsed.Get()
	}
	if o.BlockHash.IsSet() {
		toSerialize["block_hash"] = o.BlockHash.Get()
	}
	if o.BlockNumber.IsSet() {
		toSerialize["block_number"] = o.BlockNumber.Get()
	}
	if !IsNil(o.Bloom) {
		toSerialize["bloom"] = o.Bloom
	}
	if o.CallResult.IsSet() {
		toSerialize["call_result"] = o.CallResult.Get()
	}
	if o.ChainId.IsSet() {
		toSerialize["chain_id"] = o.ChainId.Get()
	}
	if o.ContractId.IsSet() {
		toSerialize["contract_id"] = o.ContractId.Get()
	}
	if o.CreatedContractIds != nil {
		toSerialize["created_contract_ids"] = o.CreatedContractIds
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["error_message"] = o.ErrorMessage.Get()
	}
	if !IsNil(o.FailedInitcode) {
		toSerialize["failed_initcode"] = o.FailedInitcode
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if o.FunctionParameters.IsSet() {
		toSerialize["function_parameters"] = o.FunctionParameters.Get()
	}
	if !IsNil(o.GasLimit) {
		toSerialize["gas_limit"] = o.GasLimit
	}
	if o.GasPrice.IsSet() {
		toSerialize["gas_price"] = o.GasPrice.Get()
	}
	if o.GasUsed.IsSet() {
		toSerialize["gas_used"] = o.GasUsed.Get()
	}
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	if o.MaxFeePerGas.IsSet() {
		toSerialize["max_fee_per_gas"] = o.MaxFeePerGas.Get()
	}
	if o.MaxPriorityFeePerGas.IsSet() {
		toSerialize["max_priority_fee_per_gas"] = o.MaxPriorityFeePerGas.Get()
	}
	if o.Nonce.IsSet() {
		toSerialize["nonce"] = o.Nonce.Get()
	}
	if o.R.IsSet() {
		toSerialize["r"] = o.R.Get()
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if o.S.IsSet() {
		toSerialize["s"] = o.S.Get()
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.To.IsSet() {
		toSerialize["to"] = o.To.Get()
	}
	if o.TransactionIndex.IsSet() {
		toSerialize["transaction_index"] = o.TransactionIndex.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.V.IsSet() {
		toSerialize["v"] = o.V.Get()
	}
	return toSerialize, nil
}

type NullableContractResult struct {
	value *ContractResult
	isSet bool
}

func (v NullableContractResult) Get() *ContractResult {
	return v.value
}

func (v *NullableContractResult) Set(val *ContractResult) {
	v.value = val
	v.isSet = true
}

func (v NullableContractResult) IsSet() bool {
	return v.isSet
}

func (v *NullableContractResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractResult(val *ContractResult) *NullableContractResult {
	return &NullableContractResult{value: val, isSet: true}
}

func (v NullableContractResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


