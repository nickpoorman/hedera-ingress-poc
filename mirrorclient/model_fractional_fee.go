/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
)

// checks if the FractionalFee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FractionalFee{}

// FractionalFee struct for FractionalFee
type FractionalFee struct {
	AllCollectorsAreExempt *bool `json:"all_collectors_are_exempt,omitempty"`
	Amount *FractionalFeeAmount `json:"amount,omitempty"`
	// Network entity ID in the format of `shard.realm.num`
	CollectorAccountId NullableString `json:"collector_account_id,omitempty"`
	// Network entity ID in the format of `shard.realm.num`
	DenominatingTokenId NullableString `json:"denominating_token_id,omitempty"`
	Maximum NullableInt64 `json:"maximum,omitempty"`
	Minimum *int64 `json:"minimum,omitempty"`
	NetOfTransfers *bool `json:"net_of_transfers,omitempty"`
}

// NewFractionalFee instantiates a new FractionalFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFractionalFee() *FractionalFee {
	this := FractionalFee{}
	return &this
}

// NewFractionalFeeWithDefaults instantiates a new FractionalFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFractionalFeeWithDefaults() *FractionalFee {
	this := FractionalFee{}
	return &this
}

// GetAllCollectorsAreExempt returns the AllCollectorsAreExempt field value if set, zero value otherwise.
func (o *FractionalFee) GetAllCollectorsAreExempt() bool {
	if o == nil || IsNil(o.AllCollectorsAreExempt) {
		var ret bool
		return ret
	}
	return *o.AllCollectorsAreExempt
}

// GetAllCollectorsAreExemptOk returns a tuple with the AllCollectorsAreExempt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FractionalFee) GetAllCollectorsAreExemptOk() (*bool, bool) {
	if o == nil || IsNil(o.AllCollectorsAreExempt) {
		return nil, false
	}
	return o.AllCollectorsAreExempt, true
}

// HasAllCollectorsAreExempt returns a boolean if a field has been set.
func (o *FractionalFee) HasAllCollectorsAreExempt() bool {
	if o != nil && !IsNil(o.AllCollectorsAreExempt) {
		return true
	}

	return false
}

// SetAllCollectorsAreExempt gets a reference to the given bool and assigns it to the AllCollectorsAreExempt field.
func (o *FractionalFee) SetAllCollectorsAreExempt(v bool) {
	o.AllCollectorsAreExempt = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *FractionalFee) GetAmount() FractionalFeeAmount {
	if o == nil || IsNil(o.Amount) {
		var ret FractionalFeeAmount
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FractionalFee) GetAmountOk() (*FractionalFeeAmount, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *FractionalFee) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given FractionalFeeAmount and assigns it to the Amount field.
func (o *FractionalFee) SetAmount(v FractionalFeeAmount) {
	o.Amount = &v
}

// GetCollectorAccountId returns the CollectorAccountId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FractionalFee) GetCollectorAccountId() string {
	if o == nil || IsNil(o.CollectorAccountId.Get()) {
		var ret string
		return ret
	}
	return *o.CollectorAccountId.Get()
}

// GetCollectorAccountIdOk returns a tuple with the CollectorAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FractionalFee) GetCollectorAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CollectorAccountId.Get(), o.CollectorAccountId.IsSet()
}

// HasCollectorAccountId returns a boolean if a field has been set.
func (o *FractionalFee) HasCollectorAccountId() bool {
	if o != nil && o.CollectorAccountId.IsSet() {
		return true
	}

	return false
}

// SetCollectorAccountId gets a reference to the given NullableString and assigns it to the CollectorAccountId field.
func (o *FractionalFee) SetCollectorAccountId(v string) {
	o.CollectorAccountId.Set(&v)
}
// SetCollectorAccountIdNil sets the value for CollectorAccountId to be an explicit nil
func (o *FractionalFee) SetCollectorAccountIdNil() {
	o.CollectorAccountId.Set(nil)
}

// UnsetCollectorAccountId ensures that no value is present for CollectorAccountId, not even an explicit nil
func (o *FractionalFee) UnsetCollectorAccountId() {
	o.CollectorAccountId.Unset()
}

// GetDenominatingTokenId returns the DenominatingTokenId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FractionalFee) GetDenominatingTokenId() string {
	if o == nil || IsNil(o.DenominatingTokenId.Get()) {
		var ret string
		return ret
	}
	return *o.DenominatingTokenId.Get()
}

// GetDenominatingTokenIdOk returns a tuple with the DenominatingTokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FractionalFee) GetDenominatingTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DenominatingTokenId.Get(), o.DenominatingTokenId.IsSet()
}

// HasDenominatingTokenId returns a boolean if a field has been set.
func (o *FractionalFee) HasDenominatingTokenId() bool {
	if o != nil && o.DenominatingTokenId.IsSet() {
		return true
	}

	return false
}

// SetDenominatingTokenId gets a reference to the given NullableString and assigns it to the DenominatingTokenId field.
func (o *FractionalFee) SetDenominatingTokenId(v string) {
	o.DenominatingTokenId.Set(&v)
}
// SetDenominatingTokenIdNil sets the value for DenominatingTokenId to be an explicit nil
func (o *FractionalFee) SetDenominatingTokenIdNil() {
	o.DenominatingTokenId.Set(nil)
}

// UnsetDenominatingTokenId ensures that no value is present for DenominatingTokenId, not even an explicit nil
func (o *FractionalFee) UnsetDenominatingTokenId() {
	o.DenominatingTokenId.Unset()
}

// GetMaximum returns the Maximum field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FractionalFee) GetMaximum() int64 {
	if o == nil || IsNil(o.Maximum.Get()) {
		var ret int64
		return ret
	}
	return *o.Maximum.Get()
}

// GetMaximumOk returns a tuple with the Maximum field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FractionalFee) GetMaximumOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Maximum.Get(), o.Maximum.IsSet()
}

// HasMaximum returns a boolean if a field has been set.
func (o *FractionalFee) HasMaximum() bool {
	if o != nil && o.Maximum.IsSet() {
		return true
	}

	return false
}

// SetMaximum gets a reference to the given NullableInt64 and assigns it to the Maximum field.
func (o *FractionalFee) SetMaximum(v int64) {
	o.Maximum.Set(&v)
}
// SetMaximumNil sets the value for Maximum to be an explicit nil
func (o *FractionalFee) SetMaximumNil() {
	o.Maximum.Set(nil)
}

// UnsetMaximum ensures that no value is present for Maximum, not even an explicit nil
func (o *FractionalFee) UnsetMaximum() {
	o.Maximum.Unset()
}

// GetMinimum returns the Minimum field value if set, zero value otherwise.
func (o *FractionalFee) GetMinimum() int64 {
	if o == nil || IsNil(o.Minimum) {
		var ret int64
		return ret
	}
	return *o.Minimum
}

// GetMinimumOk returns a tuple with the Minimum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FractionalFee) GetMinimumOk() (*int64, bool) {
	if o == nil || IsNil(o.Minimum) {
		return nil, false
	}
	return o.Minimum, true
}

// HasMinimum returns a boolean if a field has been set.
func (o *FractionalFee) HasMinimum() bool {
	if o != nil && !IsNil(o.Minimum) {
		return true
	}

	return false
}

// SetMinimum gets a reference to the given int64 and assigns it to the Minimum field.
func (o *FractionalFee) SetMinimum(v int64) {
	o.Minimum = &v
}

// GetNetOfTransfers returns the NetOfTransfers field value if set, zero value otherwise.
func (o *FractionalFee) GetNetOfTransfers() bool {
	if o == nil || IsNil(o.NetOfTransfers) {
		var ret bool
		return ret
	}
	return *o.NetOfTransfers
}

// GetNetOfTransfersOk returns a tuple with the NetOfTransfers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FractionalFee) GetNetOfTransfersOk() (*bool, bool) {
	if o == nil || IsNil(o.NetOfTransfers) {
		return nil, false
	}
	return o.NetOfTransfers, true
}

// HasNetOfTransfers returns a boolean if a field has been set.
func (o *FractionalFee) HasNetOfTransfers() bool {
	if o != nil && !IsNil(o.NetOfTransfers) {
		return true
	}

	return false
}

// SetNetOfTransfers gets a reference to the given bool and assigns it to the NetOfTransfers field.
func (o *FractionalFee) SetNetOfTransfers(v bool) {
	o.NetOfTransfers = &v
}

func (o FractionalFee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FractionalFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllCollectorsAreExempt) {
		toSerialize["all_collectors_are_exempt"] = o.AllCollectorsAreExempt
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if o.CollectorAccountId.IsSet() {
		toSerialize["collector_account_id"] = o.CollectorAccountId.Get()
	}
	if o.DenominatingTokenId.IsSet() {
		toSerialize["denominating_token_id"] = o.DenominatingTokenId.Get()
	}
	if o.Maximum.IsSet() {
		toSerialize["maximum"] = o.Maximum.Get()
	}
	if !IsNil(o.Minimum) {
		toSerialize["minimum"] = o.Minimum
	}
	if !IsNil(o.NetOfTransfers) {
		toSerialize["net_of_transfers"] = o.NetOfTransfers
	}
	return toSerialize, nil
}

type NullableFractionalFee struct {
	value *FractionalFee
	isSet bool
}

func (v NullableFractionalFee) Get() *FractionalFee {
	return v.value
}

func (v *NullableFractionalFee) Set(val *FractionalFee) {
	v.value = val
	v.isSet = true
}

func (v NullableFractionalFee) IsSet() bool {
	return v.isSet
}

func (v *NullableFractionalFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFractionalFee(val *FractionalFee) *NullableFractionalFee {
	return &NullableFractionalFee{value: val, isSet: true}
}

func (v NullableFractionalFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFractionalFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


