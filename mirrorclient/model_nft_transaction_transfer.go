/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
)

// checks if the NftTransactionTransfer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NftTransactionTransfer{}

// NftTransactionTransfer struct for NftTransactionTransfer
type NftTransactionTransfer struct {
	ConsensusTimestamp string `json:"consensus_timestamp"`
	IsApproval bool `json:"is_approval"`
	Nonce int32 `json:"nonce"`
	// Network entity ID in the format of `shard.realm.num`
	ReceiverAccountId NullableString `json:"receiver_account_id"`
	// Network entity ID in the format of `shard.realm.num`
	SenderAccountId NullableString `json:"sender_account_id"`
	TransactionId string `json:"transaction_id"`
	Type TransactionTypes `json:"type"`
}

// NewNftTransactionTransfer instantiates a new NftTransactionTransfer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNftTransactionTransfer(consensusTimestamp string, isApproval bool, nonce int32, receiverAccountId NullableString, senderAccountId NullableString, transactionId string, type_ TransactionTypes) *NftTransactionTransfer {
	this := NftTransactionTransfer{}
	this.ConsensusTimestamp = consensusTimestamp
	this.IsApproval = isApproval
	this.Nonce = nonce
	this.ReceiverAccountId = receiverAccountId
	this.SenderAccountId = senderAccountId
	this.TransactionId = transactionId
	this.Type = type_
	return &this
}

// NewNftTransactionTransferWithDefaults instantiates a new NftTransactionTransfer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNftTransactionTransferWithDefaults() *NftTransactionTransfer {
	this := NftTransactionTransfer{}
	return &this
}

// GetConsensusTimestamp returns the ConsensusTimestamp field value
func (o *NftTransactionTransfer) GetConsensusTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConsensusTimestamp
}

// GetConsensusTimestampOk returns a tuple with the ConsensusTimestamp field value
// and a boolean to check if the value has been set.
func (o *NftTransactionTransfer) GetConsensusTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConsensusTimestamp, true
}

// SetConsensusTimestamp sets field value
func (o *NftTransactionTransfer) SetConsensusTimestamp(v string) {
	o.ConsensusTimestamp = v
}

// GetIsApproval returns the IsApproval field value
func (o *NftTransactionTransfer) GetIsApproval() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsApproval
}

// GetIsApprovalOk returns a tuple with the IsApproval field value
// and a boolean to check if the value has been set.
func (o *NftTransactionTransfer) GetIsApprovalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsApproval, true
}

// SetIsApproval sets field value
func (o *NftTransactionTransfer) SetIsApproval(v bool) {
	o.IsApproval = v
}

// GetNonce returns the Nonce field value
func (o *NftTransactionTransfer) GetNonce() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value
// and a boolean to check if the value has been set.
func (o *NftTransactionTransfer) GetNonceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Nonce, true
}

// SetNonce sets field value
func (o *NftTransactionTransfer) SetNonce(v int32) {
	o.Nonce = v
}

// GetReceiverAccountId returns the ReceiverAccountId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *NftTransactionTransfer) GetReceiverAccountId() string {
	if o == nil || o.ReceiverAccountId.Get() == nil {
		var ret string
		return ret
	}

	return *o.ReceiverAccountId.Get()
}

// GetReceiverAccountIdOk returns a tuple with the ReceiverAccountId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NftTransactionTransfer) GetReceiverAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReceiverAccountId.Get(), o.ReceiverAccountId.IsSet()
}

// SetReceiverAccountId sets field value
func (o *NftTransactionTransfer) SetReceiverAccountId(v string) {
	o.ReceiverAccountId.Set(&v)
}

// GetSenderAccountId returns the SenderAccountId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *NftTransactionTransfer) GetSenderAccountId() string {
	if o == nil || o.SenderAccountId.Get() == nil {
		var ret string
		return ret
	}

	return *o.SenderAccountId.Get()
}

// GetSenderAccountIdOk returns a tuple with the SenderAccountId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NftTransactionTransfer) GetSenderAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SenderAccountId.Get(), o.SenderAccountId.IsSet()
}

// SetSenderAccountId sets field value
func (o *NftTransactionTransfer) SetSenderAccountId(v string) {
	o.SenderAccountId.Set(&v)
}

// GetTransactionId returns the TransactionId field value
func (o *NftTransactionTransfer) GetTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value
// and a boolean to check if the value has been set.
func (o *NftTransactionTransfer) GetTransactionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionId, true
}

// SetTransactionId sets field value
func (o *NftTransactionTransfer) SetTransactionId(v string) {
	o.TransactionId = v
}

// GetType returns the Type field value
func (o *NftTransactionTransfer) GetType() TransactionTypes {
	if o == nil {
		var ret TransactionTypes
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *NftTransactionTransfer) GetTypeOk() (*TransactionTypes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *NftTransactionTransfer) SetType(v TransactionTypes) {
	o.Type = v
}

func (o NftTransactionTransfer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NftTransactionTransfer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["consensus_timestamp"] = o.ConsensusTimestamp
	toSerialize["is_approval"] = o.IsApproval
	toSerialize["nonce"] = o.Nonce
	toSerialize["receiver_account_id"] = o.ReceiverAccountId.Get()
	toSerialize["sender_account_id"] = o.SenderAccountId.Get()
	toSerialize["transaction_id"] = o.TransactionId
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableNftTransactionTransfer struct {
	value *NftTransactionTransfer
	isSet bool
}

func (v NullableNftTransactionTransfer) Get() *NftTransactionTransfer {
	return v.value
}

func (v *NullableNftTransactionTransfer) Set(val *NftTransactionTransfer) {
	v.value = val
	v.isSet = true
}

func (v NullableNftTransactionTransfer) IsSet() bool {
	return v.isSet
}

func (v *NullableNftTransactionTransfer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNftTransactionTransfer(val *NftTransactionTransfer) *NullableNftTransactionTransfer {
	return &NullableNftTransactionTransfer{value: val, isSet: true}
}

func (v NullableNftTransactionTransfer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNftTransactionTransfer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


