/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
)

// checks if the ContractLogsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractLogsResponse{}

// ContractLogsResponse struct for ContractLogsResponse
type ContractLogsResponse struct {
	Logs []ContractLog `json:"logs,omitempty"`
}

// NewContractLogsResponse instantiates a new ContractLogsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractLogsResponse() *ContractLogsResponse {
	this := ContractLogsResponse{}
	return &this
}

// NewContractLogsResponseWithDefaults instantiates a new ContractLogsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractLogsResponseWithDefaults() *ContractLogsResponse {
	this := ContractLogsResponse{}
	return &this
}

// GetLogs returns the Logs field value if set, zero value otherwise.
func (o *ContractLogsResponse) GetLogs() []ContractLog {
	if o == nil || IsNil(o.Logs) {
		var ret []ContractLog
		return ret
	}
	return o.Logs
}

// GetLogsOk returns a tuple with the Logs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractLogsResponse) GetLogsOk() ([]ContractLog, bool) {
	if o == nil || IsNil(o.Logs) {
		return nil, false
	}
	return o.Logs, true
}

// HasLogs returns a boolean if a field has been set.
func (o *ContractLogsResponse) HasLogs() bool {
	if o != nil && !IsNil(o.Logs) {
		return true
	}

	return false
}

// SetLogs gets a reference to the given []ContractLog and assigns it to the Logs field.
func (o *ContractLogsResponse) SetLogs(v []ContractLog) {
	o.Logs = v
}

func (o ContractLogsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractLogsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Logs) {
		toSerialize["logs"] = o.Logs
	}
	return toSerialize, nil
}

type NullableContractLogsResponse struct {
	value *ContractLogsResponse
	isSet bool
}

func (v NullableContractLogsResponse) Get() *ContractLogsResponse {
	return v.value
}

func (v *NullableContractLogsResponse) Set(val *ContractLogsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableContractLogsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableContractLogsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractLogsResponse(val *ContractLogsResponse) *NullableContractLogsResponse {
	return &NullableContractLogsResponse{value: val, isSet: true}
}

func (v NullableContractLogsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractLogsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


