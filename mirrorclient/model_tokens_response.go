/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
)

// checks if the TokensResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokensResponse{}

// TokensResponse struct for TokensResponse
type TokensResponse struct {
	Tokens []Token `json:"tokens,omitempty"`
	Links *Links `json:"links,omitempty"`
}

// NewTokensResponse instantiates a new TokensResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokensResponse() *TokensResponse {
	this := TokensResponse{}
	return &this
}

// NewTokensResponseWithDefaults instantiates a new TokensResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokensResponseWithDefaults() *TokensResponse {
	this := TokensResponse{}
	return &this
}

// GetTokens returns the Tokens field value if set, zero value otherwise.
func (o *TokensResponse) GetTokens() []Token {
	if o == nil || IsNil(o.Tokens) {
		var ret []Token
		return ret
	}
	return o.Tokens
}

// GetTokensOk returns a tuple with the Tokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokensResponse) GetTokensOk() ([]Token, bool) {
	if o == nil || IsNil(o.Tokens) {
		return nil, false
	}
	return o.Tokens, true
}

// HasTokens returns a boolean if a field has been set.
func (o *TokensResponse) HasTokens() bool {
	if o != nil && !IsNil(o.Tokens) {
		return true
	}

	return false
}

// SetTokens gets a reference to the given []Token and assigns it to the Tokens field.
func (o *TokensResponse) SetTokens(v []Token) {
	o.Tokens = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *TokensResponse) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokensResponse) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *TokensResponse) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *TokensResponse) SetLinks(v Links) {
	o.Links = &v
}

func (o TokensResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokensResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tokens) {
		toSerialize["tokens"] = o.Tokens
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	return toSerialize, nil
}

type NullableTokensResponse struct {
	value *TokensResponse
	isSet bool
}

func (v NullableTokensResponse) Get() *TokensResponse {
	return v.value
}

func (v *NullableTokensResponse) Set(val *TokensResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTokensResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTokensResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokensResponse(val *TokensResponse) *NullableTokensResponse {
	return &NullableTokensResponse{value: val, isSet: true}
}

func (v NullableTokensResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokensResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


