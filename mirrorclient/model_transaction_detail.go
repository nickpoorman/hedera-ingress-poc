/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
)

// checks if the TransactionDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionDetail{}

// TransactionDetail struct for TransactionDetail
type TransactionDetail struct {
	Bytes NullableString `json:"bytes,omitempty"`
	ChargedTxFee *int64 `json:"charged_tx_fee,omitempty"`
	ConsensusTimestamp *string `json:"consensus_timestamp,omitempty"`
	// Network entity ID in the format of `shard.realm.num`
	EntityId NullableString `json:"entity_id,omitempty"`
	MaxFee *string `json:"max_fee,omitempty"`
	MemoBase64 NullableString `json:"memo_base64,omitempty"`
	Name *TransactionTypes `json:"name,omitempty"`
	NftTransfers []TransactionNftTransfersInner `json:"nft_transfers,omitempty"`
	// Network entity ID in the format of `shard.realm.num`
	Node NullableString `json:"node,omitempty"`
	Nonce *int32 `json:"nonce,omitempty"`
	ParentConsensusTimestamp NullableString `json:"parent_consensus_timestamp,omitempty"`
	Result *string `json:"result,omitempty"`
	Scheduled *bool `json:"scheduled,omitempty"`
	StakingRewardTransfers []StakingRewardTransfer `json:"staking_reward_transfers,omitempty"`
	TokenTransfers []TransactionTokenTransfersInner `json:"token_transfers,omitempty"`
	TransactionHash *string `json:"transaction_hash,omitempty"`
	TransactionId *string `json:"transaction_id,omitempty"`
	Transfers []TransactionTransfersInner `json:"transfers,omitempty"`
	ValidDurationSeconds *string `json:"valid_duration_seconds,omitempty"`
	ValidStartTimestamp *string `json:"valid_start_timestamp,omitempty"`
	AssessedCustomFees []TransactionDetailAllOfAssessedCustomFees `json:"assessed_custom_fees,omitempty"`
}

// NewTransactionDetail instantiates a new TransactionDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionDetail() *TransactionDetail {
	this := TransactionDetail{}
	return &this
}

// NewTransactionDetailWithDefaults instantiates a new TransactionDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionDetailWithDefaults() *TransactionDetail {
	this := TransactionDetail{}
	return &this
}

// GetBytes returns the Bytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionDetail) GetBytes() string {
	if o == nil || IsNil(o.Bytes.Get()) {
		var ret string
		return ret
	}
	return *o.Bytes.Get()
}

// GetBytesOk returns a tuple with the Bytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionDetail) GetBytesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bytes.Get(), o.Bytes.IsSet()
}

// HasBytes returns a boolean if a field has been set.
func (o *TransactionDetail) HasBytes() bool {
	if o != nil && o.Bytes.IsSet() {
		return true
	}

	return false
}

// SetBytes gets a reference to the given NullableString and assigns it to the Bytes field.
func (o *TransactionDetail) SetBytes(v string) {
	o.Bytes.Set(&v)
}
// SetBytesNil sets the value for Bytes to be an explicit nil
func (o *TransactionDetail) SetBytesNil() {
	o.Bytes.Set(nil)
}

// UnsetBytes ensures that no value is present for Bytes, not even an explicit nil
func (o *TransactionDetail) UnsetBytes() {
	o.Bytes.Unset()
}

// GetChargedTxFee returns the ChargedTxFee field value if set, zero value otherwise.
func (o *TransactionDetail) GetChargedTxFee() int64 {
	if o == nil || IsNil(o.ChargedTxFee) {
		var ret int64
		return ret
	}
	return *o.ChargedTxFee
}

// GetChargedTxFeeOk returns a tuple with the ChargedTxFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionDetail) GetChargedTxFeeOk() (*int64, bool) {
	if o == nil || IsNil(o.ChargedTxFee) {
		return nil, false
	}
	return o.ChargedTxFee, true
}

// HasChargedTxFee returns a boolean if a field has been set.
func (o *TransactionDetail) HasChargedTxFee() bool {
	if o != nil && !IsNil(o.ChargedTxFee) {
		return true
	}

	return false
}

// SetChargedTxFee gets a reference to the given int64 and assigns it to the ChargedTxFee field.
func (o *TransactionDetail) SetChargedTxFee(v int64) {
	o.ChargedTxFee = &v
}

// GetConsensusTimestamp returns the ConsensusTimestamp field value if set, zero value otherwise.
func (o *TransactionDetail) GetConsensusTimestamp() string {
	if o == nil || IsNil(o.ConsensusTimestamp) {
		var ret string
		return ret
	}
	return *o.ConsensusTimestamp
}

// GetConsensusTimestampOk returns a tuple with the ConsensusTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionDetail) GetConsensusTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.ConsensusTimestamp) {
		return nil, false
	}
	return o.ConsensusTimestamp, true
}

// HasConsensusTimestamp returns a boolean if a field has been set.
func (o *TransactionDetail) HasConsensusTimestamp() bool {
	if o != nil && !IsNil(o.ConsensusTimestamp) {
		return true
	}

	return false
}

// SetConsensusTimestamp gets a reference to the given string and assigns it to the ConsensusTimestamp field.
func (o *TransactionDetail) SetConsensusTimestamp(v string) {
	o.ConsensusTimestamp = &v
}

// GetEntityId returns the EntityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionDetail) GetEntityId() string {
	if o == nil || IsNil(o.EntityId.Get()) {
		var ret string
		return ret
	}
	return *o.EntityId.Get()
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionDetail) GetEntityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EntityId.Get(), o.EntityId.IsSet()
}

// HasEntityId returns a boolean if a field has been set.
func (o *TransactionDetail) HasEntityId() bool {
	if o != nil && o.EntityId.IsSet() {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given NullableString and assigns it to the EntityId field.
func (o *TransactionDetail) SetEntityId(v string) {
	o.EntityId.Set(&v)
}
// SetEntityIdNil sets the value for EntityId to be an explicit nil
func (o *TransactionDetail) SetEntityIdNil() {
	o.EntityId.Set(nil)
}

// UnsetEntityId ensures that no value is present for EntityId, not even an explicit nil
func (o *TransactionDetail) UnsetEntityId() {
	o.EntityId.Unset()
}

// GetMaxFee returns the MaxFee field value if set, zero value otherwise.
func (o *TransactionDetail) GetMaxFee() string {
	if o == nil || IsNil(o.MaxFee) {
		var ret string
		return ret
	}
	return *o.MaxFee
}

// GetMaxFeeOk returns a tuple with the MaxFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionDetail) GetMaxFeeOk() (*string, bool) {
	if o == nil || IsNil(o.MaxFee) {
		return nil, false
	}
	return o.MaxFee, true
}

// HasMaxFee returns a boolean if a field has been set.
func (o *TransactionDetail) HasMaxFee() bool {
	if o != nil && !IsNil(o.MaxFee) {
		return true
	}

	return false
}

// SetMaxFee gets a reference to the given string and assigns it to the MaxFee field.
func (o *TransactionDetail) SetMaxFee(v string) {
	o.MaxFee = &v
}

// GetMemoBase64 returns the MemoBase64 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionDetail) GetMemoBase64() string {
	if o == nil || IsNil(o.MemoBase64.Get()) {
		var ret string
		return ret
	}
	return *o.MemoBase64.Get()
}

// GetMemoBase64Ok returns a tuple with the MemoBase64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionDetail) GetMemoBase64Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MemoBase64.Get(), o.MemoBase64.IsSet()
}

// HasMemoBase64 returns a boolean if a field has been set.
func (o *TransactionDetail) HasMemoBase64() bool {
	if o != nil && o.MemoBase64.IsSet() {
		return true
	}

	return false
}

// SetMemoBase64 gets a reference to the given NullableString and assigns it to the MemoBase64 field.
func (o *TransactionDetail) SetMemoBase64(v string) {
	o.MemoBase64.Set(&v)
}
// SetMemoBase64Nil sets the value for MemoBase64 to be an explicit nil
func (o *TransactionDetail) SetMemoBase64Nil() {
	o.MemoBase64.Set(nil)
}

// UnsetMemoBase64 ensures that no value is present for MemoBase64, not even an explicit nil
func (o *TransactionDetail) UnsetMemoBase64() {
	o.MemoBase64.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TransactionDetail) GetName() TransactionTypes {
	if o == nil || IsNil(o.Name) {
		var ret TransactionTypes
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionDetail) GetNameOk() (*TransactionTypes, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TransactionDetail) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given TransactionTypes and assigns it to the Name field.
func (o *TransactionDetail) SetName(v TransactionTypes) {
	o.Name = &v
}

// GetNftTransfers returns the NftTransfers field value if set, zero value otherwise.
func (o *TransactionDetail) GetNftTransfers() []TransactionNftTransfersInner {
	if o == nil || IsNil(o.NftTransfers) {
		var ret []TransactionNftTransfersInner
		return ret
	}
	return o.NftTransfers
}

// GetNftTransfersOk returns a tuple with the NftTransfers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionDetail) GetNftTransfersOk() ([]TransactionNftTransfersInner, bool) {
	if o == nil || IsNil(o.NftTransfers) {
		return nil, false
	}
	return o.NftTransfers, true
}

// HasNftTransfers returns a boolean if a field has been set.
func (o *TransactionDetail) HasNftTransfers() bool {
	if o != nil && !IsNil(o.NftTransfers) {
		return true
	}

	return false
}

// SetNftTransfers gets a reference to the given []TransactionNftTransfersInner and assigns it to the NftTransfers field.
func (o *TransactionDetail) SetNftTransfers(v []TransactionNftTransfersInner) {
	o.NftTransfers = v
}

// GetNode returns the Node field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionDetail) GetNode() string {
	if o == nil || IsNil(o.Node.Get()) {
		var ret string
		return ret
	}
	return *o.Node.Get()
}

// GetNodeOk returns a tuple with the Node field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionDetail) GetNodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Node.Get(), o.Node.IsSet()
}

// HasNode returns a boolean if a field has been set.
func (o *TransactionDetail) HasNode() bool {
	if o != nil && o.Node.IsSet() {
		return true
	}

	return false
}

// SetNode gets a reference to the given NullableString and assigns it to the Node field.
func (o *TransactionDetail) SetNode(v string) {
	o.Node.Set(&v)
}
// SetNodeNil sets the value for Node to be an explicit nil
func (o *TransactionDetail) SetNodeNil() {
	o.Node.Set(nil)
}

// UnsetNode ensures that no value is present for Node, not even an explicit nil
func (o *TransactionDetail) UnsetNode() {
	o.Node.Unset()
}

// GetNonce returns the Nonce field value if set, zero value otherwise.
func (o *TransactionDetail) GetNonce() int32 {
	if o == nil || IsNil(o.Nonce) {
		var ret int32
		return ret
	}
	return *o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionDetail) GetNonceOk() (*int32, bool) {
	if o == nil || IsNil(o.Nonce) {
		return nil, false
	}
	return o.Nonce, true
}

// HasNonce returns a boolean if a field has been set.
func (o *TransactionDetail) HasNonce() bool {
	if o != nil && !IsNil(o.Nonce) {
		return true
	}

	return false
}

// SetNonce gets a reference to the given int32 and assigns it to the Nonce field.
func (o *TransactionDetail) SetNonce(v int32) {
	o.Nonce = &v
}

// GetParentConsensusTimestamp returns the ParentConsensusTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionDetail) GetParentConsensusTimestamp() string {
	if o == nil || IsNil(o.ParentConsensusTimestamp.Get()) {
		var ret string
		return ret
	}
	return *o.ParentConsensusTimestamp.Get()
}

// GetParentConsensusTimestampOk returns a tuple with the ParentConsensusTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionDetail) GetParentConsensusTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentConsensusTimestamp.Get(), o.ParentConsensusTimestamp.IsSet()
}

// HasParentConsensusTimestamp returns a boolean if a field has been set.
func (o *TransactionDetail) HasParentConsensusTimestamp() bool {
	if o != nil && o.ParentConsensusTimestamp.IsSet() {
		return true
	}

	return false
}

// SetParentConsensusTimestamp gets a reference to the given NullableString and assigns it to the ParentConsensusTimestamp field.
func (o *TransactionDetail) SetParentConsensusTimestamp(v string) {
	o.ParentConsensusTimestamp.Set(&v)
}
// SetParentConsensusTimestampNil sets the value for ParentConsensusTimestamp to be an explicit nil
func (o *TransactionDetail) SetParentConsensusTimestampNil() {
	o.ParentConsensusTimestamp.Set(nil)
}

// UnsetParentConsensusTimestamp ensures that no value is present for ParentConsensusTimestamp, not even an explicit nil
func (o *TransactionDetail) UnsetParentConsensusTimestamp() {
	o.ParentConsensusTimestamp.Unset()
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *TransactionDetail) GetResult() string {
	if o == nil || IsNil(o.Result) {
		var ret string
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionDetail) GetResultOk() (*string, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *TransactionDetail) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given string and assigns it to the Result field.
func (o *TransactionDetail) SetResult(v string) {
	o.Result = &v
}

// GetScheduled returns the Scheduled field value if set, zero value otherwise.
func (o *TransactionDetail) GetScheduled() bool {
	if o == nil || IsNil(o.Scheduled) {
		var ret bool
		return ret
	}
	return *o.Scheduled
}

// GetScheduledOk returns a tuple with the Scheduled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionDetail) GetScheduledOk() (*bool, bool) {
	if o == nil || IsNil(o.Scheduled) {
		return nil, false
	}
	return o.Scheduled, true
}

// HasScheduled returns a boolean if a field has been set.
func (o *TransactionDetail) HasScheduled() bool {
	if o != nil && !IsNil(o.Scheduled) {
		return true
	}

	return false
}

// SetScheduled gets a reference to the given bool and assigns it to the Scheduled field.
func (o *TransactionDetail) SetScheduled(v bool) {
	o.Scheduled = &v
}

// GetStakingRewardTransfers returns the StakingRewardTransfers field value if set, zero value otherwise.
func (o *TransactionDetail) GetStakingRewardTransfers() []StakingRewardTransfer {
	if o == nil || IsNil(o.StakingRewardTransfers) {
		var ret []StakingRewardTransfer
		return ret
	}
	return o.StakingRewardTransfers
}

// GetStakingRewardTransfersOk returns a tuple with the StakingRewardTransfers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionDetail) GetStakingRewardTransfersOk() ([]StakingRewardTransfer, bool) {
	if o == nil || IsNil(o.StakingRewardTransfers) {
		return nil, false
	}
	return o.StakingRewardTransfers, true
}

// HasStakingRewardTransfers returns a boolean if a field has been set.
func (o *TransactionDetail) HasStakingRewardTransfers() bool {
	if o != nil && !IsNil(o.StakingRewardTransfers) {
		return true
	}

	return false
}

// SetStakingRewardTransfers gets a reference to the given []StakingRewardTransfer and assigns it to the StakingRewardTransfers field.
func (o *TransactionDetail) SetStakingRewardTransfers(v []StakingRewardTransfer) {
	o.StakingRewardTransfers = v
}

// GetTokenTransfers returns the TokenTransfers field value if set, zero value otherwise.
func (o *TransactionDetail) GetTokenTransfers() []TransactionTokenTransfersInner {
	if o == nil || IsNil(o.TokenTransfers) {
		var ret []TransactionTokenTransfersInner
		return ret
	}
	return o.TokenTransfers
}

// GetTokenTransfersOk returns a tuple with the TokenTransfers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionDetail) GetTokenTransfersOk() ([]TransactionTokenTransfersInner, bool) {
	if o == nil || IsNil(o.TokenTransfers) {
		return nil, false
	}
	return o.TokenTransfers, true
}

// HasTokenTransfers returns a boolean if a field has been set.
func (o *TransactionDetail) HasTokenTransfers() bool {
	if o != nil && !IsNil(o.TokenTransfers) {
		return true
	}

	return false
}

// SetTokenTransfers gets a reference to the given []TransactionTokenTransfersInner and assigns it to the TokenTransfers field.
func (o *TransactionDetail) SetTokenTransfers(v []TransactionTokenTransfersInner) {
	o.TokenTransfers = v
}

// GetTransactionHash returns the TransactionHash field value if set, zero value otherwise.
func (o *TransactionDetail) GetTransactionHash() string {
	if o == nil || IsNil(o.TransactionHash) {
		var ret string
		return ret
	}
	return *o.TransactionHash
}

// GetTransactionHashOk returns a tuple with the TransactionHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionDetail) GetTransactionHashOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionHash) {
		return nil, false
	}
	return o.TransactionHash, true
}

// HasTransactionHash returns a boolean if a field has been set.
func (o *TransactionDetail) HasTransactionHash() bool {
	if o != nil && !IsNil(o.TransactionHash) {
		return true
	}

	return false
}

// SetTransactionHash gets a reference to the given string and assigns it to the TransactionHash field.
func (o *TransactionDetail) SetTransactionHash(v string) {
	o.TransactionHash = &v
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *TransactionDetail) GetTransactionId() string {
	if o == nil || IsNil(o.TransactionId) {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionDetail) GetTransactionIdOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionId) {
		return nil, false
	}
	return o.TransactionId, true
}

// HasTransactionId returns a boolean if a field has been set.
func (o *TransactionDetail) HasTransactionId() bool {
	if o != nil && !IsNil(o.TransactionId) {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
func (o *TransactionDetail) SetTransactionId(v string) {
	o.TransactionId = &v
}

// GetTransfers returns the Transfers field value if set, zero value otherwise.
func (o *TransactionDetail) GetTransfers() []TransactionTransfersInner {
	if o == nil || IsNil(o.Transfers) {
		var ret []TransactionTransfersInner
		return ret
	}
	return o.Transfers
}

// GetTransfersOk returns a tuple with the Transfers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionDetail) GetTransfersOk() ([]TransactionTransfersInner, bool) {
	if o == nil || IsNil(o.Transfers) {
		return nil, false
	}
	return o.Transfers, true
}

// HasTransfers returns a boolean if a field has been set.
func (o *TransactionDetail) HasTransfers() bool {
	if o != nil && !IsNil(o.Transfers) {
		return true
	}

	return false
}

// SetTransfers gets a reference to the given []TransactionTransfersInner and assigns it to the Transfers field.
func (o *TransactionDetail) SetTransfers(v []TransactionTransfersInner) {
	o.Transfers = v
}

// GetValidDurationSeconds returns the ValidDurationSeconds field value if set, zero value otherwise.
func (o *TransactionDetail) GetValidDurationSeconds() string {
	if o == nil || IsNil(o.ValidDurationSeconds) {
		var ret string
		return ret
	}
	return *o.ValidDurationSeconds
}

// GetValidDurationSecondsOk returns a tuple with the ValidDurationSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionDetail) GetValidDurationSecondsOk() (*string, bool) {
	if o == nil || IsNil(o.ValidDurationSeconds) {
		return nil, false
	}
	return o.ValidDurationSeconds, true
}

// HasValidDurationSeconds returns a boolean if a field has been set.
func (o *TransactionDetail) HasValidDurationSeconds() bool {
	if o != nil && !IsNil(o.ValidDurationSeconds) {
		return true
	}

	return false
}

// SetValidDurationSeconds gets a reference to the given string and assigns it to the ValidDurationSeconds field.
func (o *TransactionDetail) SetValidDurationSeconds(v string) {
	o.ValidDurationSeconds = &v
}

// GetValidStartTimestamp returns the ValidStartTimestamp field value if set, zero value otherwise.
func (o *TransactionDetail) GetValidStartTimestamp() string {
	if o == nil || IsNil(o.ValidStartTimestamp) {
		var ret string
		return ret
	}
	return *o.ValidStartTimestamp
}

// GetValidStartTimestampOk returns a tuple with the ValidStartTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionDetail) GetValidStartTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.ValidStartTimestamp) {
		return nil, false
	}
	return o.ValidStartTimestamp, true
}

// HasValidStartTimestamp returns a boolean if a field has been set.
func (o *TransactionDetail) HasValidStartTimestamp() bool {
	if o != nil && !IsNil(o.ValidStartTimestamp) {
		return true
	}

	return false
}

// SetValidStartTimestamp gets a reference to the given string and assigns it to the ValidStartTimestamp field.
func (o *TransactionDetail) SetValidStartTimestamp(v string) {
	o.ValidStartTimestamp = &v
}

// GetAssessedCustomFees returns the AssessedCustomFees field value if set, zero value otherwise.
func (o *TransactionDetail) GetAssessedCustomFees() []TransactionDetailAllOfAssessedCustomFees {
	if o == nil || IsNil(o.AssessedCustomFees) {
		var ret []TransactionDetailAllOfAssessedCustomFees
		return ret
	}
	return o.AssessedCustomFees
}

// GetAssessedCustomFeesOk returns a tuple with the AssessedCustomFees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionDetail) GetAssessedCustomFeesOk() ([]TransactionDetailAllOfAssessedCustomFees, bool) {
	if o == nil || IsNil(o.AssessedCustomFees) {
		return nil, false
	}
	return o.AssessedCustomFees, true
}

// HasAssessedCustomFees returns a boolean if a field has been set.
func (o *TransactionDetail) HasAssessedCustomFees() bool {
	if o != nil && !IsNil(o.AssessedCustomFees) {
		return true
	}

	return false
}

// SetAssessedCustomFees gets a reference to the given []TransactionDetailAllOfAssessedCustomFees and assigns it to the AssessedCustomFees field.
func (o *TransactionDetail) SetAssessedCustomFees(v []TransactionDetailAllOfAssessedCustomFees) {
	o.AssessedCustomFees = v
}

func (o TransactionDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Bytes.IsSet() {
		toSerialize["bytes"] = o.Bytes.Get()
	}
	if !IsNil(o.ChargedTxFee) {
		toSerialize["charged_tx_fee"] = o.ChargedTxFee
	}
	if !IsNil(o.ConsensusTimestamp) {
		toSerialize["consensus_timestamp"] = o.ConsensusTimestamp
	}
	if o.EntityId.IsSet() {
		toSerialize["entity_id"] = o.EntityId.Get()
	}
	if !IsNil(o.MaxFee) {
		toSerialize["max_fee"] = o.MaxFee
	}
	if o.MemoBase64.IsSet() {
		toSerialize["memo_base64"] = o.MemoBase64.Get()
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NftTransfers) {
		toSerialize["nft_transfers"] = o.NftTransfers
	}
	if o.Node.IsSet() {
		toSerialize["node"] = o.Node.Get()
	}
	if !IsNil(o.Nonce) {
		toSerialize["nonce"] = o.Nonce
	}
	if o.ParentConsensusTimestamp.IsSet() {
		toSerialize["parent_consensus_timestamp"] = o.ParentConsensusTimestamp.Get()
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if !IsNil(o.Scheduled) {
		toSerialize["scheduled"] = o.Scheduled
	}
	if !IsNil(o.StakingRewardTransfers) {
		toSerialize["staking_reward_transfers"] = o.StakingRewardTransfers
	}
	if !IsNil(o.TokenTransfers) {
		toSerialize["token_transfers"] = o.TokenTransfers
	}
	if !IsNil(o.TransactionHash) {
		toSerialize["transaction_hash"] = o.TransactionHash
	}
	if !IsNil(o.TransactionId) {
		toSerialize["transaction_id"] = o.TransactionId
	}
	if !IsNil(o.Transfers) {
		toSerialize["transfers"] = o.Transfers
	}
	if !IsNil(o.ValidDurationSeconds) {
		toSerialize["valid_duration_seconds"] = o.ValidDurationSeconds
	}
	if !IsNil(o.ValidStartTimestamp) {
		toSerialize["valid_start_timestamp"] = o.ValidStartTimestamp
	}
	if !IsNil(o.AssessedCustomFees) {
		toSerialize["assessed_custom_fees"] = o.AssessedCustomFees
	}
	return toSerialize, nil
}

type NullableTransactionDetail struct {
	value *TransactionDetail
	isSet bool
}

func (v NullableTransactionDetail) Get() *TransactionDetail {
	return v.value
}

func (v *NullableTransactionDetail) Set(val *TransactionDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionDetail(val *TransactionDetail) *NullableTransactionDetail {
	return &NullableTransactionDetail{value: val, isSet: true}
}

func (v NullableTransactionDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


