/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
)

// checks if the CustomFees type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomFees{}

// CustomFees struct for CustomFees
type CustomFees struct {
	CreatedTimestamp *string `json:"created_timestamp,omitempty"`
	FixedFees []FixedFee `json:"fixed_fees,omitempty"`
	FractionalFees []FractionalFee `json:"fractional_fees,omitempty"`
	RoyaltyFees []RoyaltyFee `json:"royalty_fees,omitempty"`
}

// NewCustomFees instantiates a new CustomFees object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomFees() *CustomFees {
	this := CustomFees{}
	return &this
}

// NewCustomFeesWithDefaults instantiates a new CustomFees object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomFeesWithDefaults() *CustomFees {
	this := CustomFees{}
	return &this
}

// GetCreatedTimestamp returns the CreatedTimestamp field value if set, zero value otherwise.
func (o *CustomFees) GetCreatedTimestamp() string {
	if o == nil || IsNil(o.CreatedTimestamp) {
		var ret string
		return ret
	}
	return *o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomFees) GetCreatedTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedTimestamp) {
		return nil, false
	}
	return o.CreatedTimestamp, true
}

// HasCreatedTimestamp returns a boolean if a field has been set.
func (o *CustomFees) HasCreatedTimestamp() bool {
	if o != nil && !IsNil(o.CreatedTimestamp) {
		return true
	}

	return false
}

// SetCreatedTimestamp gets a reference to the given string and assigns it to the CreatedTimestamp field.
func (o *CustomFees) SetCreatedTimestamp(v string) {
	o.CreatedTimestamp = &v
}

// GetFixedFees returns the FixedFees field value if set, zero value otherwise.
func (o *CustomFees) GetFixedFees() []FixedFee {
	if o == nil || IsNil(o.FixedFees) {
		var ret []FixedFee
		return ret
	}
	return o.FixedFees
}

// GetFixedFeesOk returns a tuple with the FixedFees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomFees) GetFixedFeesOk() ([]FixedFee, bool) {
	if o == nil || IsNil(o.FixedFees) {
		return nil, false
	}
	return o.FixedFees, true
}

// HasFixedFees returns a boolean if a field has been set.
func (o *CustomFees) HasFixedFees() bool {
	if o != nil && !IsNil(o.FixedFees) {
		return true
	}

	return false
}

// SetFixedFees gets a reference to the given []FixedFee and assigns it to the FixedFees field.
func (o *CustomFees) SetFixedFees(v []FixedFee) {
	o.FixedFees = v
}

// GetFractionalFees returns the FractionalFees field value if set, zero value otherwise.
func (o *CustomFees) GetFractionalFees() []FractionalFee {
	if o == nil || IsNil(o.FractionalFees) {
		var ret []FractionalFee
		return ret
	}
	return o.FractionalFees
}

// GetFractionalFeesOk returns a tuple with the FractionalFees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomFees) GetFractionalFeesOk() ([]FractionalFee, bool) {
	if o == nil || IsNil(o.FractionalFees) {
		return nil, false
	}
	return o.FractionalFees, true
}

// HasFractionalFees returns a boolean if a field has been set.
func (o *CustomFees) HasFractionalFees() bool {
	if o != nil && !IsNil(o.FractionalFees) {
		return true
	}

	return false
}

// SetFractionalFees gets a reference to the given []FractionalFee and assigns it to the FractionalFees field.
func (o *CustomFees) SetFractionalFees(v []FractionalFee) {
	o.FractionalFees = v
}

// GetRoyaltyFees returns the RoyaltyFees field value if set, zero value otherwise.
func (o *CustomFees) GetRoyaltyFees() []RoyaltyFee {
	if o == nil || IsNil(o.RoyaltyFees) {
		var ret []RoyaltyFee
		return ret
	}
	return o.RoyaltyFees
}

// GetRoyaltyFeesOk returns a tuple with the RoyaltyFees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomFees) GetRoyaltyFeesOk() ([]RoyaltyFee, bool) {
	if o == nil || IsNil(o.RoyaltyFees) {
		return nil, false
	}
	return o.RoyaltyFees, true
}

// HasRoyaltyFees returns a boolean if a field has been set.
func (o *CustomFees) HasRoyaltyFees() bool {
	if o != nil && !IsNil(o.RoyaltyFees) {
		return true
	}

	return false
}

// SetRoyaltyFees gets a reference to the given []RoyaltyFee and assigns it to the RoyaltyFees field.
func (o *CustomFees) SetRoyaltyFees(v []RoyaltyFee) {
	o.RoyaltyFees = v
}

func (o CustomFees) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomFees) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedTimestamp) {
		toSerialize["created_timestamp"] = o.CreatedTimestamp
	}
	if !IsNil(o.FixedFees) {
		toSerialize["fixed_fees"] = o.FixedFees
	}
	if !IsNil(o.FractionalFees) {
		toSerialize["fractional_fees"] = o.FractionalFees
	}
	if !IsNil(o.RoyaltyFees) {
		toSerialize["royalty_fees"] = o.RoyaltyFees
	}
	return toSerialize, nil
}

type NullableCustomFees struct {
	value *CustomFees
	isSet bool
}

func (v NullableCustomFees) Get() *CustomFees {
	return v.value
}

func (v *NullableCustomFees) Set(val *CustomFees) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomFees) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomFees) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomFees(val *CustomFees) *NullableCustomFees {
	return &NullableCustomFees{value: val, isSet: true}
}

func (v NullableCustomFees) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomFees) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


