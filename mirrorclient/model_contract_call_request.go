/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
	"os"
)

// checks if the ContractCallRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractCallRequest{}

// ContractCallRequest struct for ContractCallRequest
type ContractCallRequest struct {
	// Hexadecimal block number or the string \"latest\", \"pending\", \"earliest\". Defaults to \"latest\".
	Block NullableString `json:"block,omitempty"`
	// Hexadecimal method signature and encoded parameters.
	Data Nullable*os.File `json:"data,omitempty"`
	// Whether gas estimation is called. Defaults to false.
	Estimate NullableBool `json:"estimate,omitempty"`
	// The 20-byte hexadecimal EVM address the transaction is sent from.
	From Nullable*os.File `json:"from,omitempty"`
	// Gas provided for the transaction execution. Defaults to 15000000.
	Gas NullableInt64 `json:"gas,omitempty"`
	// Gas price used for each paid gas.
	GasPrice NullableInt64 `json:"gasPrice,omitempty"`
	// The 20-byte hexadecimal EVM address the transaction is directed to.
	To *os.File `json:"to"`
	// Value sent with this transaction. Defaults to 0.
	Value NullableInt64 `json:"value,omitempty"`
}

// NewContractCallRequest instantiates a new ContractCallRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractCallRequest(to *os.File) *ContractCallRequest {
	this := ContractCallRequest{}
	this.To = to
	return &this
}

// NewContractCallRequestWithDefaults instantiates a new ContractCallRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractCallRequestWithDefaults() *ContractCallRequest {
	this := ContractCallRequest{}
	return &this
}

// GetBlock returns the Block field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractCallRequest) GetBlock() string {
	if o == nil || IsNil(o.Block.Get()) {
		var ret string
		return ret
	}
	return *o.Block.Get()
}

// GetBlockOk returns a tuple with the Block field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractCallRequest) GetBlockOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Block.Get(), o.Block.IsSet()
}

// HasBlock returns a boolean if a field has been set.
func (o *ContractCallRequest) HasBlock() bool {
	if o != nil && o.Block.IsSet() {
		return true
	}

	return false
}

// SetBlock gets a reference to the given NullableString and assigns it to the Block field.
func (o *ContractCallRequest) SetBlock(v string) {
	o.Block.Set(&v)
}
// SetBlockNil sets the value for Block to be an explicit nil
func (o *ContractCallRequest) SetBlockNil() {
	o.Block.Set(nil)
}

// UnsetBlock ensures that no value is present for Block, not even an explicit nil
func (o *ContractCallRequest) UnsetBlock() {
	o.Block.Unset()
}

// GetData returns the Data field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractCallRequest) GetData() *os.File {
	if o == nil || IsNil(o.Data.Get()) {
		var ret *os.File
		return ret
	}
	return *o.Data.Get()
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractCallRequest) GetDataOk() (**os.File, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data.Get(), o.Data.IsSet()
}

// HasData returns a boolean if a field has been set.
func (o *ContractCallRequest) HasData() bool {
	if o != nil && o.Data.IsSet() {
		return true
	}

	return false
}

// SetData gets a reference to the given Nullable*os.File and assigns it to the Data field.
func (o *ContractCallRequest) SetData(v *os.File) {
	o.Data.Set(&v)
}
// SetDataNil sets the value for Data to be an explicit nil
func (o *ContractCallRequest) SetDataNil() {
	o.Data.Set(nil)
}

// UnsetData ensures that no value is present for Data, not even an explicit nil
func (o *ContractCallRequest) UnsetData() {
	o.Data.Unset()
}

// GetEstimate returns the Estimate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractCallRequest) GetEstimate() bool {
	if o == nil || IsNil(o.Estimate.Get()) {
		var ret bool
		return ret
	}
	return *o.Estimate.Get()
}

// GetEstimateOk returns a tuple with the Estimate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractCallRequest) GetEstimateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Estimate.Get(), o.Estimate.IsSet()
}

// HasEstimate returns a boolean if a field has been set.
func (o *ContractCallRequest) HasEstimate() bool {
	if o != nil && o.Estimate.IsSet() {
		return true
	}

	return false
}

// SetEstimate gets a reference to the given NullableBool and assigns it to the Estimate field.
func (o *ContractCallRequest) SetEstimate(v bool) {
	o.Estimate.Set(&v)
}
// SetEstimateNil sets the value for Estimate to be an explicit nil
func (o *ContractCallRequest) SetEstimateNil() {
	o.Estimate.Set(nil)
}

// UnsetEstimate ensures that no value is present for Estimate, not even an explicit nil
func (o *ContractCallRequest) UnsetEstimate() {
	o.Estimate.Unset()
}

// GetFrom returns the From field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractCallRequest) GetFrom() *os.File {
	if o == nil || IsNil(o.From.Get()) {
		var ret *os.File
		return ret
	}
	return *o.From.Get()
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractCallRequest) GetFromOk() (**os.File, bool) {
	if o == nil {
		return nil, false
	}
	return o.From.Get(), o.From.IsSet()
}

// HasFrom returns a boolean if a field has been set.
func (o *ContractCallRequest) HasFrom() bool {
	if o != nil && o.From.IsSet() {
		return true
	}

	return false
}

// SetFrom gets a reference to the given Nullable*os.File and assigns it to the From field.
func (o *ContractCallRequest) SetFrom(v *os.File) {
	o.From.Set(&v)
}
// SetFromNil sets the value for From to be an explicit nil
func (o *ContractCallRequest) SetFromNil() {
	o.From.Set(nil)
}

// UnsetFrom ensures that no value is present for From, not even an explicit nil
func (o *ContractCallRequest) UnsetFrom() {
	o.From.Unset()
}

// GetGas returns the Gas field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractCallRequest) GetGas() int64 {
	if o == nil || IsNil(o.Gas.Get()) {
		var ret int64
		return ret
	}
	return *o.Gas.Get()
}

// GetGasOk returns a tuple with the Gas field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractCallRequest) GetGasOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Gas.Get(), o.Gas.IsSet()
}

// HasGas returns a boolean if a field has been set.
func (o *ContractCallRequest) HasGas() bool {
	if o != nil && o.Gas.IsSet() {
		return true
	}

	return false
}

// SetGas gets a reference to the given NullableInt64 and assigns it to the Gas field.
func (o *ContractCallRequest) SetGas(v int64) {
	o.Gas.Set(&v)
}
// SetGasNil sets the value for Gas to be an explicit nil
func (o *ContractCallRequest) SetGasNil() {
	o.Gas.Set(nil)
}

// UnsetGas ensures that no value is present for Gas, not even an explicit nil
func (o *ContractCallRequest) UnsetGas() {
	o.Gas.Unset()
}

// GetGasPrice returns the GasPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractCallRequest) GetGasPrice() int64 {
	if o == nil || IsNil(o.GasPrice.Get()) {
		var ret int64
		return ret
	}
	return *o.GasPrice.Get()
}

// GetGasPriceOk returns a tuple with the GasPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractCallRequest) GetGasPriceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.GasPrice.Get(), o.GasPrice.IsSet()
}

// HasGasPrice returns a boolean if a field has been set.
func (o *ContractCallRequest) HasGasPrice() bool {
	if o != nil && o.GasPrice.IsSet() {
		return true
	}

	return false
}

// SetGasPrice gets a reference to the given NullableInt64 and assigns it to the GasPrice field.
func (o *ContractCallRequest) SetGasPrice(v int64) {
	o.GasPrice.Set(&v)
}
// SetGasPriceNil sets the value for GasPrice to be an explicit nil
func (o *ContractCallRequest) SetGasPriceNil() {
	o.GasPrice.Set(nil)
}

// UnsetGasPrice ensures that no value is present for GasPrice, not even an explicit nil
func (o *ContractCallRequest) UnsetGasPrice() {
	o.GasPrice.Unset()
}

// GetTo returns the To field value
func (o *ContractCallRequest) GetTo() *os.File {
	if o == nil {
		var ret *os.File
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *ContractCallRequest) GetToOk() (**os.File, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *ContractCallRequest) SetTo(v *os.File) {
	o.To = v
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractCallRequest) GetValue() int64 {
	if o == nil || IsNil(o.Value.Get()) {
		var ret int64
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractCallRequest) GetValueOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *ContractCallRequest) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableInt64 and assigns it to the Value field.
func (o *ContractCallRequest) SetValue(v int64) {
	o.Value.Set(&v)
}
// SetValueNil sets the value for Value to be an explicit nil
func (o *ContractCallRequest) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *ContractCallRequest) UnsetValue() {
	o.Value.Unset()
}

func (o ContractCallRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractCallRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Block.IsSet() {
		toSerialize["block"] = o.Block.Get()
	}
	if o.Data.IsSet() {
		toSerialize["data"] = o.Data.Get()
	}
	if o.Estimate.IsSet() {
		toSerialize["estimate"] = o.Estimate.Get()
	}
	if o.From.IsSet() {
		toSerialize["from"] = o.From.Get()
	}
	if o.Gas.IsSet() {
		toSerialize["gas"] = o.Gas.Get()
	}
	if o.GasPrice.IsSet() {
		toSerialize["gasPrice"] = o.GasPrice.Get()
	}
	toSerialize["to"] = o.To
	if o.Value.IsSet() {
		toSerialize["value"] = o.Value.Get()
	}
	return toSerialize, nil
}

type NullableContractCallRequest struct {
	value *ContractCallRequest
	isSet bool
}

func (v NullableContractCallRequest) Get() *ContractCallRequest {
	return v.value
}

func (v *NullableContractCallRequest) Set(val *ContractCallRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableContractCallRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableContractCallRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractCallRequest(val *ContractCallRequest) *NullableContractCallRequest {
	return &NullableContractCallRequest{value: val, isSet: true}
}

func (v NullableContractCallRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractCallRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


