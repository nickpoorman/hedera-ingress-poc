/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
	"os"
)

// checks if the ContractResultStateChange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractResultStateChange{}

// ContractResultStateChange struct for ContractResultStateChange
type ContractResultStateChange struct {
	// A network entity encoded as an EVM address in hex.
	Address **os.File `json:"address,omitempty"`
	// Network entity ID in the format of `shard.realm.num`
	ContractId NullableString `json:"contract_id,omitempty"`
	// The hex encoded storage slot changed.
	Slot **os.File `json:"slot,omitempty"`
	// The hex encoded value read from the storage slot.
	ValueRead **os.File `json:"value_read,omitempty"`
	// The hex encoded value written to the slot. `null` implies no value written.
	ValueWritten Nullable*os.File `json:"value_written,omitempty"`
}

// NewContractResultStateChange instantiates a new ContractResultStateChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractResultStateChange() *ContractResultStateChange {
	this := ContractResultStateChange{}
	return &this
}

// NewContractResultStateChangeWithDefaults instantiates a new ContractResultStateChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractResultStateChangeWithDefaults() *ContractResultStateChange {
	this := ContractResultStateChange{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *ContractResultStateChange) GetAddress() *os.File {
	if o == nil || IsNil(o.Address) {
		var ret *os.File
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractResultStateChange) GetAddressOk() (**os.File, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *ContractResultStateChange) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given *os.File and assigns it to the Address field.
func (o *ContractResultStateChange) SetAddress(v *os.File) {
	o.Address = &v
}

// GetContractId returns the ContractId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractResultStateChange) GetContractId() string {
	if o == nil || IsNil(o.ContractId.Get()) {
		var ret string
		return ret
	}
	return *o.ContractId.Get()
}

// GetContractIdOk returns a tuple with the ContractId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractResultStateChange) GetContractIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContractId.Get(), o.ContractId.IsSet()
}

// HasContractId returns a boolean if a field has been set.
func (o *ContractResultStateChange) HasContractId() bool {
	if o != nil && o.ContractId.IsSet() {
		return true
	}

	return false
}

// SetContractId gets a reference to the given NullableString and assigns it to the ContractId field.
func (o *ContractResultStateChange) SetContractId(v string) {
	o.ContractId.Set(&v)
}
// SetContractIdNil sets the value for ContractId to be an explicit nil
func (o *ContractResultStateChange) SetContractIdNil() {
	o.ContractId.Set(nil)
}

// UnsetContractId ensures that no value is present for ContractId, not even an explicit nil
func (o *ContractResultStateChange) UnsetContractId() {
	o.ContractId.Unset()
}

// GetSlot returns the Slot field value if set, zero value otherwise.
func (o *ContractResultStateChange) GetSlot() *os.File {
	if o == nil || IsNil(o.Slot) {
		var ret *os.File
		return ret
	}
	return *o.Slot
}

// GetSlotOk returns a tuple with the Slot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractResultStateChange) GetSlotOk() (**os.File, bool) {
	if o == nil || IsNil(o.Slot) {
		return nil, false
	}
	return o.Slot, true
}

// HasSlot returns a boolean if a field has been set.
func (o *ContractResultStateChange) HasSlot() bool {
	if o != nil && !IsNil(o.Slot) {
		return true
	}

	return false
}

// SetSlot gets a reference to the given *os.File and assigns it to the Slot field.
func (o *ContractResultStateChange) SetSlot(v *os.File) {
	o.Slot = &v
}

// GetValueRead returns the ValueRead field value if set, zero value otherwise.
func (o *ContractResultStateChange) GetValueRead() *os.File {
	if o == nil || IsNil(o.ValueRead) {
		var ret *os.File
		return ret
	}
	return *o.ValueRead
}

// GetValueReadOk returns a tuple with the ValueRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractResultStateChange) GetValueReadOk() (**os.File, bool) {
	if o == nil || IsNil(o.ValueRead) {
		return nil, false
	}
	return o.ValueRead, true
}

// HasValueRead returns a boolean if a field has been set.
func (o *ContractResultStateChange) HasValueRead() bool {
	if o != nil && !IsNil(o.ValueRead) {
		return true
	}

	return false
}

// SetValueRead gets a reference to the given *os.File and assigns it to the ValueRead field.
func (o *ContractResultStateChange) SetValueRead(v *os.File) {
	o.ValueRead = &v
}

// GetValueWritten returns the ValueWritten field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractResultStateChange) GetValueWritten() *os.File {
	if o == nil || IsNil(o.ValueWritten.Get()) {
		var ret *os.File
		return ret
	}
	return *o.ValueWritten.Get()
}

// GetValueWrittenOk returns a tuple with the ValueWritten field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractResultStateChange) GetValueWrittenOk() (**os.File, bool) {
	if o == nil {
		return nil, false
	}
	return o.ValueWritten.Get(), o.ValueWritten.IsSet()
}

// HasValueWritten returns a boolean if a field has been set.
func (o *ContractResultStateChange) HasValueWritten() bool {
	if o != nil && o.ValueWritten.IsSet() {
		return true
	}

	return false
}

// SetValueWritten gets a reference to the given Nullable*os.File and assigns it to the ValueWritten field.
func (o *ContractResultStateChange) SetValueWritten(v *os.File) {
	o.ValueWritten.Set(&v)
}
// SetValueWrittenNil sets the value for ValueWritten to be an explicit nil
func (o *ContractResultStateChange) SetValueWrittenNil() {
	o.ValueWritten.Set(nil)
}

// UnsetValueWritten ensures that no value is present for ValueWritten, not even an explicit nil
func (o *ContractResultStateChange) UnsetValueWritten() {
	o.ValueWritten.Unset()
}

func (o ContractResultStateChange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractResultStateChange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if o.ContractId.IsSet() {
		toSerialize["contract_id"] = o.ContractId.Get()
	}
	if !IsNil(o.Slot) {
		toSerialize["slot"] = o.Slot
	}
	if !IsNil(o.ValueRead) {
		toSerialize["value_read"] = o.ValueRead
	}
	if o.ValueWritten.IsSet() {
		toSerialize["value_written"] = o.ValueWritten.Get()
	}
	return toSerialize, nil
}

type NullableContractResultStateChange struct {
	value *ContractResultStateChange
	isSet bool
}

func (v NullableContractResultStateChange) Get() *ContractResultStateChange {
	return v.value
}

func (v *NullableContractResultStateChange) Set(val *ContractResultStateChange) {
	v.value = val
	v.isSet = true
}

func (v NullableContractResultStateChange) IsSet() bool {
	return v.isSet
}

func (v *NullableContractResultStateChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractResultStateChange(val *ContractResultStateChange) *NullableContractResultStateChange {
	return &NullableContractResultStateChange{value: val, isSet: true}
}

func (v NullableContractResultStateChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractResultStateChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


