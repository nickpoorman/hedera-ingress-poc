/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
)

// checks if the ChunkInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChunkInfo{}

// ChunkInfo struct for ChunkInfo
type ChunkInfo struct {
	InitialTransactionId *TransactionId `json:"initial_transaction_id,omitempty"`
	Number *int32 `json:"number,omitempty"`
	Total *int32 `json:"total,omitempty"`
}

// NewChunkInfo instantiates a new ChunkInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChunkInfo() *ChunkInfo {
	this := ChunkInfo{}
	return &this
}

// NewChunkInfoWithDefaults instantiates a new ChunkInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChunkInfoWithDefaults() *ChunkInfo {
	this := ChunkInfo{}
	return &this
}

// GetInitialTransactionId returns the InitialTransactionId field value if set, zero value otherwise.
func (o *ChunkInfo) GetInitialTransactionId() TransactionId {
	if o == nil || IsNil(o.InitialTransactionId) {
		var ret TransactionId
		return ret
	}
	return *o.InitialTransactionId
}

// GetInitialTransactionIdOk returns a tuple with the InitialTransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChunkInfo) GetInitialTransactionIdOk() (*TransactionId, bool) {
	if o == nil || IsNil(o.InitialTransactionId) {
		return nil, false
	}
	return o.InitialTransactionId, true
}

// HasInitialTransactionId returns a boolean if a field has been set.
func (o *ChunkInfo) HasInitialTransactionId() bool {
	if o != nil && !IsNil(o.InitialTransactionId) {
		return true
	}

	return false
}

// SetInitialTransactionId gets a reference to the given TransactionId and assigns it to the InitialTransactionId field.
func (o *ChunkInfo) SetInitialTransactionId(v TransactionId) {
	o.InitialTransactionId = &v
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *ChunkInfo) GetNumber() int32 {
	if o == nil || IsNil(o.Number) {
		var ret int32
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChunkInfo) GetNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.Number) {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *ChunkInfo) HasNumber() bool {
	if o != nil && !IsNil(o.Number) {
		return true
	}

	return false
}

// SetNumber gets a reference to the given int32 and assigns it to the Number field.
func (o *ChunkInfo) SetNumber(v int32) {
	o.Number = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *ChunkInfo) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChunkInfo) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *ChunkInfo) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *ChunkInfo) SetTotal(v int32) {
	o.Total = &v
}

func (o ChunkInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChunkInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InitialTransactionId) {
		toSerialize["initial_transaction_id"] = o.InitialTransactionId
	}
	if !IsNil(o.Number) {
		toSerialize["number"] = o.Number
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	return toSerialize, nil
}

type NullableChunkInfo struct {
	value *ChunkInfo
	isSet bool
}

func (v NullableChunkInfo) Get() *ChunkInfo {
	return v.value
}

func (v *NullableChunkInfo) Set(val *ChunkInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableChunkInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableChunkInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChunkInfo(val *ChunkInfo) *NullableChunkInfo {
	return &NullableChunkInfo{value: val, isSet: true}
}

func (v NullableChunkInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChunkInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


