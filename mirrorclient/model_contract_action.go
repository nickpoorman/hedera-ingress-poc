/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
	"os"
)

// checks if the ContractAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractAction{}

// ContractAction struct for ContractAction
type ContractAction struct {
	// The nesting depth of the call
	CallDepth *int32 `json:"call_depth,omitempty"`
	// The type of the call operation
	CallOperationType *string `json:"call_operation_type,omitempty"`
	// The type of the call
	CallType *string `json:"call_type,omitempty"`
	// Network entity ID in the format of `shard.realm.num`
	Caller NullableString `json:"caller,omitempty"`
	// The entity type of the caller
	CallerType *string `json:"caller_type,omitempty"`
	// The EVM address of the caller
	From *string `json:"from,omitempty"`
	// Gas cost in tinybars
	Gas *int64 `json:"gas,omitempty"`
	// Gas used in tinybars
	GasUsed *int64 `json:"gas_used,omitempty"`
	// The position of the action within the ordered list of actions
	Index *int32 `json:"index,omitempty"`
	// The hex encoded input data
	Input NullableString `json:"input,omitempty"`
	// Network entity ID in the format of `shard.realm.num`
	Recipient NullableString `json:"recipient,omitempty"`
	// The entity type of the recipient
	RecipientType NullableString `json:"recipient_type,omitempty"`
	// The hex encoded result data
	ResultData NullableString `json:"result_data,omitempty"`
	// The type of the result data
	ResultDataType *string `json:"result_data_type,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
	// A network entity encoded as an EVM address in hex.
	To Nullable*os.File `json:"to,omitempty"`
	// The value of the transaction in tinybars
	Value *int64 `json:"value,omitempty"`
}

// NewContractAction instantiates a new ContractAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractAction() *ContractAction {
	this := ContractAction{}
	return &this
}

// NewContractActionWithDefaults instantiates a new ContractAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractActionWithDefaults() *ContractAction {
	this := ContractAction{}
	return &this
}

// GetCallDepth returns the CallDepth field value if set, zero value otherwise.
func (o *ContractAction) GetCallDepth() int32 {
	if o == nil || IsNil(o.CallDepth) {
		var ret int32
		return ret
	}
	return *o.CallDepth
}

// GetCallDepthOk returns a tuple with the CallDepth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetCallDepthOk() (*int32, bool) {
	if o == nil || IsNil(o.CallDepth) {
		return nil, false
	}
	return o.CallDepth, true
}

// HasCallDepth returns a boolean if a field has been set.
func (o *ContractAction) HasCallDepth() bool {
	if o != nil && !IsNil(o.CallDepth) {
		return true
	}

	return false
}

// SetCallDepth gets a reference to the given int32 and assigns it to the CallDepth field.
func (o *ContractAction) SetCallDepth(v int32) {
	o.CallDepth = &v
}

// GetCallOperationType returns the CallOperationType field value if set, zero value otherwise.
func (o *ContractAction) GetCallOperationType() string {
	if o == nil || IsNil(o.CallOperationType) {
		var ret string
		return ret
	}
	return *o.CallOperationType
}

// GetCallOperationTypeOk returns a tuple with the CallOperationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetCallOperationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CallOperationType) {
		return nil, false
	}
	return o.CallOperationType, true
}

// HasCallOperationType returns a boolean if a field has been set.
func (o *ContractAction) HasCallOperationType() bool {
	if o != nil && !IsNil(o.CallOperationType) {
		return true
	}

	return false
}

// SetCallOperationType gets a reference to the given string and assigns it to the CallOperationType field.
func (o *ContractAction) SetCallOperationType(v string) {
	o.CallOperationType = &v
}

// GetCallType returns the CallType field value if set, zero value otherwise.
func (o *ContractAction) GetCallType() string {
	if o == nil || IsNil(o.CallType) {
		var ret string
		return ret
	}
	return *o.CallType
}

// GetCallTypeOk returns a tuple with the CallType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetCallTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CallType) {
		return nil, false
	}
	return o.CallType, true
}

// HasCallType returns a boolean if a field has been set.
func (o *ContractAction) HasCallType() bool {
	if o != nil && !IsNil(o.CallType) {
		return true
	}

	return false
}

// SetCallType gets a reference to the given string and assigns it to the CallType field.
func (o *ContractAction) SetCallType(v string) {
	o.CallType = &v
}

// GetCaller returns the Caller field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractAction) GetCaller() string {
	if o == nil || IsNil(o.Caller.Get()) {
		var ret string
		return ret
	}
	return *o.Caller.Get()
}

// GetCallerOk returns a tuple with the Caller field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractAction) GetCallerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Caller.Get(), o.Caller.IsSet()
}

// HasCaller returns a boolean if a field has been set.
func (o *ContractAction) HasCaller() bool {
	if o != nil && o.Caller.IsSet() {
		return true
	}

	return false
}

// SetCaller gets a reference to the given NullableString and assigns it to the Caller field.
func (o *ContractAction) SetCaller(v string) {
	o.Caller.Set(&v)
}
// SetCallerNil sets the value for Caller to be an explicit nil
func (o *ContractAction) SetCallerNil() {
	o.Caller.Set(nil)
}

// UnsetCaller ensures that no value is present for Caller, not even an explicit nil
func (o *ContractAction) UnsetCaller() {
	o.Caller.Unset()
}

// GetCallerType returns the CallerType field value if set, zero value otherwise.
func (o *ContractAction) GetCallerType() string {
	if o == nil || IsNil(o.CallerType) {
		var ret string
		return ret
	}
	return *o.CallerType
}

// GetCallerTypeOk returns a tuple with the CallerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetCallerTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CallerType) {
		return nil, false
	}
	return o.CallerType, true
}

// HasCallerType returns a boolean if a field has been set.
func (o *ContractAction) HasCallerType() bool {
	if o != nil && !IsNil(o.CallerType) {
		return true
	}

	return false
}

// SetCallerType gets a reference to the given string and assigns it to the CallerType field.
func (o *ContractAction) SetCallerType(v string) {
	o.CallerType = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *ContractAction) GetFrom() string {
	if o == nil || IsNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetFromOk() (*string, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *ContractAction) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *ContractAction) SetFrom(v string) {
	o.From = &v
}

// GetGas returns the Gas field value if set, zero value otherwise.
func (o *ContractAction) GetGas() int64 {
	if o == nil || IsNil(o.Gas) {
		var ret int64
		return ret
	}
	return *o.Gas
}

// GetGasOk returns a tuple with the Gas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetGasOk() (*int64, bool) {
	if o == nil || IsNil(o.Gas) {
		return nil, false
	}
	return o.Gas, true
}

// HasGas returns a boolean if a field has been set.
func (o *ContractAction) HasGas() bool {
	if o != nil && !IsNil(o.Gas) {
		return true
	}

	return false
}

// SetGas gets a reference to the given int64 and assigns it to the Gas field.
func (o *ContractAction) SetGas(v int64) {
	o.Gas = &v
}

// GetGasUsed returns the GasUsed field value if set, zero value otherwise.
func (o *ContractAction) GetGasUsed() int64 {
	if o == nil || IsNil(o.GasUsed) {
		var ret int64
		return ret
	}
	return *o.GasUsed
}

// GetGasUsedOk returns a tuple with the GasUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetGasUsedOk() (*int64, bool) {
	if o == nil || IsNil(o.GasUsed) {
		return nil, false
	}
	return o.GasUsed, true
}

// HasGasUsed returns a boolean if a field has been set.
func (o *ContractAction) HasGasUsed() bool {
	if o != nil && !IsNil(o.GasUsed) {
		return true
	}

	return false
}

// SetGasUsed gets a reference to the given int64 and assigns it to the GasUsed field.
func (o *ContractAction) SetGasUsed(v int64) {
	o.GasUsed = &v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *ContractAction) GetIndex() int32 {
	if o == nil || IsNil(o.Index) {
		var ret int32
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *ContractAction) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int32 and assigns it to the Index field.
func (o *ContractAction) SetIndex(v int32) {
	o.Index = &v
}

// GetInput returns the Input field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractAction) GetInput() string {
	if o == nil || IsNil(o.Input.Get()) {
		var ret string
		return ret
	}
	return *o.Input.Get()
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractAction) GetInputOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Input.Get(), o.Input.IsSet()
}

// HasInput returns a boolean if a field has been set.
func (o *ContractAction) HasInput() bool {
	if o != nil && o.Input.IsSet() {
		return true
	}

	return false
}

// SetInput gets a reference to the given NullableString and assigns it to the Input field.
func (o *ContractAction) SetInput(v string) {
	o.Input.Set(&v)
}
// SetInputNil sets the value for Input to be an explicit nil
func (o *ContractAction) SetInputNil() {
	o.Input.Set(nil)
}

// UnsetInput ensures that no value is present for Input, not even an explicit nil
func (o *ContractAction) UnsetInput() {
	o.Input.Unset()
}

// GetRecipient returns the Recipient field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractAction) GetRecipient() string {
	if o == nil || IsNil(o.Recipient.Get()) {
		var ret string
		return ret
	}
	return *o.Recipient.Get()
}

// GetRecipientOk returns a tuple with the Recipient field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractAction) GetRecipientOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Recipient.Get(), o.Recipient.IsSet()
}

// HasRecipient returns a boolean if a field has been set.
func (o *ContractAction) HasRecipient() bool {
	if o != nil && o.Recipient.IsSet() {
		return true
	}

	return false
}

// SetRecipient gets a reference to the given NullableString and assigns it to the Recipient field.
func (o *ContractAction) SetRecipient(v string) {
	o.Recipient.Set(&v)
}
// SetRecipientNil sets the value for Recipient to be an explicit nil
func (o *ContractAction) SetRecipientNil() {
	o.Recipient.Set(nil)
}

// UnsetRecipient ensures that no value is present for Recipient, not even an explicit nil
func (o *ContractAction) UnsetRecipient() {
	o.Recipient.Unset()
}

// GetRecipientType returns the RecipientType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractAction) GetRecipientType() string {
	if o == nil || IsNil(o.RecipientType.Get()) {
		var ret string
		return ret
	}
	return *o.RecipientType.Get()
}

// GetRecipientTypeOk returns a tuple with the RecipientType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractAction) GetRecipientTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecipientType.Get(), o.RecipientType.IsSet()
}

// HasRecipientType returns a boolean if a field has been set.
func (o *ContractAction) HasRecipientType() bool {
	if o != nil && o.RecipientType.IsSet() {
		return true
	}

	return false
}

// SetRecipientType gets a reference to the given NullableString and assigns it to the RecipientType field.
func (o *ContractAction) SetRecipientType(v string) {
	o.RecipientType.Set(&v)
}
// SetRecipientTypeNil sets the value for RecipientType to be an explicit nil
func (o *ContractAction) SetRecipientTypeNil() {
	o.RecipientType.Set(nil)
}

// UnsetRecipientType ensures that no value is present for RecipientType, not even an explicit nil
func (o *ContractAction) UnsetRecipientType() {
	o.RecipientType.Unset()
}

// GetResultData returns the ResultData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractAction) GetResultData() string {
	if o == nil || IsNil(o.ResultData.Get()) {
		var ret string
		return ret
	}
	return *o.ResultData.Get()
}

// GetResultDataOk returns a tuple with the ResultData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractAction) GetResultDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResultData.Get(), o.ResultData.IsSet()
}

// HasResultData returns a boolean if a field has been set.
func (o *ContractAction) HasResultData() bool {
	if o != nil && o.ResultData.IsSet() {
		return true
	}

	return false
}

// SetResultData gets a reference to the given NullableString and assigns it to the ResultData field.
func (o *ContractAction) SetResultData(v string) {
	o.ResultData.Set(&v)
}
// SetResultDataNil sets the value for ResultData to be an explicit nil
func (o *ContractAction) SetResultDataNil() {
	o.ResultData.Set(nil)
}

// UnsetResultData ensures that no value is present for ResultData, not even an explicit nil
func (o *ContractAction) UnsetResultData() {
	o.ResultData.Unset()
}

// GetResultDataType returns the ResultDataType field value if set, zero value otherwise.
func (o *ContractAction) GetResultDataType() string {
	if o == nil || IsNil(o.ResultDataType) {
		var ret string
		return ret
	}
	return *o.ResultDataType
}

// GetResultDataTypeOk returns a tuple with the ResultDataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetResultDataTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResultDataType) {
		return nil, false
	}
	return o.ResultDataType, true
}

// HasResultDataType returns a boolean if a field has been set.
func (o *ContractAction) HasResultDataType() bool {
	if o != nil && !IsNil(o.ResultDataType) {
		return true
	}

	return false
}

// SetResultDataType gets a reference to the given string and assigns it to the ResultDataType field.
func (o *ContractAction) SetResultDataType(v string) {
	o.ResultDataType = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *ContractAction) GetTimestamp() string {
	if o == nil || IsNil(o.Timestamp) {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *ContractAction) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *ContractAction) SetTimestamp(v string) {
	o.Timestamp = &v
}

// GetTo returns the To field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContractAction) GetTo() *os.File {
	if o == nil || IsNil(o.To.Get()) {
		var ret *os.File
		return ret
	}
	return *o.To.Get()
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractAction) GetToOk() (**os.File, bool) {
	if o == nil {
		return nil, false
	}
	return o.To.Get(), o.To.IsSet()
}

// HasTo returns a boolean if a field has been set.
func (o *ContractAction) HasTo() bool {
	if o != nil && o.To.IsSet() {
		return true
	}

	return false
}

// SetTo gets a reference to the given Nullable*os.File and assigns it to the To field.
func (o *ContractAction) SetTo(v *os.File) {
	o.To.Set(&v)
}
// SetToNil sets the value for To to be an explicit nil
func (o *ContractAction) SetToNil() {
	o.To.Set(nil)
}

// UnsetTo ensures that no value is present for To, not even an explicit nil
func (o *ContractAction) UnsetTo() {
	o.To.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ContractAction) GetValue() int64 {
	if o == nil || IsNil(o.Value) {
		var ret int64
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetValueOk() (*int64, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ContractAction) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given int64 and assigns it to the Value field.
func (o *ContractAction) SetValue(v int64) {
	o.Value = &v
}

func (o ContractAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CallDepth) {
		toSerialize["call_depth"] = o.CallDepth
	}
	if !IsNil(o.CallOperationType) {
		toSerialize["call_operation_type"] = o.CallOperationType
	}
	if !IsNil(o.CallType) {
		toSerialize["call_type"] = o.CallType
	}
	if o.Caller.IsSet() {
		toSerialize["caller"] = o.Caller.Get()
	}
	if !IsNil(o.CallerType) {
		toSerialize["caller_type"] = o.CallerType
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.Gas) {
		toSerialize["gas"] = o.Gas
	}
	if !IsNil(o.GasUsed) {
		toSerialize["gas_used"] = o.GasUsed
	}
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	if o.Input.IsSet() {
		toSerialize["input"] = o.Input.Get()
	}
	if o.Recipient.IsSet() {
		toSerialize["recipient"] = o.Recipient.Get()
	}
	if o.RecipientType.IsSet() {
		toSerialize["recipient_type"] = o.RecipientType.Get()
	}
	if o.ResultData.IsSet() {
		toSerialize["result_data"] = o.ResultData.Get()
	}
	if !IsNil(o.ResultDataType) {
		toSerialize["result_data_type"] = o.ResultDataType
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.To.IsSet() {
		toSerialize["to"] = o.To.Get()
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableContractAction struct {
	value *ContractAction
	isSet bool
}

func (v NullableContractAction) Get() *ContractAction {
	return v.value
}

func (v *NullableContractAction) Set(val *ContractAction) {
	v.value = val
	v.isSet = true
}

func (v NullableContractAction) IsSet() bool {
	return v.isSet
}

func (v *NullableContractAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractAction(val *ContractAction) *NullableContractAction {
	return &NullableContractAction{value: val, isSet: true}
}

func (v NullableContractAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


