openapi: 3.0.3
info:
  contact:
    email: mirrornode@hedera.com
    name: Hedera Mirror Node Team
    url: https://github.com/hashgraph/hedera-mirror-node
  description: |-
    The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.

    Base url: [/api/v1](/api/v1)

    OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: Hedera Mirror Node REST API
  version: 0.89.0
externalDocs:
  description: Hedera REST API Docs
  url: https://docs.hedera.com/guides/docs/mirror-node-api/cryptocurrency-api
servers:
- description: The current REST API server
  url: ""
- description: The production REST API servers
  url: "{scheme}://{network}.mirrornode.hedera.com"
  variables:
    scheme:
      default: https
      description: The URI scheme
      enum:
      - http
      - https
    network:
      default: testnet
      description: The Hedera network in use
      enum:
      - mainnet-public
      - mainnet
      - previewnet
      - testnet
tags:
- description: The accounts object represents the information associated with an account
    entity and returns a list of account information.
  externalDocs:
    url: https://docs.hedera.com/guides/docs/mirror-node-api/cryptocurrency-api#accounts
  name: accounts
- description: The balance object represents the balance of accounts on the Hedera
    network.
  externalDocs:
    url: https://docs.hedera.com/guides/docs/mirror-node-api/cryptocurrency-api#balances
  name: balances
- description: The contracts objects represents the information associated with contract
    entities.
  name: contracts
- description: The schedules object represents the information associated with a schedule
    entity.
  name: schedules
- description: The transaction object represents the transactions processed on the
    Hedera network.
  externalDocs:
    url: https://docs.hedera.com/guides/docs/mirror-node-api/cryptocurrency-api#transactions
  name: transactions
- description: The topics object represents the information associated with a topic
    entity and returns topic messages information.
  externalDocs:
    url: https://docs.hedera.com/guides/docs/mirror-node-api/cryptocurrency-api#topic-messages
  name: topics
- description: The tokens object represents the information associated with a token
    entity and returns a list of token information.
  name: tokens
paths:
  /api/v1/accounts:
    get:
      description: Returns a list of all account entity items on the network.
      operationId: listAccounts
      parameters:
      - description: The optional balance value to compare against
        examples:
          noValue:
            summary: --
            value: ""
          noOperator:
            summary: Example of equals with no operator
            value: 100
          eqOperator:
            summary: Example of equals operator
            value: eq:200
          neOperator:
            summary: Example of not equals operator
            value: ne:300
          gtOperator:
            summary: Example of greater than operator
            value: gt:400
          gteOperator:
            summary: Example of greater than or equals operator
            value: gte:500
          ltOperator:
            summary: Example of less than operator
            value: lt:600
          lteOperator:
            summary: Example of less than or equals operator
            value: lte:700
        explode: true
        in: query
        name: account.balance
        required: false
        schema:
          pattern: "^((gte?|lte?|eq|ne)\\:)?\\d{1,10}$"
          type: string
        style: form
      - description: The ID of the account to return information for
        examples:
          noValue:
            summary: --
            value: ""
          entityNumNoOperator:
            summary: Example of entityNum equals with no operator
            value: 100
          idNoOperator:
            summary: Example of id equals with no operator
            value: 0.0.100
          entityNumEqOperator:
            summary: Example of entityNum equals operator
            value: eq:200
          idEqOperator:
            summary: Example of id equals operator
            value: eq:0.0.200
          entityNumNeOperator:
            summary: Example of entityNum not equals operator
            value: ne:300
          idNeOperator:
            summary: Example of id not equals operator
            value: ne:0.0.300
          entityNumGtOperator:
            summary: Example of entityNum greater than operator
            value: gt:400
          idGtOperator:
            summary: Example of id greater than operator
            value: gt:0.0.400
          entityNumGteOperator:
            summary: Example of entityNum greater than or equals operator
            value: gte:500
          idGteOperator:
            summary: Example of id greater than or equals operator
            value: gte:0.0.500
          entityNumLtOperator:
            summary: Example of entityNum less than operator
            value: lt:600
          idLtOperator:
            summary: Example of id less than operator
            value: lt:0.0.600
          entityNumLteOperator:
            summary: Example of entityNum less than or equals operator
            value: lte:700
          idLteOperator:
            summary: Example of id less than or equals operator
            value: lte:0.0.700
        explode: true
        in: query
        name: account.id
        required: false
        schema:
          $ref: '#/components/schemas/EntityIdQuery'
        style: form
      - description: The account's public key to compare against
        example: 3c3d546321ff6f63d701d2ec5c277095874e19f4a235bee1e6bb19258bf362be
        explode: true
        in: query
        name: account.publickey
        required: false
        schema:
          type: string
        style: form
      - description: "Whether to include balance information or not. If included,\
          \ token balances are limited to at most 50 per account as outlined in HIP-367."
        example: true
        explode: true
        in: query
        name: balance
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: The maximum number of items to return
        example: 2
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 25
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The order in which items are listed
        example: desc
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: asc
          enum:
          - asc
          - desc
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsResponse'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
      summary: List account entities on network
      tags:
      - accounts
  /api/v1/accounts/{idOrAliasOrEvmAddress}:
    get:
      description: |
        Return the account transactions and balance information given an account alias, an account id, or an evm address. The information will be limited to at most 1000 token balances for the account as outlined in HIP-367.
        When the timestamp parameter is supplied, we will return transactions and account state for the relevant timestamp query. Balance information will be accurate to within 15 minutes of the provided timestamp query.
        Historical stake and reward information is not currently available so these fields contain current data. Historical ethereum nonce information is also currently not available and may not be the exact value at a provided timestamp.
      operationId: getAccountByIdOrAliasOrEvmAddress
      parameters:
      - description: Account alias or account id or evm address
        examples:
          aliasOnly:
            value: HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
          realmAlias:
            value: 0.HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
          shardRealmAlias:
            value: 0.1.HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
          accountNumOnly:
            value: 8
          realmAccountNum:
            value: 0.8
          shardRealmAccountNum:
            value: 0.0.8
          evmAddress:
            value: ac384c53f03855fa1b3616052f8ba32c6c2a2fec
          evmAddressWithPrefix:
            value: 983201903409292612713400538130315269243293806572
          evmAddressWithShardAndRealm:
            value: 0.0.ac384c53f03855fa1b3616052f8ba32c6c2a2fec
        explode: false
        in: path
        name: idOrAliasOrEvmAddress
        required: true
        schema:
          pattern: "^(\\d{1,10}\\.){0,2}(\\d{1,10}|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))$"
          type: string
        style: simple
      - description: The maximum number of items to return
        example: 2
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 25
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The order in which items are listed
        example: asc
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: The consensus timestamp in seconds.nanoseconds format with an
          optional comparison operator
        examples:
          noValue:
            summary: --
            value: ""
          secondsNoOperator:
            summary: Example of seconds equals with no operator
            value: 1234567890
          timestampNoOperator:
            summary: Example of timestamp equals with no operator
            value: 1234567890
          secondsEqOperator:
            summary: Example of seconds equals with operator
            value: eq:1234567890
          timestampEqOperator:
            summary: Example of timestamp equals with operator
            value: eq:1234567890.000000200
          secondsNeOperator:
            summary: Example of seconds not equals operator
            value: ne:1234567890
          timestampNeOperator:
            summary: Example of timestamp not equals operator
            value: ne:1234567890.000000300
          secondsGtOperator:
            summary: Example of seconds greater than operator
            value: gt:1234567890
          timestampGtOperator:
            summary: Example of timestamp greater than operator
            value: gt:1234567890.000000400
          secondsGteOperator:
            summary: Example of seconds greater than or equals operator
            value: gte:1234567890
          timestampGteOperator:
            summary: Example of timestamp greater than or equals operator
            value: gte:1234567890.000000500
          secondsLtOperator:
            summary: Example of seconds less than operator
            value: lt:1234567890
          timestampLtOperator:
            summary: Example of timestamp less than operator
            value: lt:1234567890.000000600
          secondsLteOperator:
            summary: Example of seconds less than or equals operator
            value: lte:1234567890
          timestampLteOperator:
            summary: Example of timestamp less than or equals operator
            value: lte:1234567890.000000700
        explode: true
        in: query
        name: timestamp
        required: false
        schema:
          items:
            pattern: "^((eq|gt|gte|lt|lte|ne):)?\\d{1,10}(.\\d{1,9})?$"
            type: string
          type: array
        style: form
      - example: cryptotransfer
        explode: true
        in: query
        name: transactiontype
        required: false
        schema:
          $ref: '#/components/schemas/TransactionTypes'
        style: form
      - description: If provided and set to false transactions will not be included
          in the response
        example: true
        explode: true
        in: query
        name: transactions
        required: false
        schema:
          default: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountBalanceTransactions'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
        "404":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: Not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: "Get account by alias, id, or evm address"
      tags:
      - accounts
  /api/v1/accounts/{idOrAliasOrEvmAddress}/nfts:
    get:
      description: |
        Returns information for all non-fungible tokens for an account.

        ## Ordering
        When considering NFTs, their order is governed by a combination of their numerical **token.Id** and **serialnumber** values, with **token.id** being the parent column.
        A serialnumbers value governs its order within the given token.id

        In that regard, if a user acquired a set of NFTs in the order (2-2, 2-4 1-5, 1-1, 1-3, 3-3, 3-4), the following layouts illustrate the ordering expectations for ownership listing
        1. **All NFTs in ASC order**: 1-1, 1-3, 1-5, 2-2, 2-4, 3-3, 3-4
        2. **All NFTs in DESC order**: 3-4, 3-3, 2-4, 2-2, 1-5, 1-3, 1-1
        3. **NFTs above 1-1 in ASC order**: 1-3, 1-5, 2-2, 2-4, 3-3, 3-4
        4. **NFTs below 3-3 in ASC order**: 1-1, 1-3, 1-5, 2-2, 2-4
        5. **NFTs between 1-3 and 3-3 inclusive in DESC order**: 3-4, 3-3, 2-4, 2-2, 1-5, 1-3

        Note: The default order for this API is currently DESC

        ## Filtering
        When filtering there are some restrictions enforced to ensure correctness and scalability.

        **The table below defines the restrictions and support for the NFT ownership endpoint**

        | Query Param   | Comparison Operator | Support | Description           | Example |
        | ------------- | ------------------- | ------- | --------------------- | ------- |
        | token.id      | eq                  | Y       | Single occurrence only. | ?token.id=X |
        |               | ne                  | N       | | |
        |               | lt(e)               | Y       | Single occurrence only. | ?token.id=lte:X |
        |               | gt(e)               | Y       | Single occurrence only. | ?token.id=gte:X |
        | serialnumber  | eq                  | Y       | Single occurrence only. Requires the presence of a **token.id** query | ?serialnumber=Y |
        |               | ne                  | N       | | |
        |               | lt(e)               | Y       | Single occurrence only. Requires the presence of an **lte** or **eq** **token.id** query | ?token.id=lte:X&serialnumber=lt:Y |
        |               | gt(e)               | Y       | Single occurrence only. Requires the presence of an **gte** or **eq** **token.id** query | ?token.id=gte:X&serialnumber=gt:Y |
        | spender.id    | eq                  | Y       | | ?spender.id=Z |
        |               | ne                  | N       | | |
        |               | lt(e)               | Y       | | ?spender.id=lt:Z |
        |               | gt(e)               | Y       | | ?spender.id=gt:Z |

        Note: When searching across a range for individual NFTs a **serialnumber** with an additional **token.id** query filter must be provided.
        Both filters must be a single occurrence of **gt(e)** or **lt(e)** which provide a lower and or upper boundary for search.
      operationId: listNftByAccountId
      parameters:
      - description: Account alias or account id or evm address
        examples:
          aliasOnly:
            value: HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
          realmAlias:
            value: 0.HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
          shardRealmAlias:
            value: 0.1.HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
          accountNumOnly:
            value: 8
          realmAccountNum:
            value: 0.8
          shardRealmAccountNum:
            value: 0.0.8
          evmAddress:
            value: ac384c53f03855fa1b3616052f8ba32c6c2a2fec
          evmAddressWithPrefix:
            value: 983201903409292612713400538130315269243293806572
          evmAddressWithShardAndRealm:
            value: 0.0.ac384c53f03855fa1b3616052f8ba32c6c2a2fec
        explode: false
        in: path
        name: idOrAliasOrEvmAddress
        required: true
        schema:
          pattern: "^(\\d{1,10}\\.){0,2}(\\d{1,10}|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))$"
          type: string
        style: simple
      - description: The maximum number of items to return
        example: 2
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 25
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The order in which items are listed
        example: asc
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: The nft serial number (64 bit type). Requires a tokenId value
          also be populated.
        examples:
          noValue:
            summary: --
            value: ""
          serialNumNoOperator:
            summary: Example of serialNum equals with no operator
            value: 100
          serialNumEqOperator:
            summary: Example of serialNum equals operator
            value: eq:200
          serialNumGtOperator:
            summary: Example of serialNum greater than operator
            value: gt:400
          serialNumGteOperator:
            summary: Example of serialNum greater than or equals operator
            value: gte:500
          serialNumLtOperator:
            summary: Example of serialNum less than operator
            value: lt:600
          serialNumLteOperator:
            summary: Example of serialNum less than or equals operator
            value: lte:700
        explode: true
        in: query
        name: serialnumber
        required: false
        schema:
          pattern: "^((eq|gt|gte|lt|lte):)?\\d{1,19}?$"
          type: string
        style: form
      - description: The ID of the spender to return information for
        examples:
          noValue:
            summary: --
            value: ""
          entityNumNoOperator:
            summary: Example of entityNum equals with no operator
            value: 100
          idNoOperator:
            summary: Example of id equals with no operator
            value: 0.0.100
          entityNumEqOperator:
            summary: Example of entityNum equals operator
            value: eq:200
          idEqOperator:
            summary: Example of id equals operator
            value: eq:0.0.200
          idGtOperator:
            summary: Example of id greather than operator
            value: gt:0.0.200
          idGteOperator:
            summary: Example of id greather than or equal to operator
            value: gte:0.0.200
          idLtOperator:
            summary: Example of id less than operator
            value: lt:0.0.200
          idLteOperator:
            summary: Example of id less than or equal to operator
            value: lte:0.0.200
        explode: true
        in: query
        name: spender.id
        required: false
        schema:
          $ref: '#/components/schemas/EntityIdQuery'
        style: form
      - description: The ID of the token to return information for
        examples:
          noValue:
            summary: --
            value: ""
          entityNumNoOperator:
            summary: Example of entityNum equals with no operator
            value: 100
          idNoOperator:
            summary: Example of id equals with no operator
            value: 0.0.100
          entityNumEqOperator:
            summary: Example of entityNum equals operator
            value: eq:200
          idEqOperator:
            summary: Example of id equals operator
            value: eq:0.0.200
          entityNumNeOperator:
            summary: Example of entityNum not equals operator
            value: ne:300
          idNeOperator:
            summary: Example of id not equals operator
            value: ne:0.0.300
          entityNumGtOperator:
            summary: Example of entityNum greater than operator
            value: gt:400
          idGtOperator:
            summary: Example of id greater than operator
            value: gt:0.0.400
          entityNumGteOperator:
            summary: Example of entityNum greater than or equals operator
            value: gte:500
          idGteOperator:
            summary: Example of id greater than or equals operator
            value: gte:0.0.500
          entityNumLtOperator:
            summary: Example of entityNum less than operator
            value: lt:600
          idLtOperator:
            summary: Example of id less than operator
            value: lt:0.0.600
          entityNumLteOperator:
            summary: Example of entityNum less than or equals operator
            value: lte:700
          idLteOperator:
            summary: Example of id less than or equals operator
            value: lte:0.0.700
        explode: true
        in: query
        name: token.id
        required: false
        schema:
          $ref: '#/components/schemas/EntityIdQuery'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Nfts'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
        "404":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: Not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Get nfts for an account info
      tags:
      - accounts
  /api/v1/accounts/{idOrAliasOrEvmAddress}/rewards:
    get:
      description: |
        Returns information for all past staking reward payouts for an account.
      operationId: listStakingRewardsByAccountId
      parameters:
      - description: Account alias or account id or evm address
        examples:
          aliasOnly:
            value: HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
          realmAlias:
            value: 0.HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
          shardRealmAlias:
            value: 0.1.HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
          accountNumOnly:
            value: 8
          realmAccountNum:
            value: 0.8
          shardRealmAccountNum:
            value: 0.0.8
          evmAddress:
            value: ac384c53f03855fa1b3616052f8ba32c6c2a2fec
          evmAddressWithPrefix:
            value: 983201903409292612713400538130315269243293806572
          evmAddressWithShardAndRealm:
            value: 0.0.ac384c53f03855fa1b3616052f8ba32c6c2a2fec
        explode: false
        in: path
        name: idOrAliasOrEvmAddress
        required: true
        schema:
          pattern: "^(\\d{1,10}\\.){0,2}(\\d{1,10}|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))$"
          type: string
        style: simple
      - description: The maximum number of items to return
        example: 2
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 25
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The order in which items are listed
        example: asc
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: The consensus timestamp in seconds.nanoseconds format with an
          optional comparison operator
        examples:
          noValue:
            summary: --
            value: ""
          secondsNoOperator:
            summary: Example of seconds equals with no operator
            value: 1234567890
          timestampNoOperator:
            summary: Example of timestamp equals with no operator
            value: 1234567890
          secondsEqOperator:
            summary: Example of seconds equals with operator
            value: eq:1234567890
          timestampEqOperator:
            summary: Example of timestamp equals with operator
            value: eq:1234567890.000000200
          secondsNeOperator:
            summary: Example of seconds not equals operator
            value: ne:1234567890
          timestampNeOperator:
            summary: Example of timestamp not equals operator
            value: ne:1234567890.000000300
          secondsGtOperator:
            summary: Example of seconds greater than operator
            value: gt:1234567890
          timestampGtOperator:
            summary: Example of timestamp greater than operator
            value: gt:1234567890.000000400
          secondsGteOperator:
            summary: Example of seconds greater than or equals operator
            value: gte:1234567890
          timestampGteOperator:
            summary: Example of timestamp greater than or equals operator
            value: gte:1234567890.000000500
          secondsLtOperator:
            summary: Example of seconds less than operator
            value: lt:1234567890
          timestampLtOperator:
            summary: Example of timestamp less than operator
            value: lt:1234567890.000000600
          secondsLteOperator:
            summary: Example of seconds less than or equals operator
            value: lte:1234567890
          timestampLteOperator:
            summary: Example of timestamp less than or equals operator
            value: lte:1234567890.000000700
        explode: true
        in: query
        name: timestamp
        required: false
        schema:
          items:
            pattern: "^((eq|gt|gte|lt|lte|ne):)?\\d{1,10}(.\\d{1,9})?$"
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingRewardsResponse'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
        "404":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: Not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Get past staking reward payouts for an account
      tags:
      - accounts
  /api/v1/accounts/{idOrAliasOrEvmAddress}/tokens:
    get:
      description: |
        Returns information for all token relationships for an account.
      operationId: listTokenRelationshipByAccountId
      parameters:
      - description: Account alias or account id or evm address
        examples:
          aliasOnly:
            value: HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
          realmAlias:
            value: 0.HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
          shardRealmAlias:
            value: 0.1.HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
          accountNumOnly:
            value: 8
          realmAccountNum:
            value: 0.8
          shardRealmAccountNum:
            value: 0.0.8
          evmAddress:
            value: ac384c53f03855fa1b3616052f8ba32c6c2a2fec
          evmAddressWithPrefix:
            value: 983201903409292612713400538130315269243293806572
          evmAddressWithShardAndRealm:
            value: 0.0.ac384c53f03855fa1b3616052f8ba32c6c2a2fec
        explode: false
        in: path
        name: idOrAliasOrEvmAddress
        required: true
        schema:
          pattern: "^(\\d{1,10}\\.){0,2}(\\d{1,10}|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))$"
          type: string
        style: simple
      - description: The maximum number of items to return
        example: 2
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 25
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The order in which items are listed
        example: desc
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: asc
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: The ID of the token to return information for
        examples:
          noValue:
            summary: --
            value: ""
          entityNumNoOperator:
            summary: Example of entityNum equals with no operator
            value: 100
          idNoOperator:
            summary: Example of id equals with no operator
            value: 0.0.100
          entityNumEqOperator:
            summary: Example of entityNum equals operator
            value: eq:200
          idEqOperator:
            summary: Example of id equals operator
            value: eq:0.0.200
          entityNumNeOperator:
            summary: Example of entityNum not equals operator
            value: ne:300
          idNeOperator:
            summary: Example of id not equals operator
            value: ne:0.0.300
          entityNumGtOperator:
            summary: Example of entityNum greater than operator
            value: gt:400
          idGtOperator:
            summary: Example of id greater than operator
            value: gt:0.0.400
          entityNumGteOperator:
            summary: Example of entityNum greater than or equals operator
            value: gte:500
          idGteOperator:
            summary: Example of id greater than or equals operator
            value: gte:0.0.500
          entityNumLtOperator:
            summary: Example of entityNum less than operator
            value: lt:600
          idLtOperator:
            summary: Example of id less than operator
            value: lt:0.0.600
          entityNumLteOperator:
            summary: Example of entityNum less than or equals operator
            value: lte:700
          idLteOperator:
            summary: Example of id less than or equals operator
            value: lte:0.0.700
        explode: true
        in: query
        name: token.id
        required: false
        schema:
          $ref: '#/components/schemas/EntityIdQuery'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRelationshipResponse'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
        "404":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: Not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Get token relationships info for an account
      tags:
      - accounts
  /api/v1/accounts/{idOrAliasOrEvmAddress}/allowances/crypto:
    get:
      description: Returns information for all crypto allowances for an account.
      operationId: listCryptoAllowancesByAccountId
      parameters:
      - description: Account alias or account id or evm address
        examples:
          aliasOnly:
            value: HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
          realmAlias:
            value: 0.HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
          shardRealmAlias:
            value: 0.1.HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
          accountNumOnly:
            value: 8
          realmAccountNum:
            value: 0.8
          shardRealmAccountNum:
            value: 0.0.8
          evmAddress:
            value: ac384c53f03855fa1b3616052f8ba32c6c2a2fec
          evmAddressWithPrefix:
            value: 983201903409292612713400538130315269243293806572
          evmAddressWithShardAndRealm:
            value: 0.0.ac384c53f03855fa1b3616052f8ba32c6c2a2fec
        explode: false
        in: path
        name: idOrAliasOrEvmAddress
        required: true
        schema:
          pattern: "^(\\d{1,10}\\.){0,2}(\\d{1,10}|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))$"
          type: string
        style: simple
      - description: The maximum number of items to return
        example: 2
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 25
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The order in which items are listed
        example: asc
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: The ID of the spender to return information for
        examples:
          noValue:
            summary: --
            value: ""
          entityNumNoOperator:
            summary: Example of entityNum equals with no operator
            value: 100
          idNoOperator:
            summary: Example of id equals with no operator
            value: 0.0.100
          entityNumEqOperator:
            summary: Example of entityNum equals operator
            value: eq:200
          idEqOperator:
            summary: Example of id equals operator
            value: eq:0.0.200
          idGtOperator:
            summary: Example of id greather than operator
            value: gt:0.0.200
          idGteOperator:
            summary: Example of id greather than or equal to operator
            value: gte:0.0.200
          idLtOperator:
            summary: Example of id less than operator
            value: lt:0.0.200
          idLteOperator:
            summary: Example of id less than or equal to operator
            value: lte:0.0.200
        explode: true
        in: query
        name: spender.id
        required: false
        schema:
          $ref: '#/components/schemas/EntityIdQuery'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptoAllowancesResponse'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
        "404":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: Not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Get crypto allowances for an account info
      tags:
      - accounts
  /api/v1/accounts/{idOrAliasOrEvmAddress}/allowances/tokens:
    get:
      description: |
        Returns information for fungible token allowances for an account.

        ## Ordering
        The order is governed by a combination of the spender id and the token id values, with spender id being the parent column.
        The token id value governs its order within the given spender id.

        Note: The default order for this API is currently ASC

        ## Filtering
        When filtering there are some restrictions enforced to ensure correctness and scalability.

        **The table below defines the restrictions and support for the endpoint**

        | Query Param   | Comparison Operator | Support | Description           | Example |
        | ------------- | ------------------- | ------- | --------------------- | ------- |
        | spender.id    | eq                  | Y       | Single occurrence only. | ?spender.id=X |
        |               | ne                  | N       | | |
        |               | lt(e)               | Y       | Single occurrence only. | ?spender.id=lte:X |
        |               | gt(e)               | Y       | Single occurrence only. | ?spender.id=gte:X |
        | token.id      | eq                  | Y       | Single occurrence only. Requires the presence of a **spender.id** query | ?token.id=lt:Y |
        |               | ne                  | N       | | |
        |               | lt(e)               | Y       | Single occurrence only. Requires the presence of an **lte** or **eq** **spender.id** query | ?spender.id=lte:X&token.id=lt:Y |
        |               | gt(e)               | Y       | Single occurrence only. Requires the presence of an **gte** or **eq** **spender.id** query | ?spender.id=gte:X&token.id=gt:Y |

        Both filters must be a single occurrence of **gt(e)** or **lt(e)** which provide a lower and or upper boundary for search.
      operationId: listTokenAllowancesByAccountId
      parameters:
      - description: Account alias or account id or evm address
        examples:
          aliasOnly:
            value: HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
          realmAlias:
            value: 0.HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
          shardRealmAlias:
            value: 0.1.HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
          accountNumOnly:
            value: 8
          realmAccountNum:
            value: 0.8
          shardRealmAccountNum:
            value: 0.0.8
          evmAddress:
            value: ac384c53f03855fa1b3616052f8ba32c6c2a2fec
          evmAddressWithPrefix:
            value: 983201903409292612713400538130315269243293806572
          evmAddressWithShardAndRealm:
            value: 0.0.ac384c53f03855fa1b3616052f8ba32c6c2a2fec
        explode: false
        in: path
        name: idOrAliasOrEvmAddress
        required: true
        schema:
          pattern: "^(\\d{1,10}\\.){0,2}(\\d{1,10}|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))$"
          type: string
        style: simple
      - description: The maximum number of items to return
        example: 2
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 25
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The order in which items are listed
        example: desc
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: asc
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: The ID of the spender to return information for
        examples:
          noValue:
            summary: --
            value: ""
          entityNumNoOperator:
            summary: Example of entityNum equals with no operator
            value: 100
          idNoOperator:
            summary: Example of id equals with no operator
            value: 0.0.100
          entityNumEqOperator:
            summary: Example of entityNum equals operator
            value: eq:200
          idEqOperator:
            summary: Example of id equals operator
            value: eq:0.0.200
          idGtOperator:
            summary: Example of id greather than operator
            value: gt:0.0.200
          idGteOperator:
            summary: Example of id greather than or equal to operator
            value: gte:0.0.200
          idLtOperator:
            summary: Example of id less than operator
            value: lt:0.0.200
          idLteOperator:
            summary: Example of id less than or equal to operator
            value: lte:0.0.200
        explode: true
        in: query
        name: spender.id
        required: false
        schema:
          $ref: '#/components/schemas/EntityIdQuery'
        style: form
      - description: The ID of the token to return information for
        examples:
          noValue:
            summary: --
            value: ""
          entityNumNoOperator:
            summary: Example of entityNum equals with no operator
            value: 100
          idNoOperator:
            summary: Example of id equals with no operator
            value: 0.0.100
          entityNumEqOperator:
            summary: Example of entityNum equals operator
            value: eq:200
          idEqOperator:
            summary: Example of id equals operator
            value: eq:0.0.200
          entityNumNeOperator:
            summary: Example of entityNum not equals operator
            value: ne:300
          idNeOperator:
            summary: Example of id not equals operator
            value: ne:0.0.300
          entityNumGtOperator:
            summary: Example of entityNum greater than operator
            value: gt:400
          idGtOperator:
            summary: Example of id greater than operator
            value: gt:0.0.400
          entityNumGteOperator:
            summary: Example of entityNum greater than or equals operator
            value: gte:500
          idGteOperator:
            summary: Example of id greater than or equals operator
            value: gte:0.0.500
          entityNumLtOperator:
            summary: Example of entityNum less than operator
            value: lt:600
          idLtOperator:
            summary: Example of id less than operator
            value: lt:0.0.600
          entityNumLteOperator:
            summary: Example of entityNum less than or equals operator
            value: lte:700
          idLteOperator:
            summary: Example of id less than or equals operator
            value: lte:0.0.700
        explode: true
        in: query
        name: token.id
        required: false
        schema:
          $ref: '#/components/schemas/EntityIdQuery'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenAllowancesResponse'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
        "404":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: Not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Get fungible token allowances for an account
      tags:
      - accounts
  /api/v1/balances:
    get:
      description: "Returns a timestamped list of account balances on the network,\
        \ limited to at most 50 token balances per account as outlined in HIP-367.\
        \ This includes both HBAR and token balances for accounts."
      operationId: listAccountBalances
      parameters:
      - description: Account id or account alias with no shard realm or evm address
          with no shard realm
        examples:
          aliasOnly:
            value: HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
          accountNumOnly:
            value: 8
          realmAccountNum:
            value: 0.8
          shardRealmAccountNum:
            value: 0.0.8
          evmAddress:
            value: ac384c53f03855fa1b3616052f8ba32c6c2a2fec
          evmAddressWithPrefix:
            value: 983201903409292612713400538130315269243293806572
        explode: true
        in: query
        name: account.id
        required: false
        schema:
          pattern: "^(\\d{1,10}\\.){0,2}(\\d{1,10}|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))$"
          type: string
        style: form
      - description: The optional balance value to compare against
        examples:
          noValue:
            summary: --
            value: ""
          noOperator:
            summary: Example of equals with no operator
            value: 100
          eqOperator:
            summary: Example of equals operator
            value: eq:200
          neOperator:
            summary: Example of not equals operator
            value: ne:300
          gtOperator:
            summary: Example of greater than operator
            value: gt:400
          gteOperator:
            summary: Example of greater than or equals operator
            value: gte:500
          ltOperator:
            summary: Example of less than operator
            value: lt:600
          lteOperator:
            summary: Example of less than or equals operator
            value: lte:700
        explode: true
        in: query
        name: account.balance
        required: false
        schema:
          pattern: "^((gte?|lte?|eq|ne)\\:)?\\d{1,10}$"
          type: string
        style: form
      - description: The account's public key to compare against
        example: 3c3d546321ff6f63d701d2ec5c277095874e19f4a235bee1e6bb19258bf362be
        explode: true
        in: query
        name: account.publickey
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of items to return
        example: 2
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 25
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The order in which items are listed
        example: asc
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: The consensus timestamp in seconds.nanoseconds format with an
          optional comparison operator
        examples:
          noValue:
            summary: --
            value: ""
          secondsNoOperator:
            summary: Example of seconds equals with no operator
            value: 1234567890
          timestampNoOperator:
            summary: Example of timestamp equals with no operator
            value: 1234567890
          secondsEqOperator:
            summary: Example of seconds equals with operator
            value: eq:1234567890
          timestampEqOperator:
            summary: Example of timestamp equals with operator
            value: eq:1234567890.000000200
          secondsNeOperator:
            summary: Example of seconds not equals operator
            value: ne:1234567890
          timestampNeOperator:
            summary: Example of timestamp not equals operator
            value: ne:1234567890.000000300
          secondsGtOperator:
            summary: Example of seconds greater than operator
            value: gt:1234567890
          timestampGtOperator:
            summary: Example of timestamp greater than operator
            value: gt:1234567890.000000400
          secondsGteOperator:
            summary: Example of seconds greater than or equals operator
            value: gte:1234567890
          timestampGteOperator:
            summary: Example of timestamp greater than or equals operator
            value: gte:1234567890.000000500
          secondsLtOperator:
            summary: Example of seconds less than operator
            value: lt:1234567890
          timestampLtOperator:
            summary: Example of timestamp less than operator
            value: lt:1234567890.000000600
          secondsLteOperator:
            summary: Example of seconds less than or equals operator
            value: lte:1234567890
          timestampLteOperator:
            summary: Example of timestamp less than or equals operator
            value: lte:1234567890.000000700
        explode: true
        in: query
        name: timestamp
        required: false
        schema:
          items:
            pattern: "^((eq|gt|gte|lt|lte|ne):)?\\d{1,10}(.\\d{1,9})?$"
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalancesResponse'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
      summary: List account balances
      tags:
      - balances
  /api/v1/blocks:
    get:
      description: Returns a list of blocks on the network.
      operationId: listBlocks
      parameters:
      - description: The block's number
        examples:
          noValue:
            summary: --
            value: ""
          noOperator:
            summary: Example of block.number equals with no operator
            value: 1
          eqOperator:
            summary: Example of block.number equals operator
            value: eq:2
          gtOperator:
            summary: Example of block.number greater than operator
            value: gt:3
          gteOperator:
            summary: Example of block.number greater than or equals operator
            value: gte:4
          ltOperator:
            summary: Example of block.number less than operator
            value: lt:5
          lteOperator:
            summary: Example of block.number less than or equals operator
            value: lte:6
        explode: true
        in: query
        name: block.number
        required: false
        schema:
          minimum: 0
          pattern: "^((eq|gt|gte|lt|lte):)?\\d{1,19}$"
          type: string
        style: form
      - description: The maximum number of items to return
        example: 2
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 25
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The order in which items are listed
        example: asc
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: The consensus timestamp in seconds.nanoseconds format with an
          optional comparison operator
        examples:
          noValue:
            summary: --
            value: ""
          secondsNoOperator:
            summary: Example of seconds equals with no operator
            value: 1234567890
          timestampNoOperator:
            summary: Example of timestamp equals with no operator
            value: 1234567890
          secondsEqOperator:
            summary: Example of seconds equals with operator
            value: eq:1234567890
          timestampEqOperator:
            summary: Example of timestamp equals with operator
            value: eq:1234567890.000000200
          secondsNeOperator:
            summary: Example of seconds not equals operator
            value: ne:1234567890
          timestampNeOperator:
            summary: Example of timestamp not equals operator
            value: ne:1234567890.000000300
          secondsGtOperator:
            summary: Example of seconds greater than operator
            value: gt:1234567890
          timestampGtOperator:
            summary: Example of timestamp greater than operator
            value: gt:1234567890.000000400
          secondsGteOperator:
            summary: Example of seconds greater than or equals operator
            value: gte:1234567890
          timestampGteOperator:
            summary: Example of timestamp greater than or equals operator
            value: gte:1234567890.000000500
          secondsLtOperator:
            summary: Example of seconds less than operator
            value: lt:1234567890
          timestampLtOperator:
            summary: Example of timestamp less than operator
            value: lt:1234567890.000000600
          secondsLteOperator:
            summary: Example of seconds less than or equals operator
            value: lte:1234567890
          timestampLteOperator:
            summary: Example of timestamp less than or equals operator
            value: lte:1234567890.000000700
        explode: true
        in: query
        name: timestamp
        required: false
        schema:
          items:
            pattern: "^((eq|gt|gte|lt|lte|ne):)?\\d{1,10}(.\\d{1,9})?$"
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlocksResponse'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
      summary: List blocks
      tags:
      - blocks
  /api/v1/blocks/{hashOrNumber}:
    get:
      description: Returns the block information by given hash or number.
      operationId: getByHashOrNumber
      parameters:
      - description: Accepts both eth and hedera hash format or block number
        explode: false
        in: path
        name: hashOrNumber
        required: true
        schema:
          pattern: "^(\\d{1,10}|(0x)?([A-Fa-f0-9]{64}|[A-Fa-f0-9]{96}))$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Block'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
        "404":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: Not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Get block by hash or number
      tags:
      - blocks
  /api/v1/contracts/call:
    post:
      description: |2

        Returns a result from EVM execution such as cost-free execution of read-only smart contract queries, gas estimation, and transient simulation of read-write operations. If `estimate` field is set to true gas estimation is executed. Currently we support only `latest` block.
        [Link to Supported/Unsupported Operations Table](https://github.com/hashgraph/hedera-mirror-node/blob/main/docs/web3/README.md#supported/unsupported-operations)

        The operations types which are not currently supported should return 501 error status.
      operationId: contractsCall
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractCallRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractCallResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found error
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unsupported media type error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Generic error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not implemented error
      summary: Invoke a smart contract
      tags:
      - contracts
  /api/v1/contracts:
    get:
      description: Returns a list of all contract entity items on the network.
      operationId: listContracts
      parameters:
      - description: The ID of the smart contract
        examples:
          noValue:
            summary: --
            value: ""
          entityNumNoOperator:
            summary: Example of entityNum equals with no operator
            value: 100
          idNoOperator:
            summary: Example of id equals with no operator
            value: 0.0.100
          evmAddressNoOperator:
            summary: A hex encoded EVM address with no operator.
            value: 0.0.1d8bfdc5d46dc4f61d6b6115972536ebe6a8854c
          entityNumEqOperator:
            summary: Example of entityNum equals operator
            value: eq:200
          idEqOperator:
            summary: Example of id equals operator
            value: eq:0.0.200
          entityNumNeOperator:
            summary: Example of entityNum not equals operator
            value: ne:300
          idNeOperator:
            summary: Example of id not equals operator
            value: ne:0.0.300
          entityNumGtOperator:
            summary: Example of entityNum greater than operator
            value: gt:400
          idGtOperator:
            summary: Example of id greater than operator
            value: gt:0.0.400
          entityNumGteOperator:
            summary: Example of entityNum greater than or equals operator
            value: gte:500
          idGteOperator:
            summary: Example of id greater than or equals operator
            value: gte:0.0.500
          entityNumLtOperator:
            summary: Example of entityNum less than operator
            value: lt:600
          idLtOperator:
            summary: Example of id less than operator
            value: lt:0.0.600
          entityNumLteOperator:
            summary: Example of entityNum less than or equals operator
            value: lte:700
          idLteOperator:
            summary: Example of id less than or equals operator
            value: lte:0.0.700
        explode: true
        in: query
        name: contract.id
        required: false
        schema:
          pattern: "^((gte?|lte?|eq|ne)\\:)?(\\d{1,10}\\.\\d{1,10}\\.)?\\d{1,10}|(\\\
            d{1,10}\\.){0,2}[A-Fa-f0-9]{40}$"
          type: string
        style: form
      - description: The maximum number of items to return
        example: 2
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 25
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The order in which items are listed
        example: asc
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractsResponse'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
      summary: List contract entities on network
      tags:
      - contracts
  /api/v1/contracts/{contractIdOrAddress}:
    get:
      description: Return the contract information given an id
      operationId: getContractById
      parameters:
      - description: The ID or hex encoded EVM address (with or without 0x prefix)
          associated with this contract.
        explode: false
        in: path
        name: contractIdOrAddress
        required: true
        schema:
          pattern: "^(\\d{1,10}\\.){0,2}(\\d{1,10}|(0x)?[A-Fa-f0-9]{40})$"
          type: string
        style: simple
      - description: The consensus timestamp in seconds.nanoseconds format with an
          optional comparison operator
        examples:
          noValue:
            summary: --
            value: ""
          secondsNoOperator:
            summary: Example of seconds equals with no operator
            value: 1234567890
          timestampNoOperator:
            summary: Example of timestamp equals with no operator
            value: 1234567890
          secondsEqOperator:
            summary: Example of seconds equals with operator
            value: eq:1234567890
          timestampEqOperator:
            summary: Example of timestamp equals with operator
            value: eq:1234567890.000000200
          secondsNeOperator:
            summary: Example of seconds not equals operator
            value: ne:1234567890
          timestampNeOperator:
            summary: Example of timestamp not equals operator
            value: ne:1234567890.000000300
          secondsGtOperator:
            summary: Example of seconds greater than operator
            value: gt:1234567890
          timestampGtOperator:
            summary: Example of timestamp greater than operator
            value: gt:1234567890.000000400
          secondsGteOperator:
            summary: Example of seconds greater than or equals operator
            value: gte:1234567890
          timestampGteOperator:
            summary: Example of timestamp greater than or equals operator
            value: gte:1234567890.000000500
          secondsLtOperator:
            summary: Example of seconds less than operator
            value: lt:1234567890
          timestampLtOperator:
            summary: Example of timestamp less than operator
            value: lt:1234567890.000000600
          secondsLteOperator:
            summary: Example of seconds less than or equals operator
            value: lte:1234567890
          timestampLteOperator:
            summary: Example of timestamp less than or equals operator
            value: lte:1234567890.000000700
        explode: true
        in: query
        name: timestamp
        required: false
        schema:
          items:
            pattern: "^((eq|gt|gte|lt|lte|ne):)?\\d{1,10}(.\\d{1,9})?$"
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractResponse'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
        "404":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: Not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Get contract by id
      tags:
      - contracts
  /api/v1/contracts/{contractIdOrAddress}/results:
    get:
      description: Returns a list of all ContractResults for a contract's function
        executions.
      operationId: listContractResults
      parameters:
      - description: The ID or hex encoded EVM address (with or without 0x prefix)
          associated with this contract.
        explode: false
        in: path
        name: contractIdOrAddress
        required: true
        schema:
          pattern: "^(\\d{1,10}\\.){0,2}(\\d{1,10}|(0x)?[A-Fa-f0-9]{40})$"
          type: string
        style: simple
      - description: The block's hash
        examples:
          noValue:
            summary: --
            value: ""
          "32ByteNoOperator":
            summary: Example of 32 byte block.hash equals with no operator
            value: ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
          "48ByteNoOperator":
            summary: Example of 48 byte block.hash equals with no operator
            value: 1eaf1abbd64bbcac7f473f0272671c66d3d1d64f584112b11cd4d2063e736305312fcb305804a48baa41571e71c39c61
          "32ByteEqOperator":
            summary: Example of 32 byte block.hash with equals operator
            value: eq:ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
          "48ByteEqOperator":
            summary: Example of 48 byte block.hash with equals operator
            value: eq:1eaf1abbd64bbcac7f473f0272671c66d3d1d64f584112b11cd4d2063e736305312fcb305804a48baa41571e71c39c61
          "32Byte0xPrefixNoOperator":
            summary: Example of 32 byte block.hash equals with 0x prefix and no operator
            value: 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
          "48Byte0xPrefixNoOperator":
            summary: Example of 48 byte block.hash equals with 0x prefix and no operator
            value: 0x1eaf1abbd64bbcac7f473f0272671c66d3d1d64f584112b11cd4d2063e736305312fcb305804a48baa41571e71c39c61
          "32Byte0xPrefixEqOperator":
            summary: Example of 32 byte block.hash with 0x prefix and equals operator
            value: eq:0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
          "48Byte0xPrefixEqOperator":
            summary: Example of 48 byte block.hash with 0x prefix and equals operator
            value: eq:0x1eaf1abbd64bbcac7f473f0272671c66d3d1d64f584112b11cd4d2063e736305312fcb305804a48baa41571e71c39c61
        explode: true
        in: query
        name: block.hash
        required: false
        schema:
          pattern: "^(eq:)?(0x)?([0-9A-Fa-f]{64}|[0-9A-Fa-f]{96})$"
          type: string
        style: form
      - description: The block's number
        examples:
          noValue:
            summary: --
            value: ""
          noOperator:
            summary: Example of block.number equals with no operator
            value: 1
          eqOperator:
            summary: Example of block.number equals operator
            value: eq:2
          hexEncoded:
            summary: Example of hex encoded block.number equals with no operator
            value: 0xa0
          hexEncodedEqOperator:
            summary: Example of hex encoded block.number equals with equals operator
            value: eq:0xa0
        explode: true
        in: query
        name: block.number
        required: false
        schema:
          minimum: 0
          pattern: "^(eq:)?(\\d{1,19}|0x[a-fA-f0-9]+)$"
          type: string
        style: form
      - description: Account ID or EVM address executing the contract
        explode: true
        in: query
        name: from
        required: false
        schema:
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}|(0x)?[A-Fa-f0-9]{40}$"
          type: string
        style: form
      - description: Whether to include child transactions or not
        example: true
        explode: true
        in: query
        name: internal
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: The maximum number of items to return
        example: 2
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 25
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The order in which items are listed
        example: asc
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: The consensus timestamp in seconds.nanoseconds format with an
          optional comparison operator
        examples:
          noValue:
            summary: --
            value: ""
          secondsNoOperator:
            summary: Example of seconds equals with no operator
            value: 1234567890
          timestampNoOperator:
            summary: Example of timestamp equals with no operator
            value: 1234567890
          secondsEqOperator:
            summary: Example of seconds equals with operator
            value: eq:1234567890
          timestampEqOperator:
            summary: Example of timestamp equals with operator
            value: eq:1234567890.000000200
          secondsNeOperator:
            summary: Example of seconds not equals operator
            value: ne:1234567890
          timestampNeOperator:
            summary: Example of timestamp not equals operator
            value: ne:1234567890.000000300
          secondsGtOperator:
            summary: Example of seconds greater than operator
            value: gt:1234567890
          timestampGtOperator:
            summary: Example of timestamp greater than operator
            value: gt:1234567890.000000400
          secondsGteOperator:
            summary: Example of seconds greater than or equals operator
            value: gte:1234567890
          timestampGteOperator:
            summary: Example of timestamp greater than or equals operator
            value: gte:1234567890.000000500
          secondsLtOperator:
            summary: Example of seconds less than operator
            value: lt:1234567890
          timestampLtOperator:
            summary: Example of timestamp less than operator
            value: lt:1234567890.000000600
          secondsLteOperator:
            summary: Example of seconds less than or equals operator
            value: lte:1234567890
          timestampLteOperator:
            summary: Example of timestamp less than or equals operator
            value: lte:1234567890.000000700
        explode: true
        in: query
        name: timestamp
        required: false
        schema:
          items:
            pattern: "^((eq|gt|gte|lt|lte|ne):)?\\d{1,10}(.\\d{1,9})?$"
            type: string
          type: array
        style: form
      - description: The transaction index in the block
        example: 1
        explode: true
        in: query
        name: transaction.index
        required: false
        schema:
          format: int32
          minimum: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractResultsResponse'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
      summary: List contract results from a contract on the network
      tags:
      - contracts
  /api/v1/contracts/{contractIdOrAddress}/state:
    get:
      description: "Returns a list of all contract's slots. If no timestamp is provided,\
        \ returns the current state."
      operationId: listContractState
      parameters:
      - description: The ID or hex encoded EVM address (with or without 0x prefix)
          associated with this contract.
        explode: false
        in: path
        name: contractIdOrAddress
        required: true
        schema:
          pattern: "^(\\d{1,10}\\.){0,2}(\\d{1,10}|(0x)?[A-Fa-f0-9]{40})$"
          type: string
        style: simple
      - description: The maximum number of items to return
        example: 2
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 25
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The order in which items are listed
        example: desc
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: asc
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: The slot's number
        examples:
          noValue:
            summary: --
            value: ""
          noOperator:
            summary: Example of slot equals with no operator
            value: 1
          eqOperator:
            summary: Example of slot equals operator
            value: eq:2
          gtOperator:
            summary: Example of slot gt operator
            value: gt:2
          gteOperator:
            summary: Example of slot gte operator
            value: gte:2
          ltOperator:
            summary: Example of slot lt operator
            value: lt:2
          lteOperator:
            summary: Example of slot lte operator
            value: lte:2
        explode: true
        in: query
        name: slot
        required: false
        schema:
          pattern: "^((eq|gte?|lte?)\\:)?(0x)?[0-9A-Fa-f]{1,64}$"
          type: string
        style: form
      - description: The timestamp at which the contract state is
        example: 1234567890.0000007
        explode: true
        in: query
        name: timestamp
        required: false
        schema:
          pattern: "^\\d{1,10}(.\\d{1,9})?$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractStateResponse'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
        "404":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: Not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: The contract state from a contract on the network
      tags:
      - contracts
  /api/v1/contracts/{contractIdOrAddress}/results/{timestamp}:
    get:
      description: Returns a single ContractResult for a contract's function executions
        at a specific timestamp.
      operationId: getContractResultByIdAndTimestamp
      parameters:
      - description: The ID or hex encoded EVM address (with or without 0x prefix)
          associated with this contract.
        explode: false
        in: path
        name: contractIdOrAddress
        required: true
        schema:
          pattern: "^(\\d{1,10}\\.){0,2}(\\d{1,10}|(0x)?[A-Fa-f0-9]{40})$"
          type: string
        style: simple
      - description: The timestamp at which the associated transaction reached consensus
        example: 1234567890.0000007
        explode: false
        in: path
        name: timestamp
        required: true
        schema:
          pattern: "^\\d{1,10}(.\\d{1,9})?$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractResultDetails'
          description: OK
        "206":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractResultDetails'
          description: Partial Content
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
        "404":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: Not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Get the contract result from a contract on the network executed at
        a given timestamp
      tags:
      - contracts
  /api/v1/contracts/results:
    get:
      description: Returns a list of all ContractResults for all contract's function
        executions.
      operationId: listAllContractsResults
      parameters:
      - description: Account ID or EVM address executing the contract
        explode: true
        in: query
        name: from
        required: false
        schema:
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}|(0x)?[A-Fa-f0-9]{40}$"
          type: string
        style: form
      - description: The block's hash
        examples:
          noValue:
            summary: --
            value: ""
          "32ByteNoOperator":
            summary: Example of 32 byte block.hash equals with no operator
            value: ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
          "48ByteNoOperator":
            summary: Example of 48 byte block.hash equals with no operator
            value: 1eaf1abbd64bbcac7f473f0272671c66d3d1d64f584112b11cd4d2063e736305312fcb305804a48baa41571e71c39c61
          "32ByteEqOperator":
            summary: Example of 32 byte block.hash with equals operator
            value: eq:ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
          "48ByteEqOperator":
            summary: Example of 48 byte block.hash with equals operator
            value: eq:1eaf1abbd64bbcac7f473f0272671c66d3d1d64f584112b11cd4d2063e736305312fcb305804a48baa41571e71c39c61
          "32Byte0xPrefixNoOperator":
            summary: Example of 32 byte block.hash equals with 0x prefix and no operator
            value: 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
          "48Byte0xPrefixNoOperator":
            summary: Example of 48 byte block.hash equals with 0x prefix and no operator
            value: 0x1eaf1abbd64bbcac7f473f0272671c66d3d1d64f584112b11cd4d2063e736305312fcb305804a48baa41571e71c39c61
          "32Byte0xPrefixEqOperator":
            summary: Example of 32 byte block.hash with 0x prefix and equals operator
            value: eq:0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
          "48Byte0xPrefixEqOperator":
            summary: Example of 48 byte block.hash with 0x prefix and equals operator
            value: eq:0x1eaf1abbd64bbcac7f473f0272671c66d3d1d64f584112b11cd4d2063e736305312fcb305804a48baa41571e71c39c61
        explode: true
        in: query
        name: block.hash
        required: false
        schema:
          pattern: "^(eq:)?(0x)?([0-9A-Fa-f]{64}|[0-9A-Fa-f]{96})$"
          type: string
        style: form
      - description: The block's number
        examples:
          noValue:
            summary: --
            value: ""
          noOperator:
            summary: Example of block.number equals with no operator
            value: 1
          eqOperator:
            summary: Example of block.number equals operator
            value: eq:2
          hexEncoded:
            summary: Example of hex encoded block.number equals with no operator
            value: 0xa0
          hexEncodedEqOperator:
            summary: Example of hex encoded block.number equals with equals operator
            value: eq:0xa0
        explode: true
        in: query
        name: block.number
        required: false
        schema:
          minimum: 0
          pattern: "^(eq:)?(\\d{1,19}|0x[a-fA-f0-9]+)$"
          type: string
        style: form
      - description: Whether to include child transactions or not
        example: true
        explode: true
        in: query
        name: internal
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: The maximum number of items to return
        example: 2
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 25
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The order in which items are listed
        example: asc
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: The consensus timestamp in seconds.nanoseconds format with an
          optional comparison operator
        examples:
          noValue:
            summary: --
            value: ""
          secondsNoOperator:
            summary: Example of seconds equals with no operator
            value: 1234567890
          timestampNoOperator:
            summary: Example of timestamp equals with no operator
            value: 1234567890
          secondsEqOperator:
            summary: Example of seconds equals with operator
            value: eq:1234567890
          timestampEqOperator:
            summary: Example of timestamp equals with operator
            value: eq:1234567890.000000200
          secondsNeOperator:
            summary: Example of seconds not equals operator
            value: ne:1234567890
          timestampNeOperator:
            summary: Example of timestamp not equals operator
            value: ne:1234567890.000000300
          secondsGtOperator:
            summary: Example of seconds greater than operator
            value: gt:1234567890
          timestampGtOperator:
            summary: Example of timestamp greater than operator
            value: gt:1234567890.000000400
          secondsGteOperator:
            summary: Example of seconds greater than or equals operator
            value: gte:1234567890
          timestampGteOperator:
            summary: Example of timestamp greater than or equals operator
            value: gte:1234567890.000000500
          secondsLtOperator:
            summary: Example of seconds less than operator
            value: lt:1234567890
          timestampLtOperator:
            summary: Example of timestamp less than operator
            value: lt:1234567890.000000600
          secondsLteOperator:
            summary: Example of seconds less than or equals operator
            value: lte:1234567890
          timestampLteOperator:
            summary: Example of timestamp less than or equals operator
            value: lte:1234567890.000000700
        explode: true
        in: query
        name: timestamp
        required: false
        schema:
          items:
            pattern: "^((eq|gt|gte|lt|lte|ne):)?\\d{1,10}(.\\d{1,9})?$"
            type: string
          type: array
        style: form
      - description: The transaction index in the block
        example: 1
        explode: true
        in: query
        name: transaction.index
        required: false
        schema:
          format: int32
          minimum: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractResultsResponse'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
      summary: List contract results from all contracts on the network
      tags:
      - contracts
  /api/v1/contracts/results/{transactionIdOrHash}:
    get:
      description: Returns a single ContractResult for a contract's function executions
        for a given transactionId or ethereum transaction hash.
      operationId: getContractResultByTransactionIdOrHash
      parameters:
      - description: Transaction Id or a 32 byte hash with optional 0x prefix
        examples:
          transactionId:
            value: 0.0.10-1234567890-000000000
          transactionHash:
            value: ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
          transactionHashWith0xPrefix:
            value: 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
        explode: false
        in: path
        name: transactionIdOrHash
        required: true
        schema:
          pattern: "^(0x)?[A-Fa-f0-9]{64}|(\\d{1,10})\\.(\\d{1,10})\\.(\\d{1,10})-(\\\
            d{1,19})-(\\d{1,9})$"
          type: string
        style: simple
      - description: Filter the query result by the nonce of the transaction. A zero
          nonce represents user submitted transactions while a non-zero nonce is generated
          by main nodes. The filter honors the last value. Default is 0 when not specified.
        example: 1
        explode: true
        in: query
        name: nonce
        required: false
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractResultDetails'
          description: OK
        "206":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractResultDetails'
          description: Partial Content
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
        "404":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: Not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Get the contract result from a contract on the network for a given
        transactionId or ethereum transaction hash
      tags:
      - contracts
  /api/v1/contracts/results/{transactionIdOrHash}/actions:
    get:
      description: Returns a list of ContractActions for a contract's function executions
        for a given transactionId or ethereum transaction hash.
      operationId: getContractActionsByTransactionIdOrHash
      parameters:
      - description: Transaction Id or a 32 byte hash with optional 0x prefix
        examples:
          transactionId:
            value: 0.0.10-1234567890-000000000
          transactionHash:
            value: ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
          transactionHashWith0xPrefix:
            value: 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
        explode: false
        in: path
        name: transactionIdOrHash
        required: true
        schema:
          pattern: "^(0x)?[A-Fa-f0-9]{64}|(\\d{1,10})\\.(\\d{1,10})\\.(\\d{1,10})-(\\\
            d{1,19})-(\\d{1,9})$"
          type: string
        style: simple
      - description: The index of a contract action
        examples:
          noValue:
            summary: --
            value: ""
          noOperator:
            summary: Example of equals with no operator
            value: 1
          eqOperator:
            summary: Example of equals operator
            value: eq:2
          gtOperator:
            summary: Example of greater than operator
            value: gt:4
          gteOperator:
            summary: Example of greater than or equals operator
            value: gte:5
          ltOperator:
            summary: Example of less than operator
            value: lt:6
          lteOperator:
            summary: Example of less than or equals operator
            value: lte:7
        explode: true
        in: query
        name: index
        required: false
        schema:
          pattern: "^((gte?|lte?|eq|ne)\\:)?\\d{1,10}$"
          type: string
        style: form
      - description: The maximum number of items to return
        example: 2
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 25
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The order in which items are listed
        example: desc
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: asc
          enum:
          - asc
          - desc
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractActionsResponse'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
        "404":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: Not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Get the contract actions from a contract on the network for a given
        transactionId or ethereum transaction hash
      tags:
      - contracts
  /api/v1/contracts/{contractIdOrAddress}/results/logs:
    get:
      description: |
        Search the logs of a specific contract across multiple contract calls. Chained logs are not
        included but can be found by calling `/api/v1/contracts/{contractId}/results/{timestamp}`
        or `/api/v1/contracts/results/{transactionId}`. When searching by topic a timestamp parameter must be supplied
        and span a time range of at most seven days.

        ## Ordering
        The order is governed by the combination of timestamp and index values. If the index param is omitted, the order is determined by the timestamp only.

        Note: The default order for this API is currently DESC

        ## Filtering
        When filtering there are some restrictions enforced to ensure correctness and scalability.

        **The table below defines the restrictions and support for the endpoint**

        | Query Param   | Comparison Operator | Support | Description           | Example |
        | ------------- | ------------------- | ------- | --------------------- | ------- |
        | index         | eq                  | Y       | Single occurrence only. Requires the presence of timestamp | ?index=X |
        |               | ne                  | N       | | |
        |               | lt(e)               | Y       | Single occurrence only. Requires the presence of timestamp | ?index=lte:X |
        |               | gt(e)               | Y       | Single occurrence only. Requires the presence of timestamp | ?index=gte:X |
        | timestamp     | eq                  | Y       | Single occurrence only. | ?timestamp=Y
        |               | ne                  | N       | | |
        |               | lt(e)               | Y       | Single occurrence only. Optional second timestamp **gt(e)** | ?timestamp=lte:Y
        |               | gt(e)               | Y       | Single occurrence only. Optional second timestamp **lt(e)** | ?timestamp=gte:Y


        Both filters must be a single occurrence of **gt(e)** or **lt(e)** which provide a lower and or upper boundary for search.
      operationId: listContractLogs
      parameters:
      - description: The ID or hex encoded EVM address (with or without 0x prefix)
          associated with this contract.
        explode: false
        in: path
        name: contractIdOrAddress
        required: true
        schema:
          pattern: "^(\\d{1,10}\\.){0,2}(\\d{1,10}|(0x)?[A-Fa-f0-9]{40})$"
          type: string
        style: simple
      - description: Contract log index
        examples:
          noValue:
            summary: --
            value: ""
          indexNoOperator:
            summary: Example of index equals with no operator
            value: 2
          indexEqOperator:
            summary: Example of index equals with operator
            value: eq:2
          indexGtOperator:
            summary: Example of index greater than operator
            value: gt:2
          indexGteOperator:
            summary: Example of index greater than or equals operator
            value: gte:2
          indexLtOperator:
            summary: Example of index less than operator
            value: lt:2
          indexLteOperator:
            summary: Example of index less than or equals operator
            value: lte:2
        explode: true
        in: query
        name: index
        required: false
        schema:
          pattern: "^((eq|gt|gte|lt|lte):)?\\d{1,10}$"
          type: string
        style: form
      - description: The maximum number of items to return
        example: 2
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 25
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The order in which items are listed
        example: asc
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: The consensus timestamp in seconds.nanoseconds format with an
          optional comparison operator
        examples:
          noValue:
            summary: --
            value: ""
          secondsNoOperator:
            summary: Example of seconds equals with no operator
            value: 1234567890
          timestampNoOperator:
            summary: Example of timestamp equals with no operator
            value: 1234567890
          secondsEqOperator:
            summary: Example of seconds equals with operator
            value: eq:1234567890
          timestampEqOperator:
            summary: Example of timestamp equals with operator
            value: eq:1234567890.000000200
          secondsNeOperator:
            summary: Example of seconds not equals operator
            value: ne:1234567890
          timestampNeOperator:
            summary: Example of timestamp not equals operator
            value: ne:1234567890.000000300
          secondsGtOperator:
            summary: Example of seconds greater than operator
            value: gt:1234567890
          timestampGtOperator:
            summary: Example of timestamp greater than operator
            value: gt:1234567890.000000400
          secondsGteOperator:
            summary: Example of seconds greater than or equals operator
            value: gte:1234567890
          timestampGteOperator:
            summary: Example of timestamp greater than or equals operator
            value: gte:1234567890.000000500
          secondsLtOperator:
            summary: Example of seconds less than operator
            value: lt:1234567890
          timestampLtOperator:
            summary: Example of timestamp less than operator
            value: lt:1234567890.000000600
          secondsLteOperator:
            summary: Example of seconds less than or equals operator
            value: lte:1234567890
          timestampLteOperator:
            summary: Example of timestamp less than or equals operator
            value: lte:1234567890.000000700
        explode: true
        in: query
        name: timestamp
        required: false
        schema:
          items:
            pattern: "^((eq|gt|gte|lt|lte|ne):)?\\d{1,10}(.\\d{1,9})?$"
            type: string
          type: array
        style: form
      - description: The first topic associated with a contract log. Requires a timestamp
          range also be populated.
        explode: true
        in: query
        name: topic0
        required: false
        schema:
          $ref: '#/components/schemas/LogTopicQueryParam'
        style: form
      - description: The second topic associated with a contract log. Requires a timestamp
          range also be populated.
        explode: true
        in: query
        name: topic1
        required: false
        schema:
          $ref: '#/components/schemas/LogTopicQueryParam'
        style: form
      - description: The third topic associated with a contract log. Requires a timestamp
          range also be populated.
        explode: true
        in: query
        name: topic2
        required: false
        schema:
          $ref: '#/components/schemas/LogTopicQueryParam'
        style: form
      - description: The fourth topic associated with a contract log. Requires a timestamp
          range also be populated.
        explode: true
        in: query
        name: topic3
        required: false
        schema:
          $ref: '#/components/schemas/LogTopicQueryParam'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractLogsResponse'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
      summary: List contract logs from a contract on the network
      tags:
      - contracts
  /api/v1/contracts/results/logs:
    get:
      description: |
        Search the logs across many contracts with multiple contract calls. Chained logs are not
        included but can be found by calling `/api/v1/contracts/{contractId}/results/{timestamp}`
        or `/api/v1/contracts/results/{transactionId}`. When searching by topic a timestamp parameter must be supplied
        and span a time range of at most seven days.

        ## Ordering
        The order is governed by the combination of timestamp and index values. If the index param is omitted, the order is determined by the timestamp only.

        Note: The default order for this API is currently DESC

        ## Filtering
        When filtering there are some restrictions enforced to ensure correctness and scalability.

        **The table below defines the restrictions and support for the endpoint**

        | Query Param   | Comparison Operator | Support | Description           | Example |
        | ------------- | ------------------- | ------- | --------------------- | ------- |
        | index         | eq                  | Y       | Single occurrence only. Requires the presence of timestamp | ?index=X |
        |               | ne                  | N       | | |
        |               | lt(e)               | Y       | Single occurrence only. Requires the presence of timestamp | ?index=lte:X |
        |               | gt(e)               | Y       | Single occurrence only. Requires the presence of timestamp | ?index=gte:X |
        | timestamp     | eq                  | Y       | Single occurrence only. | ?timestamp=Y
        |               | ne                  | N       | | |
        |               | lt(e)               | Y       | Single occurrence only. Optional second timestamp **gt(e)** | ?timestamp=lte:Y
        |               | gt(e)               | Y       | Single occurrence only. Optional second timestamp **lt(e)** | ?timestamp=gte:Y


        Both filters must be a single occurrence of **gt(e)** or **lt(e)** which provide a lower and or upper boundary for search.
      operationId: listContractsLogs
      parameters:
      - description: Contract log index
        examples:
          noValue:
            summary: --
            value: ""
          indexNoOperator:
            summary: Example of index equals with no operator
            value: 2
          indexEqOperator:
            summary: Example of index equals with operator
            value: eq:2
          indexGtOperator:
            summary: Example of index greater than operator
            value: gt:2
          indexGteOperator:
            summary: Example of index greater than or equals operator
            value: gte:2
          indexLtOperator:
            summary: Example of index less than operator
            value: lt:2
          indexLteOperator:
            summary: Example of index less than or equals operator
            value: lte:2
        explode: true
        in: query
        name: index
        required: false
        schema:
          pattern: "^((eq|gt|gte|lt|lte):)?\\d{1,10}$"
          type: string
        style: form
      - description: The maximum number of items to return
        example: 2
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 25
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The order in which items are listed
        example: asc
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: The consensus timestamp in seconds.nanoseconds format with an
          optional comparison operator
        examples:
          noValue:
            summary: --
            value: ""
          secondsNoOperator:
            summary: Example of seconds equals with no operator
            value: 1234567890
          timestampNoOperator:
            summary: Example of timestamp equals with no operator
            value: 1234567890
          secondsEqOperator:
            summary: Example of seconds equals with operator
            value: eq:1234567890
          timestampEqOperator:
            summary: Example of timestamp equals with operator
            value: eq:1234567890.000000200
          secondsNeOperator:
            summary: Example of seconds not equals operator
            value: ne:1234567890
          timestampNeOperator:
            summary: Example of timestamp not equals operator
            value: ne:1234567890.000000300
          secondsGtOperator:
            summary: Example of seconds greater than operator
            value: gt:1234567890
          timestampGtOperator:
            summary: Example of timestamp greater than operator
            value: gt:1234567890.000000400
          secondsGteOperator:
            summary: Example of seconds greater than or equals operator
            value: gte:1234567890
          timestampGteOperator:
            summary: Example of timestamp greater than or equals operator
            value: gte:1234567890.000000500
          secondsLtOperator:
            summary: Example of seconds less than operator
            value: lt:1234567890
          timestampLtOperator:
            summary: Example of timestamp less than operator
            value: lt:1234567890.000000600
          secondsLteOperator:
            summary: Example of seconds less than or equals operator
            value: lte:1234567890
          timestampLteOperator:
            summary: Example of timestamp less than or equals operator
            value: lte:1234567890.000000700
        explode: true
        in: query
        name: timestamp
        required: false
        schema:
          items:
            pattern: "^((eq|gt|gte|lt|lte|ne):)?\\d{1,10}(.\\d{1,9})?$"
            type: string
          type: array
        style: form
      - description: The first topic associated with a contract log. Requires a timestamp
          range also be populated.
        explode: true
        in: query
        name: topic0
        required: false
        schema:
          $ref: '#/components/schemas/LogTopicQueryParam'
        style: form
      - description: The second topic associated with a contract log. Requires a timestamp
          range also be populated.
        explode: true
        in: query
        name: topic1
        required: false
        schema:
          $ref: '#/components/schemas/LogTopicQueryParam'
        style: form
      - description: The third topic associated with a contract log. Requires a timestamp
          range also be populated.
        explode: true
        in: query
        name: topic2
        required: false
        schema:
          $ref: '#/components/schemas/LogTopicQueryParam'
        style: form
      - description: The fourth topic associated with a contract log. Requires a timestamp
          range also be populated.
        explode: true
        in: query
        name: topic3
        required: false
        schema:
          $ref: '#/components/schemas/LogTopicQueryParam'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractLogsResponse'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
      summary: List contracts logs across many contracts on the network
      tags:
      - contracts
  /api/v1/network/exchangerate:
    get:
      description: "Returns the network's exchange rate, current and next."
      operationId: getNetworkExchangeRate
      parameters:
      - description: The consensus timestamp in seconds.nanoseconds format with an
          optional comparison operator
        examples:
          noValue:
            summary: --
            value: ""
          secondsNoOperator:
            summary: Example of seconds equals with no operator
            value: 1234567890
          timestampNoOperator:
            summary: Example of timestamp equals with no operator
            value: 1234567890
          secondsEqOperator:
            summary: Example of seconds equals with operator
            value: eq:1234567890
          timestampEqOperator:
            summary: Example of timestamp equals with operator
            value: eq:1234567890.000000200
          secondsNeOperator:
            summary: Example of seconds not equals operator
            value: ne:1234567890
          timestampNeOperator:
            summary: Example of timestamp not equals operator
            value: ne:1234567890.000000300
          secondsGtOperator:
            summary: Example of seconds greater than operator
            value: gt:1234567890
          timestampGtOperator:
            summary: Example of timestamp greater than operator
            value: gt:1234567890.000000400
          secondsGteOperator:
            summary: Example of seconds greater than or equals operator
            value: gte:1234567890
          timestampGteOperator:
            summary: Example of timestamp greater than or equals operator
            value: gte:1234567890.000000500
          secondsLtOperator:
            summary: Example of seconds less than operator
            value: lt:1234567890
          timestampLtOperator:
            summary: Example of timestamp less than operator
            value: lt:1234567890.000000600
          secondsLteOperator:
            summary: Example of seconds less than or equals operator
            value: lte:1234567890
          timestampLteOperator:
            summary: Example of timestamp less than or equals operator
            value: lte:1234567890.000000700
        explode: true
        in: query
        name: timestamp
        required: false
        schema:
          items:
            pattern: "^((eq|gt|gte|lt|lte|ne):)?\\d{1,10}(.\\d{1,9})?$"
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkExchangeRateSetResponse'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
        "404":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: Not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Require at least 1/3 signature files to prove consensus,\
                      \ got 1 out of 4 for file 2019-10-11T13_33_25.526889Z.rcd_sig"
              schema:
                $ref: '#/components/schemas/Error'
          description: Service Unavailable
      summary: Get the network exchange rate to estimate costs
      tags:
      - network
  /api/v1/network/fees:
    get:
      description: "Returns the estimated gas in tinybars per each transaction type.\
        \ Default order is ASC. Currently only `ContractCall`, `ContractCreate` and\
        \ `EthereumTransaction` transaction types are supported."
      operationId: getNetworkFees
      parameters:
      - description: The order in which items are listed
        example: desc
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: asc
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: The consensus timestamp in seconds.nanoseconds format with an
          optional comparison operator
        examples:
          noValue:
            summary: --
            value: ""
          secondsNoOperator:
            summary: Example of seconds equals with no operator
            value: 1234567890
          timestampNoOperator:
            summary: Example of timestamp equals with no operator
            value: 1234567890
          secondsEqOperator:
            summary: Example of seconds equals with operator
            value: eq:1234567890
          timestampEqOperator:
            summary: Example of timestamp equals with operator
            value: eq:1234567890.000000200
          secondsNeOperator:
            summary: Example of seconds not equals operator
            value: ne:1234567890
          timestampNeOperator:
            summary: Example of timestamp not equals operator
            value: ne:1234567890.000000300
          secondsGtOperator:
            summary: Example of seconds greater than operator
            value: gt:1234567890
          timestampGtOperator:
            summary: Example of timestamp greater than operator
            value: gt:1234567890.000000400
          secondsGteOperator:
            summary: Example of seconds greater than or equals operator
            value: gte:1234567890
          timestampGteOperator:
            summary: Example of timestamp greater than or equals operator
            value: gte:1234567890.000000500
          secondsLtOperator:
            summary: Example of seconds less than operator
            value: lt:1234567890
          timestampLtOperator:
            summary: Example of timestamp less than operator
            value: lt:1234567890.000000600
          secondsLteOperator:
            summary: Example of seconds less than or equals operator
            value: lte:1234567890
          timestampLteOperator:
            summary: Example of timestamp less than or equals operator
            value: lte:1234567890.000000700
        explode: true
        in: query
        name: timestamp
        required: false
        schema:
          items:
            pattern: "^((eq|gt|gte|lt|lte|ne):)?\\d{1,10}(.\\d{1,9})?$"
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkFeesResponse'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
        "404":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: Not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Require at least 1/3 signature files to prove consensus,\
                      \ got 1 out of 4 for file 2019-10-11T13_33_25.526889Z.rcd_sig"
              schema:
                $ref: '#/components/schemas/Error'
          description: Service Unavailable
      summary: Get the network fees
      tags:
      - network
  /api/v1/network/nodes:
    get:
      description: Returns the network's list of nodes used in consensus
      operationId: getNetworkNodes
      parameters:
      - description: The ID of the file entity
        examples:
          noValue:
            summary: --
            value: ""
          entityNumNoOperator:
            summary: Example of entityNum equals with no operator
            value: 100
          idNoOperator:
            summary: Example of id equals with no operator
            value: 0.0.100
          entityNumEqOperator:
            summary: Example of entityNum equals operator
            value: eq:200
          idEqOperator:
            summary: Example of id equals operator
            value: eq:0.0.200
        explode: true
        in: query
        name: file.id
        required: false
        schema:
          $ref: '#/components/schemas/EntityIdQuery'
        style: form
      - description: The maximum number of items to return
        example: 2
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 25
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The ID of the node
        examples:
          noValue:
            summary: --
            value: ""
          serialNumNoOperator:
            summary: Example of nodeId equals with no operator
            value: 1
          serialNumEqOperator:
            summary: Example of nodeId equals operator
            value: eq:2
          serialNumGtOperator:
            summary: Example of nodeId greater than operator
            value: gt:3
          serialNumGteOperator:
            summary: Example of nodeId greater than or equals operator
            value: gte:4
          serialNumLtOperator:
            summary: Example of nodeId less than operator
            value: lt:5
          serialNumLteOperator:
            summary: Example of nodeId less than or equals operator
            value: lte:6
        explode: true
        in: query
        name: node.id
        required: false
        schema:
          pattern: "^((eq|gt|gte|lt|lte):)?\\d{1,19}$"
          type: string
        style: form
      - description: The order in which items are listed
        example: desc
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: asc
          enum:
          - asc
          - desc
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkNodesResponse'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
      summary: Get the network address book nodes
      tags:
      - network
  /api/v1/network/stake:
    get:
      description: Returns the network's current stake information.
      operationId: getNetworkStake
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkStakeResponse'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
        "404":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: Not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Require at least 1/3 signature files to prove consensus,\
                      \ got 1 out of 4 for file 2019-10-11T13_33_25.526889Z.rcd_sig"
              schema:
                $ref: '#/components/schemas/Error'
          description: Service Unavailable
      summary: Get network stake information
      tags:
      - network
  /api/v1/network/supply:
    get:
      description: Returns the network's released supply of hbars
      operationId: getNetworkSupply
      parameters:
      - description: The consensus timestamp in seconds.nanoseconds format with an
          optional comparison operator
        examples:
          noValue:
            summary: --
            value: ""
          secondsNoOperator:
            summary: Example of seconds equals with no operator
            value: 1234567890
          timestampNoOperator:
            summary: Example of timestamp equals with no operator
            value: 1234567890
          secondsEqOperator:
            summary: Example of seconds equals with operator
            value: eq:1234567890
          timestampEqOperator:
            summary: Example of timestamp equals with operator
            value: eq:1234567890.000000200
          secondsNeOperator:
            summary: Example of seconds not equals operator
            value: ne:1234567890
          timestampNeOperator:
            summary: Example of timestamp not equals operator
            value: ne:1234567890.000000300
          secondsGtOperator:
            summary: Example of seconds greater than operator
            value: gt:1234567890
          timestampGtOperator:
            summary: Example of timestamp greater than operator
            value: gt:1234567890.000000400
          secondsGteOperator:
            summary: Example of seconds greater than or equals operator
            value: gte:1234567890
          timestampGteOperator:
            summary: Example of timestamp greater than or equals operator
            value: gte:1234567890.000000500
          secondsLtOperator:
            summary: Example of seconds less than operator
            value: lt:1234567890
          timestampLtOperator:
            summary: Example of timestamp less than operator
            value: lt:1234567890.000000600
          secondsLteOperator:
            summary: Example of seconds less than or equals operator
            value: lte:1234567890
          timestampLteOperator:
            summary: Example of timestamp less than or equals operator
            value: lte:1234567890.000000700
        explode: true
        in: query
        name: timestamp
        required: false
        schema:
          items:
            pattern: "^((eq|gt|gte|lt|lte|ne):)?\\d{1,10}(.\\d{1,9})?$"
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkSupplyResponse'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
        "404":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: Not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Get the network supply
      tags:
      - network
  /api/v1/schedules:
    get:
      description: Lists schedules on the network that govern the execution logic
        of scheduled transactions. This includes executed and non executed schedules.
      operationId: listSchedules
      parameters:
      - description: The ID of the account to return information for
        examples:
          noValue:
            summary: --
            value: ""
          entityNumNoOperator:
            summary: Example of entityNum equals with no operator
            value: 100
          idNoOperator:
            summary: Example of id equals with no operator
            value: 0.0.100
          entityNumEqOperator:
            summary: Example of entityNum equals operator
            value: eq:200
          idEqOperator:
            summary: Example of id equals operator
            value: eq:0.0.200
          entityNumNeOperator:
            summary: Example of entityNum not equals operator
            value: ne:300
          idNeOperator:
            summary: Example of id not equals operator
            value: ne:0.0.300
          entityNumGtOperator:
            summary: Example of entityNum greater than operator
            value: gt:400
          idGtOperator:
            summary: Example of id greater than operator
            value: gt:0.0.400
          entityNumGteOperator:
            summary: Example of entityNum greater than or equals operator
            value: gte:500
          idGteOperator:
            summary: Example of id greater than or equals operator
            value: gte:0.0.500
          entityNumLtOperator:
            summary: Example of entityNum less than operator
            value: lt:600
          idLtOperator:
            summary: Example of id less than operator
            value: lt:0.0.600
          entityNumLteOperator:
            summary: Example of entityNum less than or equals operator
            value: lte:700
          idLteOperator:
            summary: Example of id less than or equals operator
            value: lte:0.0.700
        explode: true
        in: query
        name: account.id
        required: false
        schema:
          $ref: '#/components/schemas/EntityIdQuery'
        style: form
      - description: The maximum number of items to return
        example: 2
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 25
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The order in which items are listed
        example: desc
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: asc
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: The ID of the schedule to return information for
        examples:
          noValue:
            summary: --
            value: ""
          entityNumNoOperator:
            summary: Example of entityNum equals with no operator
            value: 100
          idNoOperator:
            summary: Example of id equals with no operator
            value: 0.0.100
          entityNumEqOperator:
            summary: Example of entityNum equals operator
            value: eq:200
          idEqOperator:
            summary: Example of id equals operator
            value: eq:0.0.200
          entityNumNeOperator:
            summary: Example of entityNum not equals operator
            value: ne:300
          idNeOperator:
            summary: Example of id not equals operator
            value: ne:0.0.300
          entityNumGtOperator:
            summary: Example of entityNum greater than operator
            value: gt:400
          idGtOperator:
            summary: Example of id greater than operator
            value: gt:0.0.400
          entityNumGteOperator:
            summary: Example of entityNum greater than or equals operator
            value: gte:500
          idGteOperator:
            summary: Example of id greater than or equals operator
            value: gte:0.0.500
          entityNumLtOperator:
            summary: Example of entityNum less than operator
            value: lt:600
          idLtOperator:
            summary: Example of id less than operator
            value: lt:0.0.600
          entityNumLteOperator:
            summary: Example of entityNum less than or equals operator
            value: lte:700
          idLteOperator:
            summary: Example of id less than or equals operator
            value: lte:0.0.700
        explode: true
        in: query
        name: schedule.id
        required: false
        schema:
          $ref: '#/components/schemas/EntityIdQuery'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchedulesResponse'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
      summary: List schedules entities
      tags:
      - schedules
  /api/v1/schedules/{scheduleId}:
    get:
      description: Returns schedule information based on the given schedule id
      operationId: getScheduleById
      parameters:
      - description: Schedule id
        explode: false
        in: path
        name: scheduleId
        required: true
        schema:
          $ref: '#/components/schemas/EntityId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
        "404":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: Not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Get schedule by id
      tags:
      - schedules
  /api/v1/transactions:
    get:
      description: Lists transactions on the network. This includes successful and
        unsuccessful transactions.
      operationId: listTransactions
      parameters:
      - description: The ID of the account to return information for
        examples:
          noValue:
            summary: --
            value: ""
          entityNumNoOperator:
            summary: Example of entityNum equals with no operator
            value: 100
          idNoOperator:
            summary: Example of id equals with no operator
            value: 0.0.100
          entityNumEqOperator:
            summary: Example of entityNum equals operator
            value: eq:200
          idEqOperator:
            summary: Example of id equals operator
            value: eq:0.0.200
          entityNumNeOperator:
            summary: Example of entityNum not equals operator
            value: ne:300
          idNeOperator:
            summary: Example of id not equals operator
            value: ne:0.0.300
          entityNumGtOperator:
            summary: Example of entityNum greater than operator
            value: gt:400
          idGtOperator:
            summary: Example of id greater than operator
            value: gt:0.0.400
          entityNumGteOperator:
            summary: Example of entityNum greater than or equals operator
            value: gte:500
          idGteOperator:
            summary: Example of id greater than or equals operator
            value: gte:0.0.500
          entityNumLtOperator:
            summary: Example of entityNum less than operator
            value: lt:600
          idLtOperator:
            summary: Example of id less than operator
            value: lt:0.0.600
          entityNumLteOperator:
            summary: Example of entityNum less than or equals operator
            value: lte:700
          idLteOperator:
            summary: Example of id less than or equals operator
            value: lte:0.0.700
        explode: true
        in: query
        name: account.id
        required: false
        schema:
          $ref: '#/components/schemas/EntityIdQuery'
        style: form
      - description: The maximum number of items to return
        example: 2
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 25
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The order in which items are listed
        example: asc
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: The consensus timestamp in seconds.nanoseconds format with an
          optional comparison operator
        examples:
          noValue:
            summary: --
            value: ""
          secondsNoOperator:
            summary: Example of seconds equals with no operator
            value: 1234567890
          timestampNoOperator:
            summary: Example of timestamp equals with no operator
            value: 1234567890
          secondsEqOperator:
            summary: Example of seconds equals with operator
            value: eq:1234567890
          timestampEqOperator:
            summary: Example of timestamp equals with operator
            value: eq:1234567890.000000200
          secondsNeOperator:
            summary: Example of seconds not equals operator
            value: ne:1234567890
          timestampNeOperator:
            summary: Example of timestamp not equals operator
            value: ne:1234567890.000000300
          secondsGtOperator:
            summary: Example of seconds greater than operator
            value: gt:1234567890
          timestampGtOperator:
            summary: Example of timestamp greater than operator
            value: gt:1234567890.000000400
          secondsGteOperator:
            summary: Example of seconds greater than or equals operator
            value: gte:1234567890
          timestampGteOperator:
            summary: Example of timestamp greater than or equals operator
            value: gte:1234567890.000000500
          secondsLtOperator:
            summary: Example of seconds less than operator
            value: lt:1234567890
          timestampLtOperator:
            summary: Example of timestamp less than operator
            value: lt:1234567890.000000600
          secondsLteOperator:
            summary: Example of seconds less than or equals operator
            value: lte:1234567890
          timestampLteOperator:
            summary: Example of timestamp less than or equals operator
            value: lte:1234567890.000000700
        explode: true
        in: query
        name: timestamp
        required: false
        schema:
          items:
            pattern: "^((eq|gt|gte|lt|lte|ne):)?\\d{1,10}(.\\d{1,9})?$"
            type: string
          type: array
        style: form
      - example: cryptotransfer
        explode: true
        in: query
        name: transactiontype
        required: false
        schema:
          $ref: '#/components/schemas/TransactionTypes'
        style: form
      - description: The transaction success type.
        explode: true
        in: query
        name: result
        required: false
        schema:
          enum:
          - success
          - fail
          type: string
        style: form
      - description: The transaction account balance modification type.
        explode: true
        in: query
        name: type
        required: false
        schema:
          enum:
          - credit
          - debit
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsResponse'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
      summary: List transactions
      tags:
      - transactions
  /api/v1/transactions/{transactionId}:
    get:
      description: Returns transaction information based on the given transaction
        id
      operationId: getTransactionById
      parameters:
      - description: Transaction id
        example: 0.0.10-1234567890-000000000
        explode: false
        in: path
        name: transactionId
        required: true
        schema:
          type: string
        style: simple
      - description: "Filter the query result by the nonce of the transaction. A zero\
          \ nonce represents user submitted transactions while a non-zero nonce is\
          \ generated by main nodes. The filter honors the last value. If not specified,\
          \ all transactions with specified payer account ID and valid start timestamp\
          \ match."
        example: 0
        explode: true
        in: query
        name: nonce
        required: false
        schema:
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: "Filter transactions by the scheduled flag. If true, return information\
          \ for the scheduled transaction. If false, return information for the non-scheduled\
          \ transaction. If not present, return information for all transactions matching\
          \ transactionId."
        explode: true
        in: query
        name: scheduled
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionByIdResponse'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
        "404":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: Not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Get transaction by id
      tags:
      - transactions
  /api/v1/transactions/{transactionId}/stateproof:
    get:
      description: "Returns the  contents of the address book file, signature files,\
        \ and record file that can be used to validate the transaction occurred on\
        \ the Hedera network given transaction id."
      operationId: getStateproofInfo
      parameters:
      - description: Transaction id
        example: 0.0.10-1234567890-000000000
        explode: false
        in: path
        name: transactionId
        required: true
        schema:
          type: string
        style: simple
      - description: Filter the query result by the nonce of the transaction. A zero
          nonce represents user submitted transactions while a non-zero nonce is generated
          by main nodes. The filter honors the last value. Default is 0 when not specified.
        example: 1
        explode: true
        in: query
        name: nonce
        required: false
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: "Filter transactions by the scheduled flag. If true, return information\
          \ for the scheduled transaction. If false, return information for the non-scheduled\
          \ transaction."
        explode: true
        in: query
        name: scheduled
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getStateproofInfo_200_response'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
        "404":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: Transaction not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Transaction Not Found
        "502":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Require at least 1/3 signature files to prove consensus,\
                      \ got 1 out of 4 for file 2019-10-11T13_33_25.526889Z.rcd_sig"
              schema:
                $ref: '#/components/schemas/Error'
          description: Service Unavailable
      summary: Get stateproof information
      tags:
      - transactions
  /api/v1/topics/{topicId}/messages:
    get:
      description: Returns the list of topic messages for the given topic id.
      operationId: listTopicMessagesById
      parameters:
      - description: Topic id
        explode: false
        in: path
        name: topicId
        required: true
        schema:
          $ref: '#/components/schemas/EntityId'
        style: simple
      - example: base64
        explode: true
        in: query
        name: encoding
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of items to return
        example: 2
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 25
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The order in which items are listed
        example: asc
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      - example: 2
        explode: true
        in: query
        name: sequencenumber
        required: false
        schema:
          format: int64
          minimum: 0
          type: integer
        style: form
      - description: The consensus timestamp in seconds.nanoseconds format with an
          optional comparison operator
        examples:
          noValue:
            summary: --
            value: ""
          secondsNoOperator:
            summary: Example of seconds equals with no operator
            value: 1234567890
          timestampNoOperator:
            summary: Example of timestamp equals with no operator
            value: 1234567890
          secondsEqOperator:
            summary: Example of seconds equals with operator
            value: eq:1234567890
          timestampEqOperator:
            summary: Example of timestamp equals with operator
            value: eq:1234567890.000000200
          secondsNeOperator:
            summary: Example of seconds not equals operator
            value: ne:1234567890
          timestampNeOperator:
            summary: Example of timestamp not equals operator
            value: ne:1234567890.000000300
          secondsGtOperator:
            summary: Example of seconds greater than operator
            value: gt:1234567890
          timestampGtOperator:
            summary: Example of timestamp greater than operator
            value: gt:1234567890.000000400
          secondsGteOperator:
            summary: Example of seconds greater than or equals operator
            value: gte:1234567890
          timestampGteOperator:
            summary: Example of timestamp greater than or equals operator
            value: gte:1234567890.000000500
          secondsLtOperator:
            summary: Example of seconds less than operator
            value: lt:1234567890
          timestampLtOperator:
            summary: Example of timestamp less than operator
            value: lt:1234567890.000000600
          secondsLteOperator:
            summary: Example of seconds less than or equals operator
            value: lte:1234567890
          timestampLteOperator:
            summary: Example of timestamp less than or equals operator
            value: lte:1234567890.000000700
        explode: true
        in: query
        name: timestamp
        required: false
        schema:
          items:
            pattern: "^((eq|gt|gte|lt|lte|ne):)?\\d{1,10}(.\\d{1,9})?$"
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicMessagesResponse'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
        "404":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: No such topic id - 7
              schema:
                $ref: '#/components/schemas/Error'
          description: Topic Not Found
      summary: List topic messages by id
      tags:
      - topics
  /api/v1/topics/{topicId}/messages/{sequenceNumber}:
    get:
      description: Returns a single topic message the given topic id and sequence
        number.
      operationId: getTopicMessageByIdAndSequenceNumber
      parameters:
      - description: Topic id
        explode: false
        in: path
        name: topicId
        required: true
        schema:
          $ref: '#/components/schemas/EntityId'
        style: simple
      - description: Topic message sequence number
        example: 2
        explode: false
        in: path
        name: sequenceNumber
        required: true
        schema:
          format: int64
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicMessagesResponse'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
        "404":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: Not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Get topic message by id and sequence number
      tags:
      - topics
  /api/v1/topics/messages/{timestamp}:
    get:
      description: Returns a topic message the given the consensusTimestamp.
      operationId: getTopicMessagesByConsensusTimestamp
      parameters:
      - description: The timestamp at which the associated transaction reached consensus
        example: 1234567890.0000007
        explode: false
        in: path
        name: timestamp
        required: true
        schema:
          pattern: "^\\d{1,10}(.\\d{1,9})?$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicMessage'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
        "404":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: Not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Get topic message by consensusTimestamp
      tags:
      - topics
  /api/v1/tokens:
    get:
      description: Returns a list of tokens on the network.
      operationId: listTokens
      parameters:
      - description: The ID of the account to return information for
        examples:
          noValue:
            summary: --
            value: ""
          entityNumNoOperator:
            summary: Example of entityNum equals with no operator
            value: 100
          idNoOperator:
            summary: Example of id equals with no operator
            value: 0.0.100
          entityNumEqOperator:
            summary: Example of entityNum equals operator
            value: eq:200
          idEqOperator:
            summary: Example of id equals operator
            value: eq:0.0.200
          entityNumNeOperator:
            summary: Example of entityNum not equals operator
            value: ne:300
          idNeOperator:
            summary: Example of id not equals operator
            value: ne:0.0.300
          entityNumGtOperator:
            summary: Example of entityNum greater than operator
            value: gt:400
          idGtOperator:
            summary: Example of id greater than operator
            value: gt:0.0.400
          entityNumGteOperator:
            summary: Example of entityNum greater than or equals operator
            value: gte:500
          idGteOperator:
            summary: Example of id greater than or equals operator
            value: gte:0.0.500
          entityNumLtOperator:
            summary: Example of entityNum less than operator
            value: lt:600
          idLtOperator:
            summary: Example of id less than operator
            value: lt:0.0.600
          entityNumLteOperator:
            summary: Example of entityNum less than or equals operator
            value: lte:700
          idLteOperator:
            summary: Example of id less than or equals operator
            value: lte:0.0.700
        explode: true
        in: query
        name: account.id
        required: false
        schema:
          $ref: '#/components/schemas/EntityIdQuery'
        style: form
      - description: The maximum number of items to return
        example: 2
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 25
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The order in which items are listed
        example: desc
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: asc
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: The public key to compare against
        example: 3c3d546321ff6f63d701d2ec5c277095874e19f4a235bee1e6bb19258bf362be
        explode: true
        in: query
        name: publickey
        required: false
        schema:
          type: string
        style: form
      - description: The ID of the token to return information for
        examples:
          noValue:
            summary: --
            value: ""
          entityNumNoOperator:
            summary: Example of entityNum equals with no operator
            value: 100
          idNoOperator:
            summary: Example of id equals with no operator
            value: 0.0.100
          entityNumEqOperator:
            summary: Example of entityNum equals operator
            value: eq:200
          idEqOperator:
            summary: Example of id equals operator
            value: eq:0.0.200
          entityNumNeOperator:
            summary: Example of entityNum not equals operator
            value: ne:300
          idNeOperator:
            summary: Example of id not equals operator
            value: ne:0.0.300
          entityNumGtOperator:
            summary: Example of entityNum greater than operator
            value: gt:400
          idGtOperator:
            summary: Example of id greater than operator
            value: gt:0.0.400
          entityNumGteOperator:
            summary: Example of entityNum greater than or equals operator
            value: gte:500
          idGteOperator:
            summary: Example of id greater than or equals operator
            value: gte:0.0.500
          entityNumLtOperator:
            summary: Example of entityNum less than operator
            value: lt:600
          idLtOperator:
            summary: Example of id less than operator
            value: lt:0.0.600
          entityNumLteOperator:
            summary: Example of entityNum less than or equals operator
            value: lte:700
          idLteOperator:
            summary: Example of id less than or equals operator
            value: lte:0.0.700
        explode: true
        in: query
        name: token.id
        required: false
        schema:
          $ref: '#/components/schemas/EntityIdQuery'
        style: form
      - example:
        - ALL
        - FUNGIBLE_COMMON
        - NON_FUNGIBLE_UNIQUE
        explode: true
        in: query
        name: type
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokensResponse'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
      summary: List tokens
      tags:
      - tokens
  /api/v1/tokens/{tokenId}:
    get:
      description: Returns token entity information given the id
      operationId: getTokenById
      parameters:
      - description: Token id
        explode: false
        in: path
        name: tokenId
        required: true
        schema:
          $ref: '#/components/schemas/EntityId'
        style: simple
      - examples:
          noValue:
            summary: --
            value: ""
          secondsNoOperator:
            summary: Example of seconds equals with no operator
            value: 1234567890
          timestampNoOperator:
            summary: Example of timestamp equals with no operator
            value: 1234567890
          secondsEqOperator:
            summary: Example of seconds equals with operator
            value: eq:1234567890
          timestampEqOperator:
            summary: Example of timestamp equals with operator
            value: eq:1234567890.000000200
          secondsLtOperator:
            summary: Example of seconds less than operator
            value: lt:1234567890
          timestampLtOperator:
            summary: Example of timestamp less than operator
            value: lt:1234567890.000000600
          secondsLteOperator:
            summary: Example of seconds less than or equals operator
            value: lte:1234567890
          timestampLteOperator:
            summary: Example of timestamp less than or equals operator
            value: lte:1234567890.000000700
        explode: true
        in: query
        name: timestamp
        required: false
        schema:
          pattern: "^((eq|lt|lte):)?\\d{1,10}(.\\d{1,9})?$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                FungibleToken:
                  value:
                    admin_key:
                      _type: ProtobufEncoded
                      key: 4161
                    auto_renew_account: 0.1.2
                    auto_renew_period: null
                    created_timestamp: "1234567890.000000001"
                    deleted: false
                    decimals: 1000
                    expiry_timestamp: null
                    freeze_default: false
                    freeze_key:
                      _type: ProtobufEncoded
                      key: 4161
                    initial_supply: 1000000
                    kyc_key:
                      _type: ProtobufEncoded
                      key: 4161
                    max_supply: 9223372036854776000
                    memo: token memo
                    modified_timestamp: "1234567890.000000001"
                    name: Token name
                    pause_key:
                      _type: ProtobufEncoded
                      key: 4161
                    pause_status: UNPAUSED
                    supply_key:
                      _type: ProtobufEncoded
                      key: 4161
                    supply_type: INFINITE
                    symbol: ORIGINALRDKSE
                    token_id: 0.10.1
                    total_supply: 1000000
                    treasury_account_id: 0.1.2
                    type: FUNGIBLE_COMMON
                    wipe_key:
                      _type: ProtobufEncoded
                      key: 4161
                    custom_fees:
                      created_timestamp: "1234567890.000000001"
                      fixed_fees:
                      - amount: 100
                        collector_account_id: 0.1.5
                        denominating_token_id: 0.10.8
                      fractional_fees:
                      - amount:
                          numerator: 12
                          denominator: 29
                        collector_account_id: 0.1.6
                        denominating_token_id: 0.10.9
                        maximum: 120
                        minimum: 30
                        net_of_transfers: true
                NonFungibleToken:
                  value:
                    admin_key:
                      _type: ProtobufEncoded
                      key: 4161
                    auto_renew_account: 0.1.2
                    auto_renew_period: null
                    created_timestamp: "1234567890.000000001"
                    deleted: false
                    decimals: 0
                    expiry_timestamp: null
                    freeze_default: false
                    freeze_key:
                      _type: ProtobufEncoded
                      key: 4161
                    initial_supply: 0
                    kyc_key:
                      _type: ProtobufEncoded
                      key: 4161
                    max_supply: 9223372036854776000
                    memo: token memo
                    modified_timestamp: "1234567890.000000001"
                    name: Token name
                    pause_key:
                      _type: ProtobufEncoded
                      key: 4161
                    pause_status: UNPAUSED
                    supply_key:
                      _type: ProtobufEncoded
                      key: 4161
                    supply_type: INFINITE
                    symbol: ORIGINALRDKSE
                    token_id: 0.10.1
                    total_supply: 1000000
                    treasury_account_id: 0.1.2
                    type: NON_FUNGIBLE_UNIQUE
                    wipe_key:
                      _type: ProtobufEncoded
                      key: 4161
                    custom_fees:
                      created_timestamp: "1234567890.000000001"
                      fixed_fees:
                      - amount: 100
                        collector_account_id: 0.1.5
                        denominating_token_id: 0.10.6
                      royalty_fees:
                      - amount:
                          numerator: 15
                          denominator: 37
                        collector_account_id: 0.1.6
                        fallback_fee:
                          amount: 100
                          denominating_token_id: 0.10.7
              schema:
                $ref: '#/components/schemas/TokenInfo'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
        "404":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: Not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Get token by id
      tags:
      - tokens
  /api/v1/tokens/{tokenId}/balances:
    get:
      description: Returns a list of token balances given the id. This represents
        the Token supply distribution across the network
      operationId: listTokenBalancesById
      parameters:
      - description: Token id
        explode: false
        in: path
        name: tokenId
        required: true
        schema:
          $ref: '#/components/schemas/EntityId'
        style: simple
      - description: The optional balance value to compare against
        examples:
          noValue:
            summary: --
            value: ""
          noOperator:
            summary: Example of equals with no operator
            value: 100
          eqOperator:
            summary: Example of equals operator
            value: eq:200
          neOperator:
            summary: Example of not equals operator
            value: ne:300
          gtOperator:
            summary: Example of greater than operator
            value: gt:400
          gteOperator:
            summary: Example of greater than or equals operator
            value: gte:500
          ltOperator:
            summary: Example of less than operator
            value: lt:600
          lteOperator:
            summary: Example of less than or equals operator
            value: lte:700
        explode: true
        in: query
        name: account.balance
        required: false
        schema:
          pattern: "^((gte?|lte?|eq|ne)\\:)?\\d{1,10}$"
          type: string
        style: form
      - description: The ID of the account to return information for
        examples:
          noValue:
            summary: --
            value: ""
          entityNumNoOperator:
            summary: Example of entityNum equals with no operator
            value: 100
          idNoOperator:
            summary: Example of id equals with no operator
            value: 0.0.100
          entityNumEqOperator:
            summary: Example of entityNum equals operator
            value: eq:200
          idEqOperator:
            summary: Example of id equals operator
            value: eq:0.0.200
          entityNumNeOperator:
            summary: Example of entityNum not equals operator
            value: ne:300
          idNeOperator:
            summary: Example of id not equals operator
            value: ne:0.0.300
          entityNumGtOperator:
            summary: Example of entityNum greater than operator
            value: gt:400
          idGtOperator:
            summary: Example of id greater than operator
            value: gt:0.0.400
          entityNumGteOperator:
            summary: Example of entityNum greater than or equals operator
            value: gte:500
          idGteOperator:
            summary: Example of id greater than or equals operator
            value: gte:0.0.500
          entityNumLtOperator:
            summary: Example of entityNum less than operator
            value: lt:600
          idLtOperator:
            summary: Example of id less than operator
            value: lt:0.0.600
          entityNumLteOperator:
            summary: Example of entityNum less than or equals operator
            value: lte:700
          idLteOperator:
            summary: Example of id less than or equals operator
            value: lte:0.0.700
        explode: true
        in: query
        name: account.id
        required: false
        schema:
          $ref: '#/components/schemas/EntityIdQuery'
        style: form
      - description: The account's public key to compare against
        example: 3c3d546321ff6f63d701d2ec5c277095874e19f4a235bee1e6bb19258bf362be
        explode: true
        in: query
        name: account.publickey
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of items to return
        example: 2
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 25
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The order in which items are listed
        example: desc
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: asc
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: The consensus timestamp in seconds.nanoseconds format with an
          optional comparison operator
        examples:
          noValue:
            summary: --
            value: ""
          secondsNoOperator:
            summary: Example of seconds equals with no operator
            value: 1234567890
          timestampNoOperator:
            summary: Example of timestamp equals with no operator
            value: 1234567890
          secondsEqOperator:
            summary: Example of seconds equals with operator
            value: eq:1234567890
          timestampEqOperator:
            summary: Example of timestamp equals with operator
            value: eq:1234567890.000000200
          secondsNeOperator:
            summary: Example of seconds not equals operator
            value: ne:1234567890
          timestampNeOperator:
            summary: Example of timestamp not equals operator
            value: ne:1234567890.000000300
          secondsGtOperator:
            summary: Example of seconds greater than operator
            value: gt:1234567890
          timestampGtOperator:
            summary: Example of timestamp greater than operator
            value: gt:1234567890.000000400
          secondsGteOperator:
            summary: Example of seconds greater than or equals operator
            value: gte:1234567890
          timestampGteOperator:
            summary: Example of timestamp greater than or equals operator
            value: gte:1234567890.000000500
          secondsLtOperator:
            summary: Example of seconds less than operator
            value: lt:1234567890
          timestampLtOperator:
            summary: Example of timestamp less than operator
            value: lt:1234567890.000000600
          secondsLteOperator:
            summary: Example of seconds less than or equals operator
            value: lte:1234567890
          timestampLteOperator:
            summary: Example of timestamp less than or equals operator
            value: lte:1234567890.000000700
        explode: true
        in: query
        name: timestamp
        required: false
        schema:
          items:
            pattern: "^((eq|gt|gte|lt|lte|ne):)?\\d{1,10}(.\\d{1,9})?$"
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenBalancesResponse'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
      summary: List token balances
      tags:
      - tokens
  /api/v1/tokens/{tokenId}/nfts:
    get:
      description: Returns a list of non-fungible tokens
      operationId: listNfts
      parameters:
      - description: Token id
        explode: false
        in: path
        name: tokenId
        required: true
        schema:
          $ref: '#/components/schemas/EntityId'
        style: simple
      - description: The ID of the account to return information for
        examples:
          noValue:
            summary: --
            value: ""
          entityNumNoOperator:
            summary: Example of entityNum equals with no operator
            value: 100
          idNoOperator:
            summary: Example of id equals with no operator
            value: 0.0.100
          entityNumEqOperator:
            summary: Example of entityNum equals operator
            value: eq:200
          idEqOperator:
            summary: Example of id equals operator
            value: eq:0.0.200
          entityNumNeOperator:
            summary: Example of entityNum not equals operator
            value: ne:300
          idNeOperator:
            summary: Example of id not equals operator
            value: ne:0.0.300
          entityNumGtOperator:
            summary: Example of entityNum greater than operator
            value: gt:400
          idGtOperator:
            summary: Example of id greater than operator
            value: gt:0.0.400
          entityNumGteOperator:
            summary: Example of entityNum greater than or equals operator
            value: gte:500
          idGteOperator:
            summary: Example of id greater than or equals operator
            value: gte:0.0.500
          entityNumLtOperator:
            summary: Example of entityNum less than operator
            value: lt:600
          idLtOperator:
            summary: Example of id less than operator
            value: lt:0.0.600
          entityNumLteOperator:
            summary: Example of entityNum less than or equals operator
            value: lte:700
          idLteOperator:
            summary: Example of id less than or equals operator
            value: lte:0.0.700
        explode: true
        in: query
        name: account.id
        required: false
        schema:
          $ref: '#/components/schemas/EntityIdQuery'
        style: form
      - description: The maximum number of items to return
        example: 2
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 25
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The order in which items are listed
        example: asc
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: The nft serial number (64 bit type). Requires a tokenId value
          also be populated.
        examples:
          noValue:
            summary: --
            value: ""
          serialNumNoOperator:
            summary: Example of serialNum equals with no operator
            value: 100
          serialNumEqOperator:
            summary: Example of serialNum equals operator
            value: eq:200
          serialNumGtOperator:
            summary: Example of serialNum greater than operator
            value: gt:400
          serialNumGteOperator:
            summary: Example of serialNum greater than or equals operator
            value: gte:500
          serialNumLtOperator:
            summary: Example of serialNum less than operator
            value: lt:600
          serialNumLteOperator:
            summary: Example of serialNum less than or equals operator
            value: lte:700
        explode: true
        in: query
        name: serialnumber
        required: false
        schema:
          pattern: "^((eq|gt|gte|lt|lte):)?\\d{1,19}?$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Nfts'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
      summary: List nfts
      tags:
      - tokens
  /api/v1/tokens/{tokenId}/nfts/{serialNumber}:
    get:
      description: Returns information for a non-fungible token
      operationId: listNftBySerialnumber
      parameters:
      - description: Token id
        explode: false
        in: path
        name: tokenId
        required: true
        schema:
          $ref: '#/components/schemas/EntityId'
        style: simple
      - description: The nft serial number
        example: 1
        explode: false
        in: path
        name: serialNumber
        required: true
        schema:
          default: 1
          format: int64
          maximum: 9223372036854775807
          minimum: 1
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Nft'
          description: OK
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
        "404":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: Not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Get nft info
      tags:
      - tokens
  /api/v1/tokens/{tokenId}/nfts/{serialNumber}/transactions:
    get:
      description: Returns a list of transactions for a given non-fungible token
      operationId: listNftTransactions
      parameters:
      - description: Token id
        explode: false
        in: path
        name: tokenId
        required: true
        schema:
          $ref: '#/components/schemas/EntityId'
        style: simple
      - description: The nft serial number
        example: 1
        explode: false
        in: path
        name: serialNumber
        required: true
        schema:
          default: 1
          format: int64
          maximum: 9223372036854775807
          minimum: 1
          type: integer
        style: simple
      - description: The maximum number of items to return
        example: 2
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 25
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The order in which items are listed
        example: asc
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: The consensus timestamp in seconds.nanoseconds format with an
          optional comparison operator
        examples:
          noValue:
            summary: --
            value: ""
          secondsNoOperator:
            summary: Example of seconds equals with no operator
            value: 1234567890
          timestampNoOperator:
            summary: Example of timestamp equals with no operator
            value: 1234567890
          secondsEqOperator:
            summary: Example of seconds equals with operator
            value: eq:1234567890
          timestampEqOperator:
            summary: Example of timestamp equals with operator
            value: eq:1234567890.000000200
          secondsNeOperator:
            summary: Example of seconds not equals operator
            value: ne:1234567890
          timestampNeOperator:
            summary: Example of timestamp not equals operator
            value: ne:1234567890.000000300
          secondsGtOperator:
            summary: Example of seconds greater than operator
            value: gt:1234567890
          timestampGtOperator:
            summary: Example of timestamp greater than operator
            value: gt:1234567890.000000400
          secondsGteOperator:
            summary: Example of seconds greater than or equals operator
            value: gte:1234567890
          timestampGteOperator:
            summary: Example of timestamp greater than or equals operator
            value: gte:1234567890.000000500
          secondsLtOperator:
            summary: Example of seconds less than operator
            value: lt:1234567890
          timestampLtOperator:
            summary: Example of timestamp less than operator
            value: lt:1234567890.000000600
          secondsLteOperator:
            summary: Example of seconds less than or equals operator
            value: lte:1234567890
          timestampLteOperator:
            summary: Example of timestamp less than or equals operator
            value: lte:1234567890.000000700
        explode: true
        in: query
        name: timestamp
        required: false
        schema:
          items:
            pattern: "^((eq|gt|gte|lt|lte|ne):)?\\d{1,10}(.\\d{1,9})?$"
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NftTransactionHistory'
          description: OK
        "206":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NftTransactionHistory'
          description: Partial Content
        "400":
          content:
            application/json:
              example:
                _status:
                  messages:
                  - message: "Invalid parameter: account.id"
                  - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                      format where sss are seconds and nnn are nanoseconds
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid parameter
      summary: Get an nfts transction history
      tags:
      - tokens
components:
  parameters:
    accountIdOrAliasOrEvmAddressPathParam:
      description: Account alias or account id or evm address
      examples:
        aliasOnly:
          value: HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
        realmAlias:
          value: 0.HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
        shardRealmAlias:
          value: 0.1.HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
        accountNumOnly:
          value: 8
        realmAccountNum:
          value: 0.8
        shardRealmAccountNum:
          value: 0.0.8
        evmAddress:
          value: ac384c53f03855fa1b3616052f8ba32c6c2a2fec
        evmAddressWithPrefix:
          value: 983201903409292612713400538130315269243293806572
        evmAddressWithShardAndRealm:
          value: 0.0.ac384c53f03855fa1b3616052f8ba32c6c2a2fec
      explode: false
      in: path
      name: idOrAliasOrEvmAddress
      required: true
      schema:
        pattern: "^(\\d{1,10}\\.){0,2}(\\d{1,10}|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))$"
        type: string
      style: simple
    accountIdOrAliasOrEvmAddressQueryParam:
      description: Account id or account alias with no shard realm or evm address
        with no shard realm
      examples:
        aliasOnly:
          value: HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
        accountNumOnly:
          value: 8
        realmAccountNum:
          value: 0.8
        shardRealmAccountNum:
          value: 0.0.8
        evmAddress:
          value: ac384c53f03855fa1b3616052f8ba32c6c2a2fec
        evmAddressWithPrefix:
          value: 983201903409292612713400538130315269243293806572
      explode: true
      in: query
      name: account.id
      required: false
      schema:
        pattern: "^(\\d{1,10}\\.){0,2}(\\d{1,10}|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))$"
        type: string
      style: form
    accountBalanceQueryParam:
      description: The optional balance value to compare against
      examples:
        noValue:
          summary: --
          value: ""
        noOperator:
          summary: Example of equals with no operator
          value: 100
        eqOperator:
          summary: Example of equals operator
          value: eq:200
        neOperator:
          summary: Example of not equals operator
          value: ne:300
        gtOperator:
          summary: Example of greater than operator
          value: gt:400
        gteOperator:
          summary: Example of greater than or equals operator
          value: gte:500
        ltOperator:
          summary: Example of less than operator
          value: lt:600
        lteOperator:
          summary: Example of less than or equals operator
          value: lte:700
      explode: true
      in: query
      name: account.balance
      required: false
      schema:
        pattern: "^((gte?|lte?|eq|ne)\\:)?\\d{1,10}$"
        type: string
      style: form
    accountIdQueryParam:
      description: The ID of the account to return information for
      examples:
        noValue:
          summary: --
          value: ""
        entityNumNoOperator:
          summary: Example of entityNum equals with no operator
          value: 100
        idNoOperator:
          summary: Example of id equals with no operator
          value: 0.0.100
        entityNumEqOperator:
          summary: Example of entityNum equals operator
          value: eq:200
        idEqOperator:
          summary: Example of id equals operator
          value: eq:0.0.200
        entityNumNeOperator:
          summary: Example of entityNum not equals operator
          value: ne:300
        idNeOperator:
          summary: Example of id not equals operator
          value: ne:0.0.300
        entityNumGtOperator:
          summary: Example of entityNum greater than operator
          value: gt:400
        idGtOperator:
          summary: Example of id greater than operator
          value: gt:0.0.400
        entityNumGteOperator:
          summary: Example of entityNum greater than or equals operator
          value: gte:500
        idGteOperator:
          summary: Example of id greater than or equals operator
          value: gte:0.0.500
        entityNumLtOperator:
          summary: Example of entityNum less than operator
          value: lt:600
        idLtOperator:
          summary: Example of id less than operator
          value: lt:0.0.600
        entityNumLteOperator:
          summary: Example of entityNum less than or equals operator
          value: lte:700
        idLteOperator:
          summary: Example of id less than or equals operator
          value: lte:0.0.700
      explode: true
      in: query
      name: account.id
      required: false
      schema:
        $ref: '#/components/schemas/EntityIdQuery'
      style: form
    accountPublicKeyQueryParam:
      description: The account's public key to compare against
      example: 3c3d546321ff6f63d701d2ec5c277095874e19f4a235bee1e6bb19258bf362be
      explode: true
      in: query
      name: account.publickey
      required: false
      schema:
        type: string
      style: form
    balanceQueryParam:
      description: "Whether to include balance information or not. If included, token\
        \ balances are limited to at most 50 per account as outlined in HIP-367."
      example: true
      explode: true
      in: query
      name: balance
      required: false
      schema:
        default: true
        type: boolean
      style: form
    contractIdQueryParam:
      description: The ID of the smart contract
      examples:
        noValue:
          summary: --
          value: ""
        entityNumNoOperator:
          summary: Example of entityNum equals with no operator
          value: 100
        idNoOperator:
          summary: Example of id equals with no operator
          value: 0.0.100
        evmAddressNoOperator:
          summary: A hex encoded EVM address with no operator.
          value: 0.0.1d8bfdc5d46dc4f61d6b6115972536ebe6a8854c
        entityNumEqOperator:
          summary: Example of entityNum equals operator
          value: eq:200
        idEqOperator:
          summary: Example of id equals operator
          value: eq:0.0.200
        entityNumNeOperator:
          summary: Example of entityNum not equals operator
          value: ne:300
        idNeOperator:
          summary: Example of id not equals operator
          value: ne:0.0.300
        entityNumGtOperator:
          summary: Example of entityNum greater than operator
          value: gt:400
        idGtOperator:
          summary: Example of id greater than operator
          value: gt:0.0.400
        entityNumGteOperator:
          summary: Example of entityNum greater than or equals operator
          value: gte:500
        idGteOperator:
          summary: Example of id greater than or equals operator
          value: gte:0.0.500
        entityNumLtOperator:
          summary: Example of entityNum less than operator
          value: lt:600
        idLtOperator:
          summary: Example of id less than operator
          value: lt:0.0.600
        entityNumLteOperator:
          summary: Example of entityNum less than or equals operator
          value: lte:700
        idLteOperator:
          summary: Example of id less than or equals operator
          value: lte:0.0.700
      explode: true
      in: query
      name: contract.id
      required: false
      schema:
        pattern: "^((gte?|lte?|eq|ne)\\:)?(\\d{1,10}\\.\\d{1,10}\\.)?\\d{1,10}|(\\\
          d{1,10}\\.){0,2}[A-Fa-f0-9]{40}$"
        type: string
      style: form
    contractIdOrAddressPathParam:
      description: The ID or hex encoded EVM address (with or without 0x prefix) associated
        with this contract.
      explode: false
      in: path
      name: contractIdOrAddress
      required: true
      schema:
        pattern: "^(\\d{1,10}\\.){0,2}(\\d{1,10}|(0x)?[A-Fa-f0-9]{40})$"
        type: string
      style: simple
    hashOrNumberPathParam:
      description: Accepts both eth and hedera hash format or block number
      explode: false
      in: path
      name: hashOrNumber
      required: true
      schema:
        pattern: "^(\\d{1,10}|(0x)?([A-Fa-f0-9]{64}|[A-Fa-f0-9]{96}))$"
        type: string
      style: simple
    entityIdPathParam:
      description: Entity id
      explode: false
      in: path
      name: entityId
      required: true
      schema:
        $ref: '#/components/schemas/EntityId'
      style: simple
    fileIdQueryParam:
      description: The ID of the file entity
      examples:
        noValue:
          summary: --
          value: ""
        entityNumNoOperator:
          summary: Example of entityNum equals with no operator
          value: 100
        idNoOperator:
          summary: Example of id equals with no operator
          value: 0.0.100
        entityNumEqOperator:
          summary: Example of entityNum equals operator
          value: eq:200
        idEqOperator:
          summary: Example of id equals operator
          value: eq:0.0.200
      explode: true
      in: query
      name: file.id
      required: false
      schema:
        $ref: '#/components/schemas/EntityIdQuery'
      style: form
    scheduleIdPathParam:
      description: Schedule id
      explode: false
      in: path
      name: scheduleId
      required: true
      schema:
        $ref: '#/components/schemas/EntityId'
      style: simple
    tokenIdPathParam:
      description: Token id
      explode: false
      in: path
      name: tokenId
      required: true
      schema:
        $ref: '#/components/schemas/EntityId'
      style: simple
    topicIdPathParam:
      description: Topic id
      explode: false
      in: path
      name: topicId
      required: true
      schema:
        $ref: '#/components/schemas/EntityId'
      style: simple
    fromQueryParam:
      description: Account ID or EVM address executing the contract
      explode: true
      in: query
      name: from
      required: false
      schema:
        pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}|(0x)?[A-Fa-f0-9]{40}$"
        type: string
      style: form
    logIndexQueryParam:
      description: Contract log index
      examples:
        noValue:
          summary: --
          value: ""
        indexNoOperator:
          summary: Example of index equals with no operator
          value: 2
        indexEqOperator:
          summary: Example of index equals with operator
          value: eq:2
        indexGtOperator:
          summary: Example of index greater than operator
          value: gt:2
        indexGteOperator:
          summary: Example of index greater than or equals operator
          value: gte:2
        indexLtOperator:
          summary: Example of index less than operator
          value: lt:2
        indexLteOperator:
          summary: Example of index less than or equals operator
          value: lte:2
      explode: true
      in: query
      name: index
      required: false
      schema:
        pattern: "^((eq|gt|gte|lt|lte):)?\\d{1,10}$"
        type: string
      style: form
    limitQueryParam:
      description: The maximum number of items to return
      example: 2
      explode: true
      in: query
      name: limit
      required: false
      schema:
        default: 25
        format: int32
        maximum: 100
        minimum: 1
        type: integer
      style: form
    blockNumberQueryParam:
      description: The block's number
      examples:
        noValue:
          summary: --
          value: ""
        noOperator:
          summary: Example of block.number equals with no operator
          value: 1
        eqOperator:
          summary: Example of block.number equals operator
          value: eq:2
        gtOperator:
          summary: Example of block.number greater than operator
          value: gt:3
        gteOperator:
          summary: Example of block.number greater than or equals operator
          value: gte:4
        ltOperator:
          summary: Example of block.number less than operator
          value: lt:5
        lteOperator:
          summary: Example of block.number less than or equals operator
          value: lte:6
      explode: true
      in: query
      name: block.number
      required: false
      schema:
        minimum: 0
        pattern: "^((eq|gt|gte|lt|lte):)?\\d{1,19}$"
        type: string
      style: form
    nodeIdQueryParam:
      description: The ID of the node
      examples:
        noValue:
          summary: --
          value: ""
        serialNumNoOperator:
          summary: Example of nodeId equals with no operator
          value: 1
        serialNumEqOperator:
          summary: Example of nodeId equals operator
          value: eq:2
        serialNumGtOperator:
          summary: Example of nodeId greater than operator
          value: gt:3
        serialNumGteOperator:
          summary: Example of nodeId greater than or equals operator
          value: gte:4
        serialNumLtOperator:
          summary: Example of nodeId less than operator
          value: lt:5
        serialNumLteOperator:
          summary: Example of nodeId less than or equals operator
          value: lte:6
      explode: true
      in: query
      name: node.id
      required: false
      schema:
        pattern: "^((eq|gt|gte|lt|lte):)?\\d{1,19}$"
        type: string
      style: form
    nonceQueryParam:
      description: "Filter the query result by the nonce of the transaction. A zero\
        \ nonce represents user submitted transactions while a non-zero nonce is generated\
        \ by main nodes. The filter honors the last value. If not specified, all transactions\
        \ with specified payer account ID and valid start timestamp match."
      example: 0
      explode: true
      in: query
      name: nonce
      required: false
      schema:
        format: int32
        minimum: 0
        type: integer
      style: form
    nonceQueryParamWithDefault:
      description: Filter the query result by the nonce of the transaction. A zero
        nonce represents user submitted transactions while a non-zero nonce is generated
        by main nodes. The filter honors the last value. Default is 0 when not specified.
      example: 1
      explode: true
      in: query
      name: nonce
      required: false
      schema:
        default: 0
        format: int32
        minimum: 0
        type: integer
      style: form
    orderQueryParam:
      description: The order in which items are listed
      example: desc
      explode: true
      in: query
      name: order
      required: false
      schema:
        default: asc
        enum:
        - asc
        - desc
        type: string
      style: form
    orderQueryParamDesc:
      description: The order in which items are listed
      example: asc
      explode: true
      in: query
      name: order
      required: false
      schema:
        default: desc
        enum:
        - asc
        - desc
        type: string
      style: form
    publicKeyQueryParam:
      description: The public key to compare against
      example: 3c3d546321ff6f63d701d2ec5c277095874e19f4a235bee1e6bb19258bf362be
      explode: true
      in: query
      name: publickey
      required: false
      schema:
        type: string
      style: form
    scheduledQueryParam:
      description: "Filter transactions by the scheduled flag. If true, return information\
        \ for the scheduled transaction. If false, return information for the non-scheduled\
        \ transaction. If not present, return information for all transactions matching\
        \ transactionId."
      explode: true
      in: query
      name: scheduled
      required: false
      schema:
        type: boolean
      style: form
    scheduledQueryParamWithDefault:
      description: "Filter transactions by the scheduled flag. If true, return information\
        \ for the scheduled transaction. If false, return information for the non-scheduled\
        \ transaction."
      explode: true
      in: query
      name: scheduled
      required: false
      schema:
        default: false
        type: boolean
      style: form
    scheduleIdQueryParam:
      description: The ID of the schedule to return information for
      examples:
        noValue:
          summary: --
          value: ""
        entityNumNoOperator:
          summary: Example of entityNum equals with no operator
          value: 100
        idNoOperator:
          summary: Example of id equals with no operator
          value: 0.0.100
        entityNumEqOperator:
          summary: Example of entityNum equals operator
          value: eq:200
        idEqOperator:
          summary: Example of id equals operator
          value: eq:0.0.200
        entityNumNeOperator:
          summary: Example of entityNum not equals operator
          value: ne:300
        idNeOperator:
          summary: Example of id not equals operator
          value: ne:0.0.300
        entityNumGtOperator:
          summary: Example of entityNum greater than operator
          value: gt:400
        idGtOperator:
          summary: Example of id greater than operator
          value: gt:0.0.400
        entityNumGteOperator:
          summary: Example of entityNum greater than or equals operator
          value: gte:500
        idGteOperator:
          summary: Example of id greater than or equals operator
          value: gte:0.0.500
        entityNumLtOperator:
          summary: Example of entityNum less than operator
          value: lt:600
        idLtOperator:
          summary: Example of id less than operator
          value: lt:0.0.600
        entityNumLteOperator:
          summary: Example of entityNum less than or equals operator
          value: lte:700
        idLteOperator:
          summary: Example of id less than or equals operator
          value: lte:0.0.700
      explode: true
      in: query
      name: schedule.id
      required: false
      schema:
        $ref: '#/components/schemas/EntityIdQuery'
      style: form
    serialNumberPathParam:
      description: The nft serial number
      example: 1
      explode: false
      in: path
      name: serialNumber
      required: true
      schema:
        default: 1
        format: int64
        maximum: 9223372036854775807
        minimum: 1
        type: integer
      style: simple
    serialNumberQueryParam:
      description: The nft serial number (64 bit type). Requires a tokenId value also
        be populated.
      examples:
        noValue:
          summary: --
          value: ""
        serialNumNoOperator:
          summary: Example of serialNum equals with no operator
          value: 100
        serialNumEqOperator:
          summary: Example of serialNum equals operator
          value: eq:200
        serialNumGtOperator:
          summary: Example of serialNum greater than operator
          value: gt:400
        serialNumGteOperator:
          summary: Example of serialNum greater than or equals operator
          value: gte:500
        serialNumLtOperator:
          summary: Example of serialNum less than operator
          value: lt:600
        serialNumLteOperator:
          summary: Example of serialNum less than or equals operator
          value: lte:700
      explode: true
      in: query
      name: serialnumber
      required: false
      schema:
        pattern: "^((eq|gt|gte|lt|lte):)?\\d{1,19}?$"
        type: string
      style: form
    timestampQueryParam:
      description: The consensus timestamp in seconds.nanoseconds format with an optional
        comparison operator
      examples:
        noValue:
          summary: --
          value: ""
        secondsNoOperator:
          summary: Example of seconds equals with no operator
          value: 1234567890
        timestampNoOperator:
          summary: Example of timestamp equals with no operator
          value: 1234567890
        secondsEqOperator:
          summary: Example of seconds equals with operator
          value: eq:1234567890
        timestampEqOperator:
          summary: Example of timestamp equals with operator
          value: eq:1234567890.000000200
        secondsNeOperator:
          summary: Example of seconds not equals operator
          value: ne:1234567890
        timestampNeOperator:
          summary: Example of timestamp not equals operator
          value: ne:1234567890.000000300
        secondsGtOperator:
          summary: Example of seconds greater than operator
          value: gt:1234567890
        timestampGtOperator:
          summary: Example of timestamp greater than operator
          value: gt:1234567890.000000400
        secondsGteOperator:
          summary: Example of seconds greater than or equals operator
          value: gte:1234567890
        timestampGteOperator:
          summary: Example of timestamp greater than or equals operator
          value: gte:1234567890.000000500
        secondsLtOperator:
          summary: Example of seconds less than operator
          value: lt:1234567890
        timestampLtOperator:
          summary: Example of timestamp less than operator
          value: lt:1234567890.000000600
        secondsLteOperator:
          summary: Example of seconds less than or equals operator
          value: lte:1234567890
        timestampLteOperator:
          summary: Example of timestamp less than or equals operator
          value: lte:1234567890.000000700
      explode: true
      in: query
      name: timestamp
      required: false
      schema:
        items:
          pattern: "^((eq|gt|gte|lt|lte|ne):)?\\d{1,10}(.\\d{1,9})?$"
          type: string
        type: array
      style: form
    timestampPathParam:
      description: The timestamp at which the associated transaction reached consensus
      example: 1234567890.0000007
      explode: false
      in: path
      name: timestamp
      required: true
      schema:
        pattern: "^\\d{1,10}(.\\d{1,9})?$"
        type: string
      style: simple
    stateTimestampQueryParam:
      description: The timestamp at which the contract state is
      example: 1234567890.0000007
      explode: true
      in: query
      name: timestamp
      required: false
      schema:
        pattern: "^\\d{1,10}(.\\d{1,9})?$"
        type: string
      style: form
    tokenInfoTimestampQueryParam:
      examples:
        noValue:
          summary: --
          value: ""
        secondsNoOperator:
          summary: Example of seconds equals with no operator
          value: 1234567890
        timestampNoOperator:
          summary: Example of timestamp equals with no operator
          value: 1234567890
        secondsEqOperator:
          summary: Example of seconds equals with operator
          value: eq:1234567890
        timestampEqOperator:
          summary: Example of timestamp equals with operator
          value: eq:1234567890.000000200
        secondsLtOperator:
          summary: Example of seconds less than operator
          value: lt:1234567890
        timestampLtOperator:
          summary: Example of timestamp less than operator
          value: lt:1234567890.000000600
        secondsLteOperator:
          summary: Example of seconds less than or equals operator
          value: lte:1234567890
        timestampLteOperator:
          summary: Example of timestamp less than or equals operator
          value: lte:1234567890.000000700
      explode: true
      in: query
      name: timestamp
      required: false
      schema:
        pattern: "^((eq|lt|lte):)?\\d{1,10}(.\\d{1,9})?$"
        type: string
      style: form
    logTopic0QueryParam:
      description: The first topic associated with a contract log. Requires a timestamp
        range also be populated.
      explode: true
      in: query
      name: topic0
      required: false
      schema:
        $ref: '#/components/schemas/LogTopicQueryParam'
      style: form
    logTopic1QueryParam:
      description: The second topic associated with a contract log. Requires a timestamp
        range also be populated.
      explode: true
      in: query
      name: topic1
      required: false
      schema:
        $ref: '#/components/schemas/LogTopicQueryParam'
      style: form
    logTopic2QueryParam:
      description: The third topic associated with a contract log. Requires a timestamp
        range also be populated.
      explode: true
      in: query
      name: topic2
      required: false
      schema:
        $ref: '#/components/schemas/LogTopicQueryParam'
      style: form
    logTopic3QueryParam:
      description: The fourth topic associated with a contract log. Requires a timestamp
        range also be populated.
      explode: true
      in: query
      name: topic3
      required: false
      schema:
        $ref: '#/components/schemas/LogTopicQueryParam'
      style: form
    spenderIdQueryParam:
      description: The ID of the spender to return information for
      examples:
        noValue:
          summary: --
          value: ""
        entityNumNoOperator:
          summary: Example of entityNum equals with no operator
          value: 100
        idNoOperator:
          summary: Example of id equals with no operator
          value: 0.0.100
        entityNumEqOperator:
          summary: Example of entityNum equals operator
          value: eq:200
        idEqOperator:
          summary: Example of id equals operator
          value: eq:0.0.200
        idGtOperator:
          summary: Example of id greather than operator
          value: gt:0.0.200
        idGteOperator:
          summary: Example of id greather than or equal to operator
          value: gte:0.0.200
        idLtOperator:
          summary: Example of id less than operator
          value: lt:0.0.200
        idLteOperator:
          summary: Example of id less than or equal to operator
          value: lte:0.0.200
      explode: true
      in: query
      name: spender.id
      required: false
      schema:
        $ref: '#/components/schemas/EntityIdQuery'
      style: form
    transactionsQueryParam:
      description: If provided and set to false transactions will not be included
        in the response
      example: true
      explode: true
      in: query
      name: transactions
      required: false
      schema:
        default: true
        type: boolean
      style: form
    transactionTypeQueryParam:
      example: cryptotransfer
      explode: true
      in: query
      name: transactiontype
      required: false
      schema:
        $ref: '#/components/schemas/TransactionTypes'
      style: form
    transactionIdPathParam:
      description: Transaction id
      example: 0.0.10-1234567890-000000000
      explode: false
      in: path
      name: transactionId
      required: true
      schema:
        type: string
      style: simple
    tokenIdQueryParam:
      description: The ID of the token to return information for
      examples:
        noValue:
          summary: --
          value: ""
        entityNumNoOperator:
          summary: Example of entityNum equals with no operator
          value: 100
        idNoOperator:
          summary: Example of id equals with no operator
          value: 0.0.100
        entityNumEqOperator:
          summary: Example of entityNum equals operator
          value: eq:200
        idEqOperator:
          summary: Example of id equals operator
          value: eq:0.0.200
        entityNumNeOperator:
          summary: Example of entityNum not equals operator
          value: ne:300
        idNeOperator:
          summary: Example of id not equals operator
          value: ne:0.0.300
        entityNumGtOperator:
          summary: Example of entityNum greater than operator
          value: gt:400
        idGtOperator:
          summary: Example of id greater than operator
          value: gt:0.0.400
        entityNumGteOperator:
          summary: Example of entityNum greater than or equals operator
          value: gte:500
        idGteOperator:
          summary: Example of id greater than or equals operator
          value: gte:0.0.500
        entityNumLtOperator:
          summary: Example of entityNum less than operator
          value: lt:600
        idLtOperator:
          summary: Example of id less than operator
          value: lt:0.0.600
        entityNumLteOperator:
          summary: Example of entityNum less than or equals operator
          value: lte:700
        idLteOperator:
          summary: Example of id less than or equals operator
          value: lte:0.0.700
      explode: true
      in: query
      name: token.id
      required: false
      schema:
        $ref: '#/components/schemas/EntityIdQuery'
      style: form
    tokenTypeQueryParam:
      example:
      - ALL
      - FUNGIBLE_COMMON
      - NON_FUNGIBLE_UNIQUE
      explode: true
      in: query
      name: type
      required: false
      schema:
        items:
          type: string
        type: array
      style: form
    contractActionsIndexQueryParam:
      description: The index of a contract action
      examples:
        noValue:
          summary: --
          value: ""
        noOperator:
          summary: Example of equals with no operator
          value: 1
        eqOperator:
          summary: Example of equals operator
          value: eq:2
        gtOperator:
          summary: Example of greater than operator
          value: gt:4
        gteOperator:
          summary: Example of greater than or equals operator
          value: gte:5
        ltOperator:
          summary: Example of less than operator
          value: lt:6
        lteOperator:
          summary: Example of less than or equals operator
          value: lte:7
      explode: true
      in: query
      name: index
      required: false
      schema:
        pattern: "^((gte?|lte?|eq|ne)\\:)?\\d{1,10}$"
        type: string
      style: form
    contractsBlockNumberQueryParam:
      description: The block's number
      examples:
        noValue:
          summary: --
          value: ""
        noOperator:
          summary: Example of block.number equals with no operator
          value: 1
        eqOperator:
          summary: Example of block.number equals operator
          value: eq:2
        hexEncoded:
          summary: Example of hex encoded block.number equals with no operator
          value: 0xa0
        hexEncodedEqOperator:
          summary: Example of hex encoded block.number equals with equals operator
          value: eq:0xa0
      explode: true
      in: query
      name: block.number
      required: false
      schema:
        minimum: 0
        pattern: "^(eq:)?(\\d{1,19}|0x[a-fA-f0-9]+)$"
        type: string
      style: form
    slotQueryParam:
      description: The slot's number
      examples:
        noValue:
          summary: --
          value: ""
        noOperator:
          summary: Example of slot equals with no operator
          value: 1
        eqOperator:
          summary: Example of slot equals operator
          value: eq:2
        gtOperator:
          summary: Example of slot gt operator
          value: gt:2
        gteOperator:
          summary: Example of slot gte operator
          value: gte:2
        ltOperator:
          summary: Example of slot lt operator
          value: lt:2
        lteOperator:
          summary: Example of slot lte operator
          value: lte:2
      explode: true
      in: query
      name: slot
      required: false
      schema:
        pattern: "^((eq|gte?|lte?)\\:)?(0x)?[0-9A-Fa-f]{1,64}$"
        type: string
      style: form
    blockHashQueryParam:
      description: The block's hash
      examples:
        noValue:
          summary: --
          value: ""
        "32ByteNoOperator":
          summary: Example of 32 byte block.hash equals with no operator
          value: ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
        "48ByteNoOperator":
          summary: Example of 48 byte block.hash equals with no operator
          value: 1eaf1abbd64bbcac7f473f0272671c66d3d1d64f584112b11cd4d2063e736305312fcb305804a48baa41571e71c39c61
        "32ByteEqOperator":
          summary: Example of 32 byte block.hash with equals operator
          value: eq:ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
        "48ByteEqOperator":
          summary: Example of 48 byte block.hash with equals operator
          value: eq:1eaf1abbd64bbcac7f473f0272671c66d3d1d64f584112b11cd4d2063e736305312fcb305804a48baa41571e71c39c61
        "32Byte0xPrefixNoOperator":
          summary: Example of 32 byte block.hash equals with 0x prefix and no operator
          value: 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
        "48Byte0xPrefixNoOperator":
          summary: Example of 48 byte block.hash equals with 0x prefix and no operator
          value: 0x1eaf1abbd64bbcac7f473f0272671c66d3d1d64f584112b11cd4d2063e736305312fcb305804a48baa41571e71c39c61
        "32Byte0xPrefixEqOperator":
          summary: Example of 32 byte block.hash with 0x prefix and equals operator
          value: eq:0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
        "48Byte0xPrefixEqOperator":
          summary: Example of 48 byte block.hash with 0x prefix and equals operator
          value: eq:0x1eaf1abbd64bbcac7f473f0272671c66d3d1d64f584112b11cd4d2063e736305312fcb305804a48baa41571e71c39c61
      explode: true
      in: query
      name: block.hash
      required: false
      schema:
        pattern: "^(eq:)?(0x)?([0-9A-Fa-f]{64}|[0-9A-Fa-f]{96})$"
        type: string
      style: form
    transactionIndexQueryParam:
      description: The transaction index in the block
      example: 1
      explode: true
      in: query
      name: transaction.index
      required: false
      schema:
        format: int32
        minimum: 0
        type: integer
      style: form
    internalQueryParam:
      description: Whether to include child transactions or not
      example: true
      explode: true
      in: query
      name: internal
      required: false
      schema:
        default: false
        type: boolean
      style: form
    transactionIdOrEthHashPathParam:
      description: Transaction Id or a 32 byte hash with optional 0x prefix
      examples:
        transactionId:
          value: 0.0.10-1234567890-000000000
        transactionHash:
          value: ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
        transactionHashWith0xPrefix:
          value: 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
      explode: false
      in: path
      name: transactionIdOrHash
      required: true
      schema:
        pattern: "^(0x)?[A-Fa-f0-9]{64}|(\\d{1,10})\\.(\\d{1,10})\\.(\\d{1,10})-(\\\
          d{1,19})-(\\d{1,9})$"
        type: string
      style: simple
  responses:
    NotFoundError:
      content:
        application/json:
          example:
            _status:
              messages:
              - message: Not found
          schema:
            $ref: '#/components/schemas/Error'
      description: Not Found
    TopicNotFound:
      content:
        application/json:
          example:
            _status:
              messages:
              - message: No such topic id - 7
          schema:
            $ref: '#/components/schemas/Error'
      description: Topic Not Found
    TransactionNotFound:
      content:
        application/json:
          example:
            _status:
              messages:
              - message: Transaction not found
          schema:
            $ref: '#/components/schemas/Error'
      description: Transaction Not Found
    InvalidParameterError:
      content:
        application/json:
          example:
            _status:
              messages:
              - message: "Invalid parameter: account.id"
              - message: Invalid Transaction id. Please use \shard.realm.num-sss-nnn\
                  format where sss are seconds and nnn are nanoseconds
          schema:
            $ref: '#/components/schemas/Error'
      description: Invalid parameter
    ServiceUnavailableError:
      content:
        application/json:
          example:
            _status:
              messages:
              - message: "Require at least 1/3 signature files to prove consensus,\
                  \ got 1 out of 4 for file 2019-10-11T13_33_25.526889Z.rcd_sig"
          schema:
            $ref: '#/components/schemas/Error'
      description: Service Unavailable
  schemas:
    AccountAlias:
      description: "Account alias in the format of 'shard.realm.alias', 'realm.alias',\
        \ or 'alias'. 'alias' is the RFC4648 no-padding base32 encoded string of the\
        \ account's alias."
      pattern: "^(\\d{1,5}\\.){0,2}(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8})$"
      type: string
    AccountsResponse:
      example:
        links:
          next: next
        accounts:
        - account: 0.0.8
          alias: HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
          auto_renew_period: null
          balance:
            timestamp: "0.000002345"
            balance: 80
            tokens:
            - token_id: 0.0.200001
              balance: 8
          created_timestamp: "1562591528.000123456"
          decline_reward: false
          deleted: false
          ethereum_nonce: 10
          evm_address: 0xac384c53f03855fa1b3616052f8ba32c6c2a2fec
          expiry_timestamp: null
          key: null
          max_automatic_token_associations: 200
          memo: entity memo
          pending_reward: 100
          receiver_sig_required: false
          staked_account_id: null
          staked_node_id: 3
          stake_period_start: "172800000.000000000"
        - account: 0.0.8
          alias: HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
          auto_renew_period: null
          balance:
            timestamp: "0.000002345"
            balance: 80
            tokens:
            - token_id: 0.0.200001
              balance: 8
          created_timestamp: "1562591528.000123456"
          decline_reward: false
          deleted: false
          ethereum_nonce: 10
          evm_address: 0xac384c53f03855fa1b3616052f8ba32c6c2a2fec
          expiry_timestamp: null
          key: null
          max_automatic_token_associations: 200
          memo: entity memo
          pending_reward: 100
          receiver_sig_required: false
          staked_account_id: null
          staked_node_id: 3
          stake_period_start: "172800000.000000000"
      properties:
        accounts:
          items:
            $ref: '#/components/schemas/AccountInfo'
          type: array
        links:
          $ref: '#/components/schemas/Links'
      required:
      - accounts
      - links
      type: object
    Allowance:
      properties:
        amount:
          description: The amount remaining of the original amount granted.
          example: 75
          format: int64
          type: integer
        amount_granted:
          description: The granted amount of the spender's allowance.
          example: 100
          format: int64
          type: integer
        owner:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        spender:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        timestamp:
          $ref: '#/components/schemas/TimestampRange'
      type: object
    BalancesResponse:
      example:
        balances:
        - account: 0.15.10
          balance: 80
          tokens:
          - token_id: 0.0.200001
            balance: 8
        - account: 0.15.10
          balance: 80
          tokens:
          - token_id: 0.0.200001
            balance: 8
        links:
          next: next
        timestamp: "1586567700.453054000"
      properties:
        timestamp:
          example: "1586567700.453054000"
          nullable: true
          pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
          type: string
        balances:
          items:
            $ref: '#/components/schemas/AccountBalance'
          type: array
        links:
          $ref: '#/components/schemas/Links'
      type: object
    ContractResponse:
      allOf:
      - $ref: '#/components/schemas/Contract'
      - properties:
          bytecode:
            description: The contract bytecode in hex during deployment
            example: !!binary |-
              MHgwMTAyMWExZmRjOWI=
            format: binary
            nullable: true
            type: string
          runtime_bytecode:
            description: The contract bytecode in hex after deployment
            example: !!binary |-
              MHgwMzAyZmExYWQzOWM=
            format: binary
            nullable: true
            type: string
        type: object
    ContractsResponse:
      example:
        links:
          next: next
        contracts:
        - auto_renew_period: 7776000
          max_automatic_token_associations: 0
          contract_id: 0.0.2
          expiration_timestamp: "1586567700.453054000"
          memo: contract memo
          created_timestamp: "1586567700.453054000"
          obtainer_id: 0.0.2
          evm_address: !!binary |-
            MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMWY0MQ==
          permanent_removal: true
          proxy_account_id: 0.0.2
          deleted: false
          file_id: 0.0.2
          auto_renew_account: 0.0.2
          admin_key:
            _type: ProtobufEncoded
            key: 421050820e1485acdd59726088e0e4a2130ebbbb70009f640ad95c78dd5a7b38
          timestamp:
            from: ""
            to: ""
        - auto_renew_period: 7776000
          max_automatic_token_associations: 0
          contract_id: 0.0.2
          expiration_timestamp: "1586567700.453054000"
          memo: contract memo
          created_timestamp: "1586567700.453054000"
          obtainer_id: 0.0.2
          evm_address: !!binary |-
            MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMWY0MQ==
          permanent_removal: true
          proxy_account_id: 0.0.2
          deleted: false
          file_id: 0.0.2
          auto_renew_account: 0.0.2
          admin_key:
            _type: ProtobufEncoded
            key: 421050820e1485acdd59726088e0e4a2130ebbbb70009f640ad95c78dd5a7b38
          timestamp:
            from: ""
            to: ""
      properties:
        contracts:
          items:
            $ref: '#/components/schemas/Contract'
          type: array
        links:
          $ref: '#/components/schemas/Links'
      type: object
    ContractResultsResponse:
      example:
        links:
          next: next
        results:
        - failed_initcode: 0x856739
          chain_id: 0x0127
          function_parameters: 0xbb9f02dc6f0e3289f57a1f33b71c73aa8548ab8b
          contract_id: 0.0.2
          block_number: 10
          transaction_index: 1
          type: 2
          result: SUCCESS
          gas_limit: 100000
          max_priority_fee_per_gas: 0x100
          block_gas_used: 2000
          bloom: ""
          max_fee_per_gas: 0x5
          from: !!binary |-
            MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMWY0MQ==
          timestamp: "1586567700.453054000"
          error_message: Out of gas
          gas_price: 0x4a817c800
          amount: 10
          address: 0x25fe26adc577cc89172e6156c9e24f7b9751b762
          gas_used: 1000
          block_hash: 0x6ceecd8bb224da491
          access_list: 0xabcd
          nonce: 1
          r: 0xd693b532a80fed6392b428604171fb32fdbf953728a3a7ecc7d4062b1652c043
          s: 0x24e9c602ac800b983b035700a14b23f78a253ab762deab5dc27e3555a750b355
          v: 1
          created_contract_ids:
          - 0.0.2
          - 0.0.2
          to: !!binary |-
            MHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxZjQx
          call_result: 0x2b048531b38d2882e86044bc972e940ee0a01938
          hash: 0xfebbaa29c513d124a6377246ea3506ad917d740c21a88f61a1c55ba338fc2bb1
          status: "1"
        - failed_initcode: 0x856739
          chain_id: 0x0127
          function_parameters: 0xbb9f02dc6f0e3289f57a1f33b71c73aa8548ab8b
          contract_id: 0.0.2
          block_number: 10
          transaction_index: 1
          type: 2
          result: SUCCESS
          gas_limit: 100000
          max_priority_fee_per_gas: 0x100
          block_gas_used: 2000
          bloom: ""
          max_fee_per_gas: 0x5
          from: !!binary |-
            MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMWY0MQ==
          timestamp: "1586567700.453054000"
          error_message: Out of gas
          gas_price: 0x4a817c800
          amount: 10
          address: 0x25fe26adc577cc89172e6156c9e24f7b9751b762
          gas_used: 1000
          block_hash: 0x6ceecd8bb224da491
          access_list: 0xabcd
          nonce: 1
          r: 0xd693b532a80fed6392b428604171fb32fdbf953728a3a7ecc7d4062b1652c043
          s: 0x24e9c602ac800b983b035700a14b23f78a253ab762deab5dc27e3555a750b355
          v: 1
          created_contract_ids:
          - 0.0.2
          - 0.0.2
          to: !!binary |-
            MHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxZjQx
          call_result: 0x2b048531b38d2882e86044bc972e940ee0a01938
          hash: 0xfebbaa29c513d124a6377246ea3506ad917d740c21a88f61a1c55ba338fc2bb1
          status: "1"
      properties:
        results:
          items:
            $ref: '#/components/schemas/ContractResult'
          type: array
        links:
          $ref: '#/components/schemas/Links'
      type: object
    ContractStateResponse:
      example:
        links:
          next: next
        state:
        - address: !!binary |-
            MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMWY0MQ==
          contract_id: 0.0.2
          slot: !!binary |-
            MHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
            MDAwMDAwMGZh
          value: !!binary |-
            MHg4YzViZTFlNWViZWM3ZDViZDE0ZjcxNDI3ZDFlODRmM2RkMDMxNGMwZjdiMjI5MWU1YjIwMGFj
            OGM3YzNiOTI1
          timestamp: "1586567700.453054000"
        - address: !!binary |-
            MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMWY0MQ==
          contract_id: 0.0.2
          slot: !!binary |-
            MHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
            MDAwMDAwMGZh
          value: !!binary |-
            MHg4YzViZTFlNWViZWM3ZDViZDE0ZjcxNDI3ZDFlODRmM2RkMDMxNGMwZjdiMjI5MWU1YjIwMGFj
            OGM3YzNiOTI1
          timestamp: "1586567700.453054000"
      properties:
        state:
          items:
            $ref: '#/components/schemas/ContractState'
          type: array
        links:
          $ref: '#/components/schemas/Links'
      type: object
    ContractActionsResponse:
      example:
        links:
          next: next
        actions:
        - call_depth: 1
          gas_used: 50000
          index: 0
          recipient_type: ACCOUNT
          input: 0x123456
          caller: 0.0.2
          call_operation_type: CALL
          gas: 50000
          recipient: 0.0.2
          result_data: 0x123456
          result_data_type: OUTPUT
          from: 0x0000000000000000000000000000000000000065
          to: !!binary |-
            MHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxZjQx
          call_type: CALL
          value: 50000
          caller_type: ACCOUNT
          timestamp: "1586567700.453054000"
        - call_depth: 1
          gas_used: 50000
          index: 0
          recipient_type: ACCOUNT
          input: 0x123456
          caller: 0.0.2
          call_operation_type: CALL
          gas: 50000
          recipient: 0.0.2
          result_data: 0x123456
          result_data_type: OUTPUT
          from: 0x0000000000000000000000000000000000000065
          to: !!binary |-
            MHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxZjQx
          call_type: CALL
          value: 50000
          caller_type: ACCOUNT
          timestamp: "1586567700.453054000"
      properties:
        actions:
          items:
            $ref: '#/components/schemas/ContractAction'
          type: array
        links:
          $ref: '#/components/schemas/Links'
      type: object
    ContractLogsResponse:
      example:
        logs:
        - null
        - null
      properties:
        logs:
          items:
            $ref: '#/components/schemas/ContractLog'
          type: array
      type: object
    CryptoAllowancesResponse:
      example:
        links:
          next: next
        allowances:
        - null
        - null
      properties:
        allowances:
          items:
            $ref: '#/components/schemas/CryptoAllowance'
          type: array
        links:
          $ref: '#/components/schemas/Links'
      type: object
    NetworkExchangeRateSetResponse:
      example:
        next_rate:
          cent_equivalent: 596987
          expiration_time: 1649689200
          hbar_equivalent: 30000
        current_rate:
          cent_equivalent: 596987
          expiration_time: 1649689200
          hbar_equivalent: 30000
        timestamp: "1586567700.453054000"
      properties:
        current_rate:
          $ref: '#/components/schemas/ExchangeRate'
        next_rate:
          $ref: '#/components/schemas/ExchangeRate'
        timestamp:
          example: "1586567700.453054000"
          pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
          type: string
      type: object
    NetworkFeesResponse:
      example:
        fees:
        - gas: 0
          transaction_type: transaction_type
        - gas: 0
          transaction_type: transaction_type
        timestamp: "1586567700.453054000"
      properties:
        fees:
          items:
            $ref: '#/components/schemas/NetworkFee'
          type: array
        timestamp:
          example: "1586567700.453054000"
          pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
          type: string
      type: object
    NetworkNodesResponse:
      example:
        nodes:
        - description: address book 1
          file_id: 0.0.102
          max_stake: 50000
          memo: 0.0.4
          min_stake: 1000
          node_account_id: 0.0.4
          node_cert_hash: 0x01d173753810c0aae794ba72d5443c292e9ff962b01046220dd99f5816422696e0569c977e2f169e1e5688afc8f4aa16
          node_id: 1
          public_key: 0x4a5ad514f0957fa170a676210c9bdbddf3bc9519702cf915fa6767a40463b96f
          reward_rate_start: 1000000
          service_endpoints:
          - ip_address_v4: 128.0.0.6
            port: 50216
          stake: 20000
          stake_not_rewarded: 19900
          stake_rewarded: 100
          staking_period:
            from: "1655164800.000000000"
            to: "1655251200.000000000"
          timestamp:
            from: "187654.000123457"
            to: null
        - description: address book 1
          file_id: 0.0.102
          max_stake: 50000
          memo: 0.0.4
          min_stake: 1000
          node_account_id: 0.0.4
          node_cert_hash: 0x01d173753810c0aae794ba72d5443c292e9ff962b01046220dd99f5816422696e0569c977e2f169e1e5688afc8f4aa16
          node_id: 1
          public_key: 0x4a5ad514f0957fa170a676210c9bdbddf3bc9519702cf915fa6767a40463b96f
          reward_rate_start: 1000000
          service_endpoints:
          - ip_address_v4: 128.0.0.6
            port: 50216
          stake: 20000
          stake_not_rewarded: 19900
          stake_rewarded: 100
          staking_period:
            from: "1655164800.000000000"
            to: "1655251200.000000000"
          timestamp:
            from: "187654.000123457"
            to: null
        links:
          next: next
      properties:
        nodes:
          items:
            $ref: '#/components/schemas/NetworkNode'
          type: array
        links:
          $ref: '#/components/schemas/Links'
      required:
      - links
      - nodes
      type: object
    NetworkSupplyResponse:
      example:
        released_supply: "3999999999999999949"
        total_supply: "5000000000000000000"
        timestamp: ""
      properties:
        released_supply:
          description: The network's released supply of hbars in tinybars
          example: "3999999999999999949"
          type: string
        timestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The consensus timestamp at which the released supply was
              valid
        total_supply:
          description: The network's total supply of hbars in tinybars
          example: "5000000000000000000"
          type: string
      type: object
    SchedulesResponse:
      example:
        schedules:
        - executed_timestamp: "1586567700.453054000"
          deleted: false
          wait_for_expiry: true
          payer_account_id: 0.0.2
          creator_account_id: 0.0.2
          consensus_timestamp: "1586567700.453054000"
          expiration_time: "1586567700.453054000"
          memo: created on 02/10/2021
          transaction_body: !!binary |-
            S2Q2dHZ1OD0=
          admin_key:
            _type: ProtobufEncoded
            key: 421050820e1485acdd59726088e0e4a2130ebbbb70009f640ad95c78dd5a7b38
          schedule_id: 0.0.2
          signatures:
          - signature: !!binary |-
              M3EyKzd3QUJBUU1McWdNTXdRPT0=
            consensus_timestamp: "1586567700.453054000"
            public_key_prefix: !!binary |-
              QUFFQkF3dXFBd3pC
            type: ED25519
          - signature: !!binary |-
              M3EyKzd3QUJBUU1McWdNTXdRPT0=
            consensus_timestamp: "1586567700.453054000"
            public_key_prefix: !!binary |-
              QUFFQkF3dXFBd3pC
            type: ED25519
        - executed_timestamp: "1586567700.453054000"
          deleted: false
          wait_for_expiry: true
          payer_account_id: 0.0.2
          creator_account_id: 0.0.2
          consensus_timestamp: "1586567700.453054000"
          expiration_time: "1586567700.453054000"
          memo: created on 02/10/2021
          transaction_body: !!binary |-
            S2Q2dHZ1OD0=
          admin_key:
            _type: ProtobufEncoded
            key: 421050820e1485acdd59726088e0e4a2130ebbbb70009f640ad95c78dd5a7b38
          schedule_id: 0.0.2
          signatures:
          - signature: !!binary |-
              M3EyKzd3QUJBUU1McWdNTXdRPT0=
            consensus_timestamp: "1586567700.453054000"
            public_key_prefix: !!binary |-
              QUFFQkF3dXFBd3pC
            type: ED25519
          - signature: !!binary |-
              M3EyKzd3QUJBUU1McWdNTXdRPT0=
            consensus_timestamp: "1586567700.453054000"
            public_key_prefix: !!binary |-
              QUFFQkF3dXFBd3pC
            type: ED25519
        links:
          next: next
      properties:
        schedules:
          items:
            $ref: '#/components/schemas/Schedule'
          type: array
        links:
          $ref: '#/components/schemas/Links'
      type: object
    BlocksResponse:
      example:
        blocks:
        - count: 3
          gas_used: 300000
          hapi_version: 0.11.0
          hash: 0x3c08bbbee74d287b1dcd3f0ca6d1d2cb92c90883c4acf9747de9f3f3162ad25b999fc7e86699f60f2a3fb3ed9a646c6b
          logs_bloom: 0x
          name: 2022-05-03T06_46_26.060890949Z.rcd
          number: 77
          previous_hash: 0xf7d6481f659c866c35391ee230c374f163642ebf13a5e604e04a95a9ca48a298dc2dfa10f51bcbaab8ae23bc6d662a0b
          size: 8192
          timestamp:
            from: "1651560386.060890949"
            to: "1651560386.661997287"
        - count: 3
          gas_used: 300000
          hapi_version: 0.11.0
          hash: 0x3c08bbbee74d287b1dcd3f0ca6d1d2cb92c90883c4acf9747de9f3f3162ad25b999fc7e86699f60f2a3fb3ed9a646c6b
          logs_bloom: 0x
          name: 2022-05-03T06_46_26.060890949Z.rcd
          number: 77
          previous_hash: 0xf7d6481f659c866c35391ee230c374f163642ebf13a5e604e04a95a9ca48a298dc2dfa10f51bcbaab8ae23bc6d662a0b
          size: 8192
          timestamp:
            from: "1651560386.060890949"
            to: "1651560386.661997287"
        links:
          next: next
      properties:
        blocks:
          items:
            $ref: '#/components/schemas/Block'
          type: array
        links:
          $ref: '#/components/schemas/Links'
      type: object
    StakingRewardsResponse:
      example:
        links:
          next: next
        rewards:
        - account_id: 0.0.1000
          amount: 10
          timestamp: "1234567890.000000001"
        - account_id: 0.0.1000
          amount: 10
          timestamp: "1234567890.000000001"
      properties:
        rewards:
          items:
            $ref: '#/components/schemas/StakingReward'
          type: array
        links:
          $ref: '#/components/schemas/Links'
      type: object
    StateProofResponseFull:
      example:
        record_file: YzNkOTg3Yzg3NDI5NGViOTViMmRmOWZkMzZiMDY1NjYyMzMxNTc2OWFmMmVmMzQ0YzM1ODY4NzgwMTAyYjVjMA==
        address_books:
        - MjljY2IxNGNjNWY2NWM1MmZlYjc0MjkyYjAxZDUyZmRjZjJkZTY0NWQzOTRiNTM3MDQ2ODBkYjZkMTMyZWM2Yw==
        signature_files:
          "0.0.3": MWFmYzZlNWVjNGJiZTg0ZWJjNTVkMGViNDViMjE2Mzg2ZTQ2NjUzZTYyYmM1NjE2YThmZGJjNzQ1ZWIyMTQxNQ==
          "0.0.4": ZDI4ZDIwMGJiYTdkNDhmNTA3ZTE0MGZhNjIyOGFiYTdmMjlmZjhiMmEzZjJhOGVlYjg1NzQyZGMwNTNjZWM3MQ==
          "0.0.5": MWY0YmU5OGE3NWE4N2NkNjQ5ZTNlMWE1ODI1OTI3NTgwNWM1Y2RmNjNmYjA0YjMzMTdlZmI1MTEwNzQ2NDVjNw==
          "0.0.6": NzNiZTVmMTZkNmY4NTQ4MjdiN2M4MTEzZmFlY2I1YzIwNGI5ZjFkNjhiMzdkMzczNTg4OTRkOWFiZmM5N2U4Mw==
          "0.0.7": NDJiZTVmMTZkNmY4NTQ4MjdiN2M4MTEzZmFlY2I1YzIwNGI5ZjFkNjhiMzdkMzczNTg4OTRkOWFiZmM5N2U4Mw==
      properties:
        address_books:
          description: The network address book valid at the time of the transaction
          items:
            format: byte
            type: string
          type: array
        record_file:
          description: The content of the record file the transaction belongs to
          format: byte
          type: string
        signature_files:
          additionalProperties:
            format: byte
            type: string
          description: The nodes' signature files for the record file
          type: object
      required:
      - address_books
      - record_file
      - signature_files
      type: object
    StateProofResponseCompact:
      example:
        address_books:
        - MjljY2IxNGNjNWY2NWM1MmZlYjc0MjkyYjAxZDUyZmRjZjJkZTY0NWQzOTRiNTM3MDQ2ODBkYjZkMTMyZWM2Yw==
        record_file:
          head: AAAABQAAAAAAAAAbAAAAAAAAAAE==
          start_running_hash_object: 9CLag6JRdB4AAAABWP+BGwAAADCTEm5j2O9qy33fqKR/F0sKXYqPPQCt92kA2koMvkg4h6uhnEX/H0iXWL4CxWCK+C8=
          end_running_hash_object: 9CLag6JRdB4AAAABWP+BGwAAADAkK6BKPFKbOX46Kul0OiAYR5x52X0cJLgPvmOjupycWgXRyItITx7HrfSjH5LpU6Q=
          hashes_before:
          - RxKzucDUGgqBgR+CXXfAKgYuE/xhIaBlo+hmMKyxrm8nmSiaG3a9hlLGHh6+yXFm
          hashes_after:
          - TOJuZz3EUX1RNdRJBfz7n+V9cYyEm//ER9h3s/y1d8nzs0VqYltJFE0dPangRC6c
          - RiRHvjPQPqUXNlvDJ6lPiv40ZOPVV3VcWRH8GOKFf6Xv9jK0vUjR2qGfjI/IRZRy
          record_stream_object: 43CSm6VCnYsAAAABAAAA2gpgCBYqJAoQCLDqARCA3AsaBgjQ6f2WBhIQCLDqARCm5QsaBgjghf6WBjiR6EhCMDNd1b7xmTuNNiLcn2bdlAI=
          block_number: AAECoA==
        signature_files:
          "0.0.3": MWFmYzZlNWVjNGJiZTg0ZWJjNTVkMGViNDViMjE2Mzg2ZTQ2NjUzZTYyYmM1NjE2YThmZGJjNzQ1ZWIyMTQxNQ==
          "0.0.4": ZDI4ZDIwMGJiYTdkNDhmNTA3ZTE0MGZhNjIyOGFiYTdmMjlmZjhiMmEzZjJhOGVlYjg1NzQyZGMwNTNjZWM3MQ==
          "0.0.5": MWY0YmU5OGE3NWE4N2NkNjQ5ZTNlMWE1ODI1OTI3NTgwNWM1Y2RmNjNmYjA0YjMzMTdlZmI1MTEwNzQ2NDVjNw==
          "0.0.6": NzNiZTVmMTZkNmY4NTQ4MjdiN2M4MTEzZmFlY2I1YzIwNGI5ZjFkNjhiMzdkMzczNTg4OTRkOWFiZmM5N2U4Mw==
          "0.0.7": NDJiZTVmMTZkNmY4NTQ4MjdiN2M4MTEzZmFlY2I1YzIwNGI5ZjFkNjhiMzdkMzczNTg4OTRkOWFiZmM5N2U4Mw==
        version: 6
      properties:
        address_books:
          description: The network address book valid at the time of the transaction
          items:
            format: byte
            type: string
          type: array
        record_file:
          $ref: '#/components/schemas/StateProofResponseCompact_record_file'
        signature_files:
          additionalProperties:
            format: byte
            type: string
          description: The nodes' signature files for the record file
          type: object
        version:
          description: "The record file format version, either 5 or 6"
          format: int32
          minimum: 0
          type: integer
      required:
      - address_books
      - record_file
      - signature_files
      - version
      type: object
    TokenAllowancesResponse:
      example:
        links:
          next: next
        allowances:
        - null
        - null
      properties:
        allowances:
          items:
            $ref: '#/components/schemas/TokenAllowance'
          type: array
        links:
          $ref: '#/components/schemas/Links'
      type: object
    TokenBalancesResponse:
      example:
        balances:
        - account: 0.15.2
          balance: 1000
        links:
          next: next
        timestamp: "1586567700.453054000"
      properties:
        timestamp:
          example: "1586567700.453054000"
          nullable: true
          pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
          type: string
        balances:
          example:
          - account: 0.15.2
            balance: 1000
          items:
            $ref: '#/components/schemas/TokenDistribution_inner'
          type: array
        links:
          $ref: '#/components/schemas/Links'
      type: object
    TokenRelationshipResponse:
      example:
        tokens:
        - automatic_association: true
          balance: 5
          created_timestamp: "123456789.000000001"
          freeze_status: UNFROZEN
          kyc_status: GRANTED
          token_id: 0.0.27335
        - automatic_association: true
          balance: 5
          created_timestamp: "123456789.000000001"
          freeze_status: UNFROZEN
          kyc_status: GRANTED
          token_id: 0.0.27335
        links:
          next: next
      properties:
        tokens:
          items:
            $ref: '#/components/schemas/TokenRelationship'
          type: array
        links:
          $ref: '#/components/schemas/Links'
      type: object
    TokensResponse:
      example:
        tokens:
        - token_id: 0.0.1
          symbol: FIRSTMOVERLPDJH
          admin_key: null
          type: FUNGIBLE_COMMON
        - token_id: 0.0.1
          symbol: FIRSTMOVERLPDJH
          admin_key: null
          type: FUNGIBLE_COMMON
        links:
          next: next
      properties:
        tokens:
          items:
            $ref: '#/components/schemas/Token'
          type: array
        links:
          $ref: '#/components/schemas/Links'
      type: object
    TopicMessagesResponse:
      example:
        messages:
        - chunk_info:
            initial_transaction_id: 0.0.10-1234567890-000000321
            nonce: 3
            number: 1
            total: 2
            scheduled: true
          consensus_timestamp: "1234567890.000000001"
          message: bWVzc2FnZQ==
          payer_account_id: 0.0.10
          running_hash: cnVubmluZ19oYXNo
          running_hash_version: 2
          sequence_number: 1
          topic_id: 0.0.7
        - chunk_info:
            initial_transaction_id: 0.0.10-1234567890-000000321
            nonce: 3
            number: 1
            total: 2
            scheduled: true
          consensus_timestamp: "1234567890.000000001"
          message: bWVzc2FnZQ==
          payer_account_id: 0.0.10
          running_hash: cnVubmluZ19oYXNo
          running_hash_version: 2
          sequence_number: 1
          topic_id: 0.0.7
        links:
          next: next
      properties:
        messages:
          items:
            $ref: '#/components/schemas/TopicMessage'
          type: array
        links:
          $ref: '#/components/schemas/Links'
      type: object
    TransactionByIdResponse:
      example:
        transactions:
        - assessed_custom_fees:
          - amount: 100
            collector_account_id: 0.0.10
            effective_payer_account_ids:
            - 0.0.8
            - 0.0.72
            token_id: 0.0.90001
          bytes: null
          charged_tx_fee: 7
          consensus_timestamp: "1234567890.000000007"
          entity_id: 0.0.2281979
          max_fee: 33
          memo_base64: null
          name: CRYPTOTRANSFER
          nft_transfers:
          - is_approval: true
            receiver_account_id: 0.0.121
            sender_account_id: 0.0.122
            serial_number: 1
            token_id: 0.0.123
          - is_approval: true
            receiver_account_id: 0.0.321
            sender_account_id: 0.0.422
            serial_number: 2
            token_id: 0.0.123
          node: 0.0.3
          nonce: 0
          parent_consensus_timestamp: "1234567890.000000007"
          result: SUCCESS
          scheduled: false
          staking_reward_transfers:
          - account: 3
            amount: 200
          - account: 9
            amount: 300
          transaction_hash: vigzKe2J7fv4ktHBbNTSzQmKq7Lzdq1/lJMmHT+a2KgvdhAuadlvS4eKeqKjIRmW
          transaction_id: 0.0.8-1234567890-000000006
          token_transfers:
          - token_id: 0.0.90000
            account: 0.0.9
            amount: 1200
            is_approval: true
          - token_id: 0.0.90000
            account: 0.0.8
            amount: -1200
            is_approval: true
          transfers:
          - account: 0.0.3
            amount: 2
            is_approval: true
          - account: 0.0.8
            amount: -3
            is_approval: true
          - account: 0.0.98
            amount: 1
            is_approval: true
          - account: 0.0.800
            amount: 200
            is_approval: false
          - account: 0.0.800
            amount: 300
            is_approval: false
          valid_duration_seconds: 11
          valid_start_timestamp: "1234567890.000000006"
        - assessed_custom_fees:
          - amount: 100
            collector_account_id: 0.0.10
            effective_payer_account_ids:
            - 0.0.8
            - 0.0.72
            token_id: 0.0.90001
          bytes: null
          charged_tx_fee: 7
          consensus_timestamp: "1234567890.000000007"
          entity_id: 0.0.2281979
          max_fee: 33
          memo_base64: null
          name: CRYPTOTRANSFER
          nft_transfers:
          - is_approval: true
            receiver_account_id: 0.0.121
            sender_account_id: 0.0.122
            serial_number: 1
            token_id: 0.0.123
          - is_approval: true
            receiver_account_id: 0.0.321
            sender_account_id: 0.0.422
            serial_number: 2
            token_id: 0.0.123
          node: 0.0.3
          nonce: 0
          parent_consensus_timestamp: "1234567890.000000007"
          result: SUCCESS
          scheduled: false
          staking_reward_transfers:
          - account: 3
            amount: 200
          - account: 9
            amount: 300
          transaction_hash: vigzKe2J7fv4ktHBbNTSzQmKq7Lzdq1/lJMmHT+a2KgvdhAuadlvS4eKeqKjIRmW
          transaction_id: 0.0.8-1234567890-000000006
          token_transfers:
          - token_id: 0.0.90000
            account: 0.0.9
            amount: 1200
            is_approval: true
          - token_id: 0.0.90000
            account: 0.0.8
            amount: -1200
            is_approval: true
          transfers:
          - account: 0.0.3
            amount: 2
            is_approval: true
          - account: 0.0.8
            amount: -3
            is_approval: true
          - account: 0.0.98
            amount: 1
            is_approval: true
          - account: 0.0.800
            amount: 200
            is_approval: false
          - account: 0.0.800
            amount: 300
            is_approval: false
          valid_duration_seconds: 11
          valid_start_timestamp: "1234567890.000000006"
      properties:
        transactions:
          items:
            $ref: '#/components/schemas/TransactionDetail'
          type: array
      type: object
    TransactionsResponse:
      example:
        links:
          next: next
        transactions:
        - bytes: null
          charged_tx_fee: 7
          consensus_timestamp: "1234567890.000000007"
          entity_id: 0.0.2281979
          max_fee: 33
          memo_base64: null
          name: CRYPTOTRANSFER
          nft_transfers:
          - is_approval: true
            receiver_account_id: 0.0.121
            sender_account_id: 0.0.122
            serial_number: 1
            token_id: 0.0.123
          - is_approval: true
            receiver_account_id: 0.0.321
            sender_account_id: 0.0.422
            serial_number: 2
            token_id: 0.0.123
          node: 0.0.3
          nonce: 0
          parent_consensus_timestamp: "1234567890.000000007"
          result: SUCCESS
          scheduled: false
          staking_reward_transfers:
          - account: 3
            amount: 150
          - account: 9
            amount: 200
          transaction_hash: vigzKe2J7fv4ktHBbNTSzQmKq7Lzdq1/lJMmHT+a2KgvdhAuadlvS4eKeqKjIRmW
          transaction_id: 0.0.8-1234567890-000000006
          token_transfers:
          - token_id: 0.0.90000
            account: 0.0.9
            amount: 1200
            is_approval: false
          - token_id: 0.0.90000
            account: 0.0.8
            amount: -1200
            is_approval: false
          transfers:
          - account: 0.0.3
            amount: 2
            is_approval: false
          - account: 0.0.8
            amount: -3
            is_approval: false
          - account: 0.0.98
            amount: 1
            is_approval: false
          - account: 0.0.800
            amount: 150
            is_approval: false
          - account: 0.0.800
            amount: 200
            is_approval: false
          valid_duration_seconds: 11
          valid_start_timestamp: "1234567890.000000006"
        - bytes: null
          charged_tx_fee: 7
          consensus_timestamp: "1234567890.000000007"
          entity_id: 0.0.2281979
          max_fee: 33
          memo_base64: null
          name: CRYPTOTRANSFER
          nft_transfers:
          - is_approval: true
            receiver_account_id: 0.0.121
            sender_account_id: 0.0.122
            serial_number: 1
            token_id: 0.0.123
          - is_approval: true
            receiver_account_id: 0.0.321
            sender_account_id: 0.0.422
            serial_number: 2
            token_id: 0.0.123
          node: 0.0.3
          nonce: 0
          parent_consensus_timestamp: "1234567890.000000007"
          result: SUCCESS
          scheduled: false
          staking_reward_transfers:
          - account: 3
            amount: 150
          - account: 9
            amount: 200
          transaction_hash: vigzKe2J7fv4ktHBbNTSzQmKq7Lzdq1/lJMmHT+a2KgvdhAuadlvS4eKeqKjIRmW
          transaction_id: 0.0.8-1234567890-000000006
          token_transfers:
          - token_id: 0.0.90000
            account: 0.0.9
            amount: 1200
            is_approval: false
          - token_id: 0.0.90000
            account: 0.0.8
            amount: -1200
            is_approval: false
          transfers:
          - account: 0.0.3
            amount: 2
            is_approval: false
          - account: 0.0.8
            amount: -3
            is_approval: false
          - account: 0.0.98
            amount: 1
            is_approval: false
          - account: 0.0.800
            amount: 150
            is_approval: false
          - account: 0.0.800
            amount: 200
            is_approval: false
          valid_duration_seconds: 11
          valid_start_timestamp: "1234567890.000000006"
      properties:
        transactions:
          items:
            $ref: '#/components/schemas/Transaction'
          type: array
        links:
          $ref: '#/components/schemas/Links'
      type: object
    AccountInfo:
      example:
        account: 0.0.8
        alias: HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
        auto_renew_period: null
        balance:
          timestamp: "0.000002345"
          balance: 80
          tokens:
          - token_id: 0.0.200001
            balance: 8
        created_timestamp: "1562591528.000123456"
        decline_reward: false
        deleted: false
        ethereum_nonce: 10
        evm_address: 0xac384c53f03855fa1b3616052f8ba32c6c2a2fec
        expiry_timestamp: null
        key: null
        max_automatic_token_associations: 200
        memo: entity memo
        pending_reward: 100
        receiver_sig_required: false
        staked_account_id: null
        staked_node_id: 3
        stake_period_start: "172800000.000000000"
      properties:
        account:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        alias:
          description: RFC4648 no-padding base32 encoded account alias
          example: HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
          nullable: true
          pattern: "^(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8})$"
          type: string
        auto_renew_period:
          format: int64
          nullable: true
          type: integer
        balance:
          $ref: '#/components/schemas/Balance'
        created_timestamp:
          example: "1586567700.453054000"
          nullable: true
          pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
          type: string
        decline_reward:
          description: Whether the account declines receiving a staking reward
          type: boolean
        deleted:
          nullable: true
          type: boolean
        ethereum_nonce:
          format: int64
          nullable: true
          type: integer
        evm_address:
          description: A network entity encoded as an EVM address in hex.
          example: !!binary |-
            MHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxZjQx
          format: binary
          maxLength: 42
          minLength: 40
          nullable: true
          pattern: "^(0x)?[A-Fa-f0-9]{40}$"
          type: string
        expiry_timestamp:
          example: "1586567700.453054000"
          nullable: true
          pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
          type: string
        key:
          $ref: '#/components/schemas/Key'
        max_automatic_token_associations:
          format: int32
          nullable: true
          type: integer
        memo:
          nullable: true
          type: string
        pending_reward:
          description: |
            The pending reward in tinybars the account will receive in the next reward payout. Note the value is updated
            at the end of each staking period and there may be delay to reflect the changes in the past staking period.
          format: int64
          type: integer
        receiver_sig_required:
          nullable: true
          type: boolean
        staked_account_id:
          allOf:
          - $ref: '#/components/schemas/EntityId'
          - description: The account to which this account is staking
        staked_node_id:
          description: The id of the node to which this account is staking
          format: int64
          nullable: true
          type: integer
        stake_period_start:
          allOf:
          - $ref: '#/components/schemas/TimestampNullable'
          - description: |
              The staking period during which either the staking settings for this account changed (such as starting
              staking or changing stakedNode) or the most recent reward was earned, whichever is later. If this
              account is not currently staked to a node, then the value is null
      required:
      - account
      - alias
      - auto_renew_period
      - balance
      - created_timestamp
      - decline_reward
      - deleted
      - ethereum_nonce
      - evm_address
      - expiry_timestamp
      - key
      - max_automatic_token_associations
      - memo
      - receiver_sig_required
      - stake_period_start
      - staked_account_id
      - staked_node_id
      type: object
    Accounts:
      items:
        $ref: '#/components/schemas/AccountInfo'
      type: array
    AccountBalance:
      example:
        account: 0.15.10
        balance: 80
        tokens:
        - token_id: 0.0.200001
          balance: 8
      properties:
        account:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        balance:
          format: int64
          type: integer
        tokens:
          items:
            $ref: '#/components/schemas/TokenBalance'
          type: array
      required:
      - account
      - balance
      - tokens
      type: object
    AccountBalanceTransactions:
      allOf:
      - $ref: '#/components/schemas/AccountInfo'
      - properties:
          transactions:
            $ref: '#/components/schemas/Transactions'
          links:
            $ref: '#/components/schemas/Links'
        required:
        - links
        - transactions
        type: object
    Alias:
      description: RFC4648 no-padding base32 encoded account alias
      example: HIQQEXWKW53RKN4W6XXC4Q232SYNZ3SZANVZZSUME5B5PRGXL663UAQA
      nullable: true
      pattern: "^(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8})$"
      type: string
    Balance:
      example:
        timestamp: "0.000002345"
        balance: 80
        tokens:
        - token_id: 0.0.200001
          balance: 8
      nullable: true
      properties:
        timestamp:
          example: "1586567700.453054000"
          nullable: true
          pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
          type: string
        balance:
          format: int64
          nullable: true
          type: integer
        tokens:
          items:
            $ref: '#/components/schemas/Balance_tokens_inner'
          type: array
      required:
      - balance
      - timestamp
      - tokens
      type: object
    Bloom:
      example: !!binary |-
        MHg1NDkzNThjNGMyZTU3M2UwMjQxMGVmN2I1YTVmZmE1ZjM2ZGQ3Mzk4
      format: binary
      nullable: true
      type: string
    ChunkInfo:
      nullable: true
      properties:
        initial_transaction_id:
          $ref: '#/components/schemas/TransactionId'
        number:
          example: 1
          format: int32
          type: integer
        total:
          example: 2
          format: int32
          type: integer
      type: object
    Contract:
      example:
        auto_renew_period: 7776000
        max_automatic_token_associations: 0
        contract_id: 0.0.2
        expiration_timestamp: "1586567700.453054000"
        memo: contract memo
        created_timestamp: "1586567700.453054000"
        obtainer_id: 0.0.2
        evm_address: !!binary |-
          MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMWY0MQ==
        permanent_removal: true
        proxy_account_id: 0.0.2
        deleted: false
        file_id: 0.0.2
        auto_renew_account: 0.0.2
        admin_key:
          _type: ProtobufEncoded
          key: 421050820e1485acdd59726088e0e4a2130ebbbb70009f640ad95c78dd5a7b38
        timestamp:
          from: ""
          to: ""
      properties:
        admin_key:
          $ref: '#/components/schemas/Key'
        auto_renew_account:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        auto_renew_period:
          example: 7776000
          format: int64
          nullable: true
          type: integer
        contract_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        created_timestamp:
          example: "1586567700.453054000"
          nullable: true
          pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
          type: string
        deleted:
          example: false
          type: boolean
        evm_address:
          description: A network entity encoded as an EVM address in hex.
          example: !!binary |-
            MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMWY0MQ==
          format: binary
          maxLength: 42
          minLength: 40
          pattern: "^(0x)?[A-Fa-f0-9]{40}$"
          type: string
        expiration_timestamp:
          example: "1586567700.453054000"
          nullable: true
          pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
          type: string
        file_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        max_automatic_token_associations:
          format: int32
          nullable: true
          type: integer
        memo:
          example: contract memo
          type: string
        obtainer_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        permanent_removal:
          nullable: true
          type: boolean
        proxy_account_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        timestamp:
          $ref: '#/components/schemas/TimestampRange'
      type: object
    Contracts:
      items:
        $ref: '#/components/schemas/Contract'
      type: array
    ContractLog:
      allOf:
      - $ref: '#/components/schemas/ContractResultLog'
      - properties:
          block_hash:
            description: The hex encoded block (record file chain) hash
            example: 0x553f9311833391c0a3b2f9ed64540a89f2190a511986cd94889f1c0cf7fa63e898b1c6730f14a61755d1fb4ca05fb073
            type: string
          block_number:
            description: The block height calculated as the number of record files
              starting from zero since network start.
            example: 10
            format: int64
            type: integer
          root_contract_id:
            allOf:
            - $ref: '#/components/schemas/EntityId'
            - description: The executed contract that created this contract log
          timestamp:
            $ref: '#/components/schemas/Timestamp'
          transaction_hash:
            description: A hex encoded transaction hash
            example: 0x397022d1e5baeb89d0ab66e6bf602640610e6fb7e55d78638db861e2c6339aa9
            type: string
          transaction_index:
            description: The position of the transaction in the block
            example: 1
            format: int32
            nullable: true
            type: integer
        type: object
    ContractLogTopics:
      description: A list of hex encoded topics associated with this log event
      example:
      - 0xf4757a49b326036464bec6fe419a4ae38c8a02ce3e68bf0809674f6aab8ad300
      items:
        type: string
      type: array
    ContractAction:
      example:
        call_depth: 1
        gas_used: 50000
        index: 0
        recipient_type: ACCOUNT
        input: 0x123456
        caller: 0.0.2
        call_operation_type: CALL
        gas: 50000
        recipient: 0.0.2
        result_data: 0x123456
        result_data_type: OUTPUT
        from: 0x0000000000000000000000000000000000000065
        to: !!binary |-
          MHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxZjQx
        call_type: CALL
        value: 50000
        caller_type: ACCOUNT
        timestamp: "1586567700.453054000"
      properties:
        call_depth:
          description: The nesting depth of the call
          example: 1
          format: int32
          nullable: false
          type: integer
        call_operation_type:
          description: The type of the call operation
          enum:
          - CALL
          - CALLCODE
          - CREATE
          - CREATE2
          - DELEGATECALL
          - STATICCALL
          - UNKNOWN
          example: CALL
          nullable: false
          type: string
        call_type:
          description: The type of the call
          enum:
          - NO_ACTION
          - CALL
          - CREATE
          - PRECOMPILE
          - SYSTEM
          example: CALL
          nullable: false
          type: string
        caller:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        caller_type:
          description: The entity type of the caller
          enum:
          - ACCOUNT
          - CONTRACT
          example: ACCOUNT
          nullable: false
          type: string
        from:
          description: The EVM address of the caller
          example: 0x0000000000000000000000000000000000000065
          nullable: false
          type: string
        gas:
          description: Gas cost in tinybars
          example: 50000
          format: int64
          nullable: false
          type: integer
        gas_used:
          description: Gas used in tinybars
          example: 50000
          format: int64
          nullable: false
          type: integer
        index:
          description: The position of the action within the ordered list of actions
          example: 0
          format: int32
          nullable: false
          type: integer
        input:
          description: The hex encoded input data
          example: 0x123456
          nullable: true
          type: string
        recipient:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        recipient_type:
          description: The entity type of the recipient
          enum:
          - ACCOUNT
          - CONTRACT
          example: ACCOUNT
          nullable: true
          type: string
        result_data:
          description: The hex encoded result data
          example: 0x123456
          nullable: true
          type: string
        result_data_type:
          description: The type of the result data
          enum:
          - OUTPUT
          - REVERT_REASON
          - ERROR
          example: OUTPUT
          nullable: false
          type: string
        timestamp:
          example: "1586567700.453054000"
          pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
          type: string
        to:
          description: A network entity encoded as an EVM address in hex.
          example: !!binary |-
            MHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxZjQx
          format: binary
          maxLength: 42
          minLength: 40
          nullable: true
          pattern: "^(0x)?[A-Fa-f0-9]{40}$"
          type: string
        value:
          description: The value of the transaction in tinybars
          example: 50000
          format: int64
          nullable: false
          type: integer
      type: object
    ContractResult:
      example:
        failed_initcode: 0x856739
        chain_id: 0x0127
        function_parameters: 0xbb9f02dc6f0e3289f57a1f33b71c73aa8548ab8b
        contract_id: 0.0.2
        block_number: 10
        transaction_index: 1
        type: 2
        result: SUCCESS
        gas_limit: 100000
        max_priority_fee_per_gas: 0x100
        block_gas_used: 2000
        bloom: ""
        max_fee_per_gas: 0x5
        from: !!binary |-
          MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMWY0MQ==
        timestamp: "1586567700.453054000"
        error_message: Out of gas
        gas_price: 0x4a817c800
        amount: 10
        address: 0x25fe26adc577cc89172e6156c9e24f7b9751b762
        gas_used: 1000
        block_hash: 0x6ceecd8bb224da491
        access_list: 0xabcd
        nonce: 1
        r: 0xd693b532a80fed6392b428604171fb32fdbf953728a3a7ecc7d4062b1652c043
        s: 0x24e9c602ac800b983b035700a14b23f78a253ab762deab5dc27e3555a750b355
        v: 1
        created_contract_ids:
        - 0.0.2
        - 0.0.2
        to: !!binary |-
          MHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxZjQx
        call_result: 0x2b048531b38d2882e86044bc972e940ee0a01938
        hash: 0xfebbaa29c513d124a6377246ea3506ad917d740c21a88f61a1c55ba338fc2bb1
        status: "1"
      properties:
        access_list:
          description: The hex encoded access_list of the wrapped ethereum transaction
          example: 0xabcd
          nullable: true
          type: string
        address:
          description: The hex encoded evm address of contract
          example: 0x25fe26adc577cc89172e6156c9e24f7b9751b762
          type: string
        amount:
          description: The number of tinybars sent to the function
          example: 10
          format: int64
          nullable: true
          type: integer
        block_gas_used:
          description: The total amount of gas used in the block
          example: 2000
          format: int64
          nullable: true
          type: integer
        block_hash:
          description: The hex encoded block (record file chain) hash
          example: 0x6ceecd8bb224da491
          nullable: true
          type: string
        block_number:
          description: The block height calculated as the number of record files starting
            from zero since network start.
          example: 10
          format: int64
          nullable: true
          type: integer
        bloom:
          allOf:
          - $ref: '#/components/schemas/Bloom'
          - description: The hex encoded bloom filter of the contract result
        call_result:
          description: The hex encoded result returned by the function
          example: 0x2b048531b38d2882e86044bc972e940ee0a01938
          nullable: true
          type: string
        chain_id:
          description: The hex encoded chain_id of the wrapped ethereum transaction
          example: 0x0127
          nullable: true
          type: string
        contract_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        created_contract_ids:
          description: The list of smart contracts that were created by the function
            call.
          items:
            $ref: '#/components/schemas/EntityId'
          nullable: true
          type: array
        error_message:
          description: The message when an error occurs during smart contract execution
          example: Out of gas
          nullable: true
          type: string
        failed_initcode:
          description: The hex encoded initcode of a failed contract create transaction
          example: 0x856739
          type: string
        from:
          description: A network entity encoded as an EVM address in hex.
          example: !!binary |-
            MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMWY0MQ==
          format: binary
          maxLength: 42
          minLength: 40
          pattern: "^(0x)?[A-Fa-f0-9]{40}$"
          type: string
        function_parameters:
          description: The hex encoded parameters passed to the function
          example: 0xbb9f02dc6f0e3289f57a1f33b71c73aa8548ab8b
          nullable: true
          type: string
        gas_limit:
          description: The maximum units of gas allowed for contract execution
          example: 100000
          format: int64
          type: integer
        gas_price:
          description: The hex encoded gas_price of the wrapped ethereum transaction
          example: 0x4a817c800
          nullable: true
          type: string
        gas_used:
          description: The units of gas used to execute contract
          example: 1000
          format: int64
          nullable: true
          type: integer
        hash:
          description: A hex encoded 32 byte hash and it is only populated for Ethereum
            transaction case
          example: 0xfebbaa29c513d124a6377246ea3506ad917d740c21a88f61a1c55ba338fc2bb1
          type: string
        max_fee_per_gas:
          description: The hex encoded max_fee_per_gas of the wrapped ethereum transaction
          example: 0x5
          nullable: true
          type: string
        max_priority_fee_per_gas:
          description: The hex encoded max_priority_fee_per_gas of the wrapped ethereum
            transaction
          example: 0x100
          nullable: true
          type: string
        nonce:
          description: The nonce of the wrapped ethereum transaction
          example: 1
          format: int64
          nullable: true
          type: integer
        r:
          description: The hex encoded signature_r of the wrapped ethereum transaction
          example: 0xd693b532a80fed6392b428604171fb32fdbf953728a3a7ecc7d4062b1652c043
          nullable: true
          type: string
        result:
          description: The result of the transaction
          example: SUCCESS
          type: string
        s:
          description: The hex encoded signature_s of the wrapped ethereum transaction
          example: 0x24e9c602ac800b983b035700a14b23f78a253ab762deab5dc27e3555a750b355
          nullable: true
          type: string
        status:
          description: "The status of the transaction, 0x1 for a SUCCESS transaction\
            \ and 0x0 for all else"
          example: "1"
          type: string
        timestamp:
          example: "1586567700.453054000"
          pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
          type: string
        to:
          description: A network entity encoded as an EVM address in hex.
          example: !!binary |-
            MHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxZjQx
          format: binary
          maxLength: 42
          minLength: 40
          nullable: true
          pattern: "^(0x)?[A-Fa-f0-9]{40}$"
          type: string
        transaction_index:
          description: The position of the transaction in the block
          example: 1
          format: int64
          nullable: true
          type: integer
        type:
          description: "The type of the wrapped ethereum transaction, 0 (Pre-Eip1559)\
            \ or 2 (Post-Eip1559)"
          example: 2
          nullable: true
          type: integer
        v:
          description: The recovery_id of the wrapped ethereum transaction
          example: 1
          nullable: true
          type: integer
      type: object
    ContractResultDetails:
      allOf:
      - $ref: '#/components/schemas/ContractResult'
      - properties:
          access_list:
            description: The hex encoded access_list of the wrapped ethereum transaction
            example: 0xabcd
            nullable: true
            type: string
          address:
            description: The hex encoded evm address of contract
            example: 0x25fe26adc577cc89172e6156c9e24f7b9751b762
            type: string
          block_gas_used:
            description: The total amount of gas used in the block
            example: 2000
            format: int64
            nullable: true
            type: integer
          block_hash:
            description: The hex encoded block (record file chain) hash
            example: 0x6ceecd8bb224da491
            nullable: true
            type: string
          block_number:
            description: The block height calculated as the number of record files
              starting from zero since network start.
            example: 10
            format: int64
            nullable: true
            type: integer
          chain_id:
            description: The hex encoded chain_id of the wrapped ethereum transaction
            example: 0x0127
            nullable: true
            type: string
          failed_initcode:
            description: The hex encoded initcode of a failed contract create transaction
            example: 0x856739
            type: string
          gas_price:
            description: The hex encoded gas_price of the wrapped ethereum transaction
            example: 0x4a817c800
            nullable: true
            type: string
          hash:
            description: The hex encoded transaction hash
            example: 0x3531396130303866616264653464
            type: string
          logs:
            $ref: '#/components/schemas/ContractResultLogs'
          max_fee_per_gas:
            description: The hex encoded max_fee_per_gas of the wrapped ethereum transaction
            example: 0x5
            nullable: true
            type: string
          max_priority_fee_per_gas:
            description: The hex encoded max_priority_fee_per_gas of the wrapped ethereum
              transaction
            example: 0x100
            nullable: true
            type: string
          nonce:
            description: The nonce of the wrapped ethereum transaction
            example: 1
            format: int64
            nullable: true
            type: integer
          r:
            description: The hex encoded signature_r of the wrapped ethereum transaction
            example: 0xd693b532a80fed6392b428604171fb32fdbf953728a3a7ecc7d4062b1652c043
            nullable: true
            type: string
          s:
            description: The hex encoded signature_s of the wrapped ethereum transaction
            example: 0x24e9c602ac800b983b035700a14b23f78a253ab762deab5dc27e3555a750b355
            nullable: true
            type: string
          state_changes:
            $ref: '#/components/schemas/ContractResultStateChanges'
          transaction_index:
            description: The position of the transaction in the block
            example: 1
            format: int64
            nullable: true
            type: integer
          type:
            description: "The type of the wrapped ethereum transaction, 0 (Pre-Eip1559)\
              \ or 2 (Post-Eip1559)"
            example: 2
            nullable: true
            type: integer
          v:
            description: The recovery_id of the wrapped ethereum transaction
            example: 1
            nullable: true
            type: integer
        type: object
    ContractResultLog:
      properties:
        address:
          description: The hex encoded EVM address of the contract
          example: 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
          pattern: "^0x[0-9A-Fa-f]{40}$"
          type: string
        bloom:
          allOf:
          - $ref: '#/components/schemas/Bloom'
          - description: The hex encoded bloom filter of the contract log
        contract_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        data:
          description: The hex encoded data of the contract log
          example: 0x00000000000000000000000000000000000000000000000000000000000000fa
          nullable: true
          type: string
        index:
          description: The index of the contract log in the chain of logs for an execution
          example: 0
          type: integer
        topics:
          description: A list of hex encoded topics associated with this log event
          example:
          - 0xf4757a49b326036464bec6fe419a4ae38c8a02ce3e68bf0809674f6aab8ad300
          items:
            type: string
          type: array
      type: object
    ContractResultLogs:
      items:
        $ref: '#/components/schemas/ContractResultLog'
      type: array
    ContractState:
      example:
        address: !!binary |-
          MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMWY0MQ==
        contract_id: 0.0.2
        slot: !!binary |-
          MHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
          MDAwMDAwMGZh
        value: !!binary |-
          MHg4YzViZTFlNWViZWM3ZDViZDE0ZjcxNDI3ZDFlODRmM2RkMDMxNGMwZjdiMjI5MWU1YjIwMGFj
          OGM3YzNiOTI1
        timestamp: "1586567700.453054000"
      properties:
        address:
          description: A network entity encoded as an EVM address in hex.
          example: !!binary |-
            MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMWY0MQ==
          format: binary
          maxLength: 42
          minLength: 40
          pattern: "^(0x)?[A-Fa-f0-9]{40}$"
          type: string
        contract_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        timestamp:
          example: "1586567700.453054000"
          pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
          type: string
        slot:
          description: The hex encoded storage slot.
          example: !!binary |-
            MHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
            MDAwMDAwMGZh
          format: binary
          nullable: false
          type: string
        value:
          description: The hex encoded value to the slot. `0x` implies no value written.
          example: !!binary |-
            MHg4YzViZTFlNWViZWM3ZDViZDE0ZjcxNDI3ZDFlODRmM2RkMDMxNGMwZjdiMjI5MWU1YjIwMGFj
            OGM3YzNiOTI1
          format: binary
          nullable: false
          type: string
      required:
      - address
      - contract_id
      - slot
      - timestamp
      - value
      type: object
    ContractResultStateChange:
      properties:
        address:
          description: A network entity encoded as an EVM address in hex.
          example: !!binary |-
            MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMWY0MQ==
          format: binary
          maxLength: 42
          minLength: 40
          pattern: "^(0x)?[A-Fa-f0-9]{40}$"
          type: string
        contract_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        slot:
          description: The hex encoded storage slot changed.
          example: !!binary |-
            MHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
            MDAwMDAwMGZh
          format: binary
          type: string
        value_read:
          description: The hex encoded value read from the storage slot.
          example: !!binary |-
            MHg5N2MxZmMwYTZlZDU1NTFiYzgzMTU3MTMyNWU5YmRiMzY1ZDA2ODAzMTAwZGMyMDY0ODY0MGJh
            MjRjZTY5NzUw
          format: binary
          type: string
        value_written:
          description: The hex encoded value written to the slot. `null` implies no
            value written.
          example: !!binary |-
            MHg4YzViZTFlNWViZWM3ZDViZDE0ZjcxNDI3ZDFlODRmM2RkMDMxNGMwZjdiMjI5MWU1YjIwMGFj
            OGM3YzNiOTI1
          format: binary
          nullable: true
          type: string
      type: object
    ContractResultStateChanges:
      items:
        $ref: '#/components/schemas/ContractResultStateChange'
      type: array
    ContractResults:
      items:
        $ref: '#/components/schemas/ContractResult'
      type: array
    ContractActions:
      items:
        $ref: '#/components/schemas/ContractAction'
      type: array
    ContractLogs:
      items:
        $ref: '#/components/schemas/ContractLog'
      type: array
    CustomFees:
      example:
        royalty_fees:
        - amount:
            numerator: 15
            denominator: 37
          fallback_fee:
            denominating_token_id: 0.0.2
            amount: 100
          collector_account_id: 0.0.2
          all_collectors_are_exempt: false
        - amount:
            numerator: 15
            denominator: 37
          fallback_fee:
            denominating_token_id: 0.0.2
            amount: 100
          collector_account_id: 0.0.2
          all_collectors_are_exempt: false
        fractional_fees:
        - net_of_transfers: true
          denominating_token_id: 0.0.2
          amount:
            numerator: 12
            denominator: 29
          collector_account_id: 0.0.2
          all_collectors_are_exempt: false
          maximum: 120
          minimum: 30
        - net_of_transfers: true
          denominating_token_id: 0.0.2
          amount:
            numerator: 12
            denominator: 29
          collector_account_id: 0.0.2
          all_collectors_are_exempt: false
          maximum: 120
          minimum: 30
        created_timestamp: "1586567700.453054000"
        fixed_fees:
        - denominating_token_id: 0.0.2
          amount: 100
          collector_account_id: 0.0.2
          all_collectors_are_exempt: false
        - denominating_token_id: 0.0.2
          amount: 100
          collector_account_id: 0.0.2
          all_collectors_are_exempt: false
      properties:
        created_timestamp:
          example: "1586567700.453054000"
          pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
          type: string
        fixed_fees:
          items:
            $ref: '#/components/schemas/FixedFee'
          type: array
        fractional_fees:
          items:
            $ref: '#/components/schemas/FractionalFee'
          type: array
        royalty_fees:
          items:
            $ref: '#/components/schemas/RoyaltyFee'
          type: array
      type: object
    CryptoAllowance:
      allOf:
      - $ref: '#/components/schemas/Allowance'
      - properties:
          amount:
            description: The amount remaining of the original amount granted in tinybars.
          amount_granted:
            description: The granted amount of the spender's allowance in tinybars.
    CryptoAllowances:
      items:
        $ref: '#/components/schemas/CryptoAllowance'
      type: array
    EntityId:
      description: Network entity ID in the format of `shard.realm.num`
      example: 0.0.2
      nullable: true
      pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
      type: string
    EntityIdQuery:
      pattern: "^((gte?|lte?|eq|ne)\\:)?(\\d{1,10}\\.\\d{1,10}\\.)?\\d{1,10}$"
      type: string
    Error:
      properties:
        _status:
          $ref: '#/components/schemas/Error__status'
      type: object
    ContractCallRequest:
      example:
        data: !!binary |-
          MHg0N2YxYWFlNw==
        estimate: true
        gas: 15000000
        block: latest
        from: !!binary |-
          MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDRlMg==
        to: !!binary |-
          MHhkOWQwYzVjMGZmODU3NThiZGYwNWE3NjM2ZjgwMzZkNGQwNjVmNWI2
        value: 0
        gasPrice: 100000000
      properties:
        block:
          description: "Hexadecimal block number or the string \"latest\", \"pending\"\
            , \"earliest\". Defaults to \"latest\"."
          example: latest
          nullable: true
          pattern: "^((0x)?[0-9a-fA-F]+|(earliest|pending|latest))$"
          type: string
        data:
          description: Hexadecimal method signature and encoded parameters.
          example: !!binary |-
            MHg0N2YxYWFlNw==
          format: binary
          maxLength: 12288
          nullable: true
          pattern: "^(0x)?[0-9a-fA-F]+$"
          type: string
        estimate:
          description: Whether gas estimation is called. Defaults to false.
          example: true
          nullable: true
          type: boolean
        from:
          description: The 20-byte hexadecimal EVM address the transaction is sent
            from.
          example: !!binary |-
            MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDRlMg==
          format: binary
          maxLength: 42
          minLength: 40
          nullable: true
          pattern: "^(0x)?[A-Fa-f0-9]{40}$"
          type: string
        gas:
          description: Gas provided for the transaction execution. Defaults to 15000000.
          example: 15000000
          format: int64
          minimum: 0
          nullable: true
          type: integer
        gasPrice:
          description: Gas price used for each paid gas.
          example: 100000000
          format: int64
          minimum: 0
          nullable: true
          type: integer
        to:
          description: The 20-byte hexadecimal EVM address the transaction is directed
            to.
          example: !!binary |-
            MHhkOWQwYzVjMGZmODU3NThiZGYwNWE3NjM2ZjgwMzZkNGQwNjVmNWI2
          format: binary
          maxLength: 42
          minLength: 40
          nullable: false
          pattern: "^(0x)?[A-Fa-f0-9]{40}$"
          type: string
        value:
          description: Value sent with this transaction. Defaults to 0.
          example: 0
          format: int64
          minimum: 0
          nullable: true
          type: integer
      required:
      - to
      type: object
    ContractCallResponse:
      example:
        result: !!binary |-
          MHgwMDAwMDAwMDAwMDA2ZDhk
      properties:
        result:
          description: Result in hexadecimal from executed contract call.
          example: !!binary |-
            MHgwMDAwMDAwMDAwMDA2ZDhk
          format: binary
          nullable: false
          pattern: "^0x[0-9a-fA-F]+$"
          type: string
      type: object
    HederaHash:
      description: A hex encoded hedera transaction hash.
      maxLength: 98
      minLength: 96
      pattern: "^(0x)?[A-Fa-f0-9]{96}$"
      type: string
    EthereumHash:
      description: A hex encoded ethereum transaction hash.
      maxLength: 66
      minLength: 64
      pattern: "^(0x)?[A-Fa-f0-9]{64}$"
      type: string
    PositiveNumber:
      description: A positive number.
      format: int64
      minimum: 0
      type: integer
    EvmAddress:
      description: A network entity encoded as an EVM address in hex.
      example: !!binary |-
        MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMWY0MQ==
      format: binary
      maxLength: 42
      minLength: 40
      pattern: "^(0x)?[A-Fa-f0-9]{40}$"
      type: string
    EvmAddressWithShardRealm:
      description: A network entity encoded as an EVM address in hex.
      example: !!binary |-
        MHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxZjQx
      format: binary
      maxLength: 60
      minLength: 40
      pattern: "^(\\d{1,10}\\.){0,2}[A-Fa-f0-9]{40}$"
      type: string
    EvmAddressNullable:
      description: A network entity encoded as an EVM address in hex.
      example: !!binary |-
        MHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxZjQx
      format: binary
      maxLength: 42
      minLength: 40
      nullable: true
      pattern: "^(0x)?[A-Fa-f0-9]{40}$"
      type: string
    ExchangeRate:
      example:
        cent_equivalent: 596987
        expiration_time: 1649689200
        hbar_equivalent: 30000
      properties:
        cent_equivalent:
          example: 596987
          format: int32
          type: integer
        expiration_time:
          example: 1649689200
          format: int64
          type: integer
        hbar_equivalent:
          example: 30000
          format: int32
          type: integer
      type: object
    FixedFee:
      example:
        denominating_token_id: 0.0.2
        amount: 100
        collector_account_id: 0.0.2
        all_collectors_are_exempt: false
      properties:
        all_collectors_are_exempt:
          example: false
          nullable: false
          type: boolean
        amount:
          example: 100
          format: int64
          type: integer
        collector_account_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        denominating_token_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
      type: object
    FractionalFee:
      example:
        net_of_transfers: true
        denominating_token_id: 0.0.2
        amount:
          numerator: 12
          denominator: 29
        collector_account_id: 0.0.2
        all_collectors_are_exempt: false
        maximum: 120
        minimum: 30
      properties:
        all_collectors_are_exempt:
          example: false
          type: boolean
        amount:
          $ref: '#/components/schemas/FractionalFee_amount'
        collector_account_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        denominating_token_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        maximum:
          example: 120
          format: int64
          nullable: true
          type: integer
        minimum:
          example: 30
          format: int64
          type: integer
        net_of_transfers:
          example: true
          type: boolean
      type: object
    RoyaltyFee:
      example:
        amount:
          numerator: 15
          denominator: 37
        fallback_fee:
          denominating_token_id: 0.0.2
          amount: 100
        collector_account_id: 0.0.2
        all_collectors_are_exempt: false
      properties:
        all_collectors_are_exempt:
          example: false
          type: boolean
        amount:
          $ref: '#/components/schemas/RoyaltyFee_amount'
        collector_account_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        fallback_fee:
          $ref: '#/components/schemas/RoyaltyFee_fallback_fee'
      type: object
    Key:
      example:
        _type: ProtobufEncoded
        key: 421050820e1485acdd59726088e0e4a2130ebbbb70009f640ad95c78dd5a7b38
      nullable: true
      properties:
        _type:
          enum:
          - ECDSA_SECP256K1
          - ED25519
          - ProtobufEncoded
          example: ProtobufEncoded
          type: string
        key:
          example: 421050820e1485acdd59726088e0e4a2130ebbbb70009f640ad95c78dd5a7b38
          type: string
      type: object
    Links:
      example:
        next: next
      properties:
        next:
          nullable: true
          type: string
          example: null
      type: object
    NetworkNode:
      example:
        description: address book 1
        file_id: 0.0.102
        max_stake: 50000
        memo: 0.0.4
        min_stake: 1000
        node_account_id: 0.0.4
        node_cert_hash: 0x01d173753810c0aae794ba72d5443c292e9ff962b01046220dd99f5816422696e0569c977e2f169e1e5688afc8f4aa16
        node_id: 1
        public_key: 0x4a5ad514f0957fa170a676210c9bdbddf3bc9519702cf915fa6767a40463b96f
        reward_rate_start: 1000000
        service_endpoints:
        - ip_address_v4: 128.0.0.6
          port: 50216
        stake: 20000
        stake_not_rewarded: 19900
        stake_rewarded: 100
        staking_period:
          from: "1655164800.000000000"
          to: "1655251200.000000000"
        timestamp:
          from: "187654.000123457"
          to: null
      properties:
        description:
          description: a memo associated with the address book
          nullable: true
          type: string
        file_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        max_stake:
          description: The maximum stake (rewarded or not rewarded) this node can
            have as consensus weight
          format: int64
          nullable: true
          type: integer
        memo:
          description: memo
          nullable: true
          type: string
        min_stake:
          description: |
            The minimum stake (rewarded or not rewarded) this node must reach before having non-zero consensus weight
          format: int64
          nullable: true
          type: integer
        node_account_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        node_id:
          description: An identifier for the node
          format: int64
          type: integer
        node_cert_hash:
          description: hex encoded hash of the node's TLS certificate
          nullable: true
          type: string
        public_key:
          description: hex encoded X509 RSA public key used to verify stream file
            signature
          nullable: true
          type: string
        reward_rate_start:
          description: The total tinybars earned by this node per whole hbar in the
            last staking period
          format: int64
          nullable: true
          type: integer
        service_endpoints:
          items:
            $ref: '#/components/schemas/ServiceEndpoint'
          type: array
        stake:
          description: The node consensus weight at the beginning of the staking period
          format: int64
          nullable: true
          type: integer
        stake_not_rewarded:
          description: |
            The sum (balance + stakedToMe) for all accounts staked to this node with declineReward=true at the
            beginning of the staking period
          format: int64
          nullable: true
          type: integer
        stake_rewarded:
          description: |
            The sum (balance + staked) for all accounts staked to the node that are not declining rewards at the
            beginning of the staking period
          format: int64
          nullable: true
          type: integer
        staking_period:
          $ref: '#/components/schemas/NetworkNode_staking_period'
        timestamp:
          $ref: '#/components/schemas/TimestampRange'
      required:
      - description
      - file_id
      - max_stake
      - memo
      - min_stake
      - node_account_id
      - node_cert_hash
      - node_id
      - public_key
      - reward_rate_start
      - service_endpoints
      - stake
      - stake_not_rewarded
      - stake_rewarded
      - staking_period
      - timestamp
      type: object
    NetworkNodes:
      items:
        $ref: '#/components/schemas/NetworkNode'
      type: array
    NetworkFee:
      example:
        gas: 0
        transaction_type: transaction_type
      properties:
        gas:
          description: gas cost in tinybars
          format: int64
          type: integer
        transaction_type:
          description: type of the transaction
          type: string
      type: object
    NetworkFees:
      items:
        $ref: '#/components/schemas/NetworkFee'
      type: array
    NetworkStakeResponse:
      example:
        max_stake_rewarded: 10
        max_staking_reward_rate_per_hbar: 17808
        max_total_reward: 20
        node_reward_fee_fraction: 1.0
        reserved_staking_rewards: 30
        reward_balance_threshold: 40
        stake_total: 35000000000000000
        staking_period:
          from: "1655164800.000000000"
          to: "1655251200.000000000"
        staking_period_duration: 1440
        staking_periods_stored: 365
        staking_reward_fee_fraction: 1.0
        staking_reward_rate: 100000000000
        staking_start_threshold: 25000000000000000
        unreserved_staking_reward_balance: 50
      properties:
        max_stake_rewarded:
          description: |
            The maximum amount of tinybar that can be staked for reward while still achieving
            the maximum per-hbar reward rate
          format: int64
          type: integer
        max_staking_reward_rate_per_hbar:
          description: "The maximum reward rate, in tinybars per whole hbar, that\
            \ any account can receive in a day"
          format: int64
          type: integer
        max_total_reward:
          description: |
            The total tinybars to be paid as staking rewards in the ending period,
            after applying the settings for the 0.0.800 balance threshold and the maximum stake rewarded
          format: int64
          type: integer
        node_reward_fee_fraction:
          description: The fraction between zero and one of the network and service
            fees paid to the node reward account 0.0.801
          format: float
          type: number
        reserved_staking_rewards:
          description: |
            The amount of the staking reward funds of account 0.0.800 reserved to pay pending
            rewards that have been earned but not collected
          format: int64
          type: integer
        reward_balance_threshold:
          description: |
            The unreserved tinybar balance of account 0.0.800 required to achieve the
            maximum per-hbar reward rate
          format: int64
          type: integer
        stake_total:
          description: The total amount staked to the network in tinybars the start
            of the current staking period
          format: int64
          type: integer
        staking_period:
          $ref: '#/components/schemas/NetworkStakeResponse_staking_period'
        staking_period_duration:
          description: The number of minutes in a staking period
          format: int64
          type: integer
        staking_periods_stored:
          description: The number of staking periods for which the reward is stored
            for each node
          format: int64
          type: integer
        staking_reward_fee_fraction:
          description: The fraction between zero and one of the network and service
            fees paid to the staking reward account 0.0.800
          format: float
          type: number
        staking_reward_rate:
          description: The total number of tinybars to be distributed as staking rewards
            each period
          format: int64
          type: integer
        staking_start_threshold:
          description: The minimum balance of staking reward account 0.0.800 required
            to active rewards
          format: int64
          type: integer
        unreserved_staking_reward_balance:
          description: |
            The unreserved balance of account 0.0.800 at the close of the just-ending period;
            this value is used to compute the HIP-782 balance ratio
          format: int64
          type: integer
      required:
      - max_stake_rewarded
      - max_staking_reward_rate_per_hbar
      - max_total_reward
      - node_reward_fee_fraction
      - reserved_staking_rewards
      - reward_balance_threshold
      - stake_total
      - staking_period
      - staking_period_duration
      - staking_periods_stored
      - staking_reward_fee_fraction
      - staking_reward_rate
      - staking_start_threshold
      - unreserved_staking_reward_balance
      type: object
    Nft:
      example:
        account_id: 0.1.2
        created_timestamp: "1234567890.000000001"
        delegating_spender: 0.0.400
        deleted: false
        metadata: VGhpcyBpcyBhIHRlc3QgTkZU
        modified_timestamp: "1610682445.003266001"
        serial_number: 124
        spender_id: 0.0.500
        token_id: 0.0.222
      properties:
        account_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        created_timestamp:
          example: "1586567700.453054000"
          nullable: true
          pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
          type: string
        delegating_spender:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        deleted:
          description: whether the nft or the token it belongs to has been deleted
          type: boolean
        metadata:
          description: base64 encoded binary data
          format: byte
          type: string
        modified_timestamp:
          example: "1586567700.453054000"
          nullable: true
          pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
          type: string
        serial_number:
          example: 1
          format: int64
          type: integer
        spender:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        token_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
      type: object
    Nfts:
      example:
        nfts:
        - account_id: 0.1.2
          created_timestamp: "1234567890.000000001"
          delegating_spender: 0.0.400
          deleted: false
          metadata: VGhpcyBpcyBhIHRlc3QgTkZU
          modified_timestamp: "1610682445.003266001"
          serial_number: 124
          spender_id: 0.0.500
          token_id: 0.0.222
        - account_id: 0.1.2
          created_timestamp: "1234567890.000000001"
          delegating_spender: 0.0.400
          deleted: false
          metadata: VGhpcyBpcyBhIHRlc3QgTkZU
          modified_timestamp: "1610682445.003266001"
          serial_number: 124
          spender_id: 0.0.500
          token_id: 0.0.222
        links:
          next: next
      properties:
        nfts:
          items:
            $ref: '#/components/schemas/Nft'
          type: array
        links:
          $ref: '#/components/schemas/Links'
      type: object
    NftTransactionTransfer:
      example:
        consensus_timestamp: "1618591023.997420021"
        is_approval: false
        nonce: 0
        receiver_account_id: 0.0.11
        sender_account_id: 0.0.10
        transaction_id: 0.0.19789-1618591023-997420021
        type: CRYPTOTRANSFER
      properties:
        consensus_timestamp:
          example: "1586567700.453054000"
          pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
          type: string
        is_approval:
          type: boolean
        nonce:
          minimum: 0
          type: integer
        receiver_account_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        sender_account_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        transaction_id:
          type: string
        type:
          $ref: '#/components/schemas/TransactionTypes'
      required:
      - consensus_timestamp
      - is_approval
      - nonce
      - receiver_account_id
      - sender_account_id
      - transaction_id
      - type
      type: object
    Block:
      example:
        count: 3
        gas_used: 300000
        hapi_version: 0.11.0
        hash: 0x3c08bbbee74d287b1dcd3f0ca6d1d2cb92c90883c4acf9747de9f3f3162ad25b999fc7e86699f60f2a3fb3ed9a646c6b
        logs_bloom: 0x
        name: 2022-05-03T06_46_26.060890949Z.rcd
        number: 77
        previous_hash: 0xf7d6481f659c866c35391ee230c374f163642ebf13a5e604e04a95a9ca48a298dc2dfa10f51bcbaab8ae23bc6d662a0b
        size: 8192
        timestamp:
          from: "1651560386.060890949"
          to: "1651560386.661997287"
      properties:
        count:
          minimum: 0
          type: integer
        gas_used:
          format: int64
          minimum: 0
          nullable: true
          type: integer
        hapi_version:
          nullable: true
          type: string
        hash:
          type: string
        logs_bloom:
          description: A hex encoded 256-byte array with 0x prefix
          nullable: true
          pattern: "^0x[0-9a-fA-F]{512}$"
          type: string
        name:
          type: string
        number:
          minimum: 0
          type: integer
        previous_hash:
          type: string
        size:
          nullable: true
          type: integer
        timestamp:
          $ref: '#/components/schemas/Block_timestamp'
      type: object
    Blocks:
      items:
        $ref: '#/components/schemas/Block'
      type: array
    NftTransactionHistory:
      example:
        links:
          next: next
        transactions:
        - consensus_timestamp: "1618591023.997420021"
          is_approval: false
          nonce: 0
          receiver_account_id: 0.0.11
          sender_account_id: 0.0.10
          transaction_id: 0.0.19789-1618591023-997420021
          type: CRYPTOTRANSFER
        - consensus_timestamp: "1618591023.997420021"
          is_approval: false
          nonce: 0
          receiver_account_id: 0.0.11
          sender_account_id: 0.0.10
          transaction_id: 0.0.19789-1618591023-997420021
          type: CRYPTOTRANSFER
      properties:
        transactions:
          items:
            $ref: '#/components/schemas/NftTransactionTransfer'
          type: array
        links:
          $ref: '#/components/schemas/Links'
      required:
      - links
      - transactions
      type: object
    Schedule:
      example:
        executed_timestamp: "1586567700.453054000"
        deleted: false
        wait_for_expiry: true
        payer_account_id: 0.0.2
        creator_account_id: 0.0.2
        consensus_timestamp: "1586567700.453054000"
        expiration_time: "1586567700.453054000"
        memo: created on 02/10/2021
        transaction_body: !!binary |-
          S2Q2dHZ1OD0=
        admin_key:
          _type: ProtobufEncoded
          key: 421050820e1485acdd59726088e0e4a2130ebbbb70009f640ad95c78dd5a7b38
        schedule_id: 0.0.2
        signatures:
        - signature: !!binary |-
            M3EyKzd3QUJBUU1McWdNTXdRPT0=
          consensus_timestamp: "1586567700.453054000"
          public_key_prefix: !!binary |-
            QUFFQkF3dXFBd3pC
          type: ED25519
        - signature: !!binary |-
            M3EyKzd3QUJBUU1McWdNTXdRPT0=
          consensus_timestamp: "1586567700.453054000"
          public_key_prefix: !!binary |-
            QUFFQkF3dXFBd3pC
          type: ED25519
      properties:
        admin_key:
          $ref: '#/components/schemas/Key'
        consensus_timestamp:
          example: "1586567700.453054000"
          pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
          type: string
        creator_account_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        deleted:
          example: false
          type: boolean
        executed_timestamp:
          example: "1586567700.453054000"
          nullable: true
          pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
          type: string
        expiration_time:
          example: "1586567700.453054000"
          nullable: true
          pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
          type: string
        memo:
          example: created on 02/10/2021
          type: string
        payer_account_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        schedule_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        signatures:
          items:
            $ref: '#/components/schemas/ScheduleSignature'
          type: array
        transaction_body:
          example: !!binary |-
            S2Q2dHZ1OD0=
          format: byte
          type: string
        wait_for_expiry:
          type: boolean
      type: object
    Schedules:
      items:
        $ref: '#/components/schemas/Schedule'
      type: array
    ScheduleSignature:
      example:
        signature: !!binary |-
          M3EyKzd3QUJBUU1McWdNTXdRPT0=
        consensus_timestamp: "1586567700.453054000"
        public_key_prefix: !!binary |-
          QUFFQkF3dXFBd3pC
        type: ED25519
      properties:
        consensus_timestamp:
          example: "1586567700.453054000"
          pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
          type: string
        public_key_prefix:
          example: !!binary |-
            QUFFQkF3dXFBd3pC
          format: byte
          type: string
        signature:
          example: !!binary |-
            M3EyKzd3QUJBUU1McWdNTXdRPT0=
          format: byte
          type: string
        type:
          enum:
          - CONTRACT
          - ED25519
          - RSA_3072
          - ECDSA_384
          - ECDSA_SECP256K1
          - UNKNOWN
          example: ED25519
          type: string
      type: object
    ServiceEndpoint:
      example:
        ip_address_v4: 127.0.0.1
        port: 50211
      properties:
        ip_address_v4:
          type: string
        port:
          format: int32
          type: integer
      required:
      - ip_address_v4
      - port
      type: object
    ServiceEndpoints:
      items:
        $ref: '#/components/schemas/ServiceEndpoint'
      type: array
    StakingReward:
      example:
        account_id: 0.0.1000
        amount: 10
        timestamp: "1234567890.000000001"
      properties:
        account_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        amount:
          description: The number of tinybars awarded
          example: 10
          format: int64
          nullable: false
          type: integer
        timestamp:
          example: "1586567700.453054000"
          pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
          type: string
      required:
      - account_id
      - amount
      - timestamp
      type: object
    StakingRewardTransfer:
      description: A staking reward transfer
      example:
        account_id: 0.0.1000
        amount: 10
      properties:
        account:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        amount:
          description: The number of tinybars awarded
          example: 10
          format: int64
          nullable: false
          type: integer
      required:
      - account
      - amount
      type: object
    StakingRewardTransfers:
      items:
        $ref: '#/components/schemas/StakingRewardTransfer'
      type: array
    Timestamp:
      example: "1586567700.453054000"
      pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
      type: string
    TimestampNullable:
      example: "1586567700.453054000"
      nullable: true
      pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
      type: string
    TimestampRange:
      description: A timestamp range an entity is valid for
      example:
        from: ""
        to: ""
      properties:
        from:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The inclusive from timestamp in seconds
        to:
          allOf:
          - $ref: '#/components/schemas/TimestampNullable'
          - description: The exclusive to timestamp in seconds
      type: object
    TimestampRangeNullable:
      description: A timestamp range an entity is valid for
      nullable: true
      properties:
        from:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The inclusive from timestamp in seconds
        to:
          allOf:
          - $ref: '#/components/schemas/TimestampNullable'
          - description: The exclusive to timestamp in seconds
      type: object
    Token:
      example:
        token_id: 0.0.1
        symbol: FIRSTMOVERLPDJH
        admin_key: null
        type: FUNGIBLE_COMMON
      properties:
        token_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        symbol:
          type: string
        admin_key:
          $ref: '#/components/schemas/Key'
        type:
          type: string
      required:
      - admin_key
      - symbol
      - token_id
      - type
      type: object
    TokenAllowance:
      allOf:
      - $ref: '#/components/schemas/Allowance'
      - properties:
          token_id:
            $ref: '#/components/schemas/EntityId'
    TokenAllowances:
      items:
        $ref: '#/components/schemas/TokenAllowance'
      type: array
    TokenBalance:
      example:
        token_id: 0.0.200001
        balance: 8
      properties:
        token_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        balance:
          format: int64
          type: integer
      required:
      - balance
      - token_id
      type: object
    TokenDistribution:
      example:
      - account: 0.15.2
        balance: 1000
      items:
        $ref: '#/components/schemas/TokenDistribution_inner'
      type: array
    TokenInfo:
      example:
        kyc_key:
          _type: ProtobufEncoded
          key: 421050820e1485acdd59726088e0e4a2130ebbbb70009f640ad95c78dd5a7b38
        symbol: ORIGINALRDKSE
        treasury_account_id: 0.0.2
        supply_type: INFINITE
        fee_schedule_key:
          _type: ProtobufEncoded
          key: 421050820e1485acdd59726088e0e4a2130ebbbb70009f640ad95c78dd5a7b38
        memo: token memo
        type: FUNGIBLE_COMMON
        wipe_key:
          _type: ProtobufEncoded
          key: 421050820e1485acdd59726088e0e4a2130ebbbb70009f640ad95c78dd5a7b38
        token_id: 0.0.2
        pause_status: UNPAUSED
        expiry_timestamp: 1234567890100000
        auto_renew_period: 0
        pause_key:
          _type: ProtobufEncoded
          key: 421050820e1485acdd59726088e0e4a2130ebbbb70009f640ad95c78dd5a7b38
        freeze_key:
          _type: ProtobufEncoded
          key: 421050820e1485acdd59726088e0e4a2130ebbbb70009f640ad95c78dd5a7b38
        total_supply: "1000000"
        created_timestamp: "1586567700.453054000"
        initial_supply: "1000000"
        supply_key:
          _type: ProtobufEncoded
          key: 421050820e1485acdd59726088e0e4a2130ebbbb70009f640ad95c78dd5a7b38
        modified_timestamp: "1586567700.453054000"
        freeze_default: false
        deleted: true
        decimals: "1000"
        max_supply: "9223372036854775807"
        name: Token name
        auto_renew_account: 0.0.2
        admin_key:
          _type: ProtobufEncoded
          key: 421050820e1485acdd59726088e0e4a2130ebbbb70009f640ad95c78dd5a7b38
        custom_fees:
          royalty_fees:
          - amount:
              numerator: 15
              denominator: 37
            fallback_fee:
              denominating_token_id: 0.0.2
              amount: 100
            collector_account_id: 0.0.2
            all_collectors_are_exempt: false
          - amount:
              numerator: 15
              denominator: 37
            fallback_fee:
              denominating_token_id: 0.0.2
              amount: 100
            collector_account_id: 0.0.2
            all_collectors_are_exempt: false
          fractional_fees:
          - net_of_transfers: true
            denominating_token_id: 0.0.2
            amount:
              numerator: 12
              denominator: 29
            collector_account_id: 0.0.2
            all_collectors_are_exempt: false
            maximum: 120
            minimum: 30
          - net_of_transfers: true
            denominating_token_id: 0.0.2
            amount:
              numerator: 12
              denominator: 29
            collector_account_id: 0.0.2
            all_collectors_are_exempt: false
            maximum: 120
            minimum: 30
          created_timestamp: "1586567700.453054000"
          fixed_fees:
          - denominating_token_id: 0.0.2
            amount: 100
            collector_account_id: 0.0.2
            all_collectors_are_exempt: false
          - denominating_token_id: 0.0.2
            amount: 100
            collector_account_id: 0.0.2
            all_collectors_are_exempt: false
      properties:
        admin_key:
          $ref: '#/components/schemas/Key'
        auto_renew_account:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        auto_renew_period:
          format: int64
          nullable: true
          type: integer
          example: null
        created_timestamp:
          example: "1586567700.453054000"
          pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
          type: string
        decimals:
          example: "1000"
          type: string
        deleted:
          example: true
          nullable: true
          type: boolean
        expiry_timestamp:
          example: 1234567890100000
          format: int64
          nullable: true
          type: integer
        fee_schedule_key:
          $ref: '#/components/schemas/Key'
        freeze_default:
          example: false
          type: boolean
        freeze_key:
          $ref: '#/components/schemas/Key'
        initial_supply:
          example: "1000000"
          type: string
        kyc_key:
          $ref: '#/components/schemas/Key'
        max_supply:
          example: "9223372036854775807"
          type: string
        modified_timestamp:
          example: "1586567700.453054000"
          pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
          type: string
        name:
          example: Token name
          type: string
        memo:
          example: token memo
          type: string
        pause_key:
          $ref: '#/components/schemas/Key'
        pause_status:
          enum:
          - NOT_APPLICABLE
          - PAUSED
          - UNPAUSED
          example: UNPAUSED
          type: string
        supply_key:
          $ref: '#/components/schemas/Key'
        supply_type:
          enum:
          - FINITE
          - INFINITE
          example: INFINITE
          type: string
        symbol:
          example: ORIGINALRDKSE
          type: string
        token_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        total_supply:
          example: "1000000"
          type: string
        treasury_account_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        type:
          enum:
          - FUNGIBLE_COMMON
          - NON_FUNGIBLE_UNIQUE
          example: FUNGIBLE_COMMON
          type: string
        wipe_key:
          $ref: '#/components/schemas/Key'
        custom_fees:
          $ref: '#/components/schemas/CustomFees'
      type: object
    TokenRelationship:
      example:
        automatic_association: true
        balance: 5
        created_timestamp: "123456789.000000001"
        freeze_status: UNFROZEN
        kyc_status: GRANTED
        token_id: 0.0.27335
      properties:
        automatic_association:
          description: Specifies if the relationship is implicitly/explicitly associated.
          example: true
          nullable: false
          type: boolean
        balance:
          description: "For FUNGIBLE_COMMON, the balance that the account holds in\
            \ the smallest denomination. For NON_FUNGIBLE_UNIQUE, the number of NFTs\
            \ held by the account."
          example: 5
          format: int64
          nullable: false
          type: integer
        created_timestamp:
          example: "1586567700.453054000"
          pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
          type: string
        freeze_status:
          description: The Freeze status of the account.
          enum:
          - NOT_APPLICABLE
          - FROZEN
          - UNFROZEN
          example: UNFROZEN
          nullable: false
          type: string
        kyc_status:
          description: The KYC status of the account.
          enum:
          - NOT_APPLICABLE
          - GRANTED
          - REVOKED
          example: GRANTED
          nullable: false
          type: string
        token_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
      required:
      - automatic_association
      - balance
      - created_timestamp
      - freeze_status
      - kyc_status
      - token_id
      type: object
    LogTopicQueryParam:
      items:
        pattern: "^(0x)?[0-9A-Fa-f]{1,64}$"
        type: string
      type: array
    TransactionTypes:
      enum:
      - CONSENSUSCREATETOPIC
      - CONSENSUSDELETETOPIC
      - CONSENSUSSUBMITMESSAGE
      - CONSENSUSUPDATETOPIC
      - CONTRACTCALL
      - CONTRACTCREATEINSTANCE
      - CONTRACTDELETEINSTANCE
      - CONTRACTUPDATEINSTANCE
      - CRYPTOADDLIVEHASH
      - CRYPTOAPPROVEALLOWANCE
      - CRYPTOCREATEACCOUNT
      - CRYPTODELETE
      - CRYPTODELETEALLOWANCE
      - CRYPTODELETELIVEHASH
      - CRYPTOTRANSFER
      - CRYPTOUPDATEACCOUNT
      - ETHEREUMTRANSACTION
      - FILEAPPEND
      - FILECREATE
      - FILEDELETE
      - FILEUPDATE
      - FREEZE
      - NODESTAKEUPDATE
      - SCHEDULECREATE
      - SCHEDULEDELETE
      - SCHEDULESIGN
      - SYSTEMDELETE
      - SYSTEMUNDELETE
      - TOKENASSOCIATE
      - TOKENBURN
      - TOKENCREATION
      - TOKENDELETION
      - TOKENDISSOCIATE
      - TOKENFEESCHEDULEUPDATE
      - TOKENFREEZE
      - TOKENGRANTKYC
      - TOKENMINT
      - TOKENPAUSE
      - TOKENREVOKEKYC
      - TOKENUNFREEZE
      - TOKENUNPAUSE
      - TOKENUPDATE
      - TOKENWIPE
      - UNCHECKEDSUBMIT
      - UNKNOWN
      - UTILPRNG
      type: string
    Tokens:
      items:
        $ref: '#/components/schemas/Token'
      type: array
    TopicMessage:
      example:
        chunk_info:
          initial_transaction_id: 0.0.10-1234567890-000000321
          nonce: 3
          number: 1
          total: 2
          scheduled: true
        consensus_timestamp: "1234567890.000000001"
        message: bWVzc2FnZQ==
        payer_account_id: 0.0.10
        running_hash: cnVubmluZ19oYXNo
        running_hash_version: 2
        sequence_number: 1
        topic_id: 0.0.7
      properties:
        chunk_info:
          $ref: '#/components/schemas/ChunkInfo'
        consensus_timestamp:
          example: "1586567700.453054000"
          pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
          type: string
        message:
          type: string
        payer_account_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        running_hash:
          format: byte
          type: string
        running_hash_version:
          format: int32
          type: integer
        sequence_number:
          format: int64
          type: integer
        topic_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
      required:
      - consensus_timestamp
      - message
      - payer_account_id
      - running_hash
      - running_hash_version
      - sequence_number
      - topic_id
      type: object
    TopicMessages:
      items:
        $ref: '#/components/schemas/TopicMessage'
      type: array
    Transaction:
      example:
        bytes: null
        charged_tx_fee: 7
        consensus_timestamp: "1234567890.000000007"
        entity_id: 0.0.2281979
        max_fee: 33
        memo_base64: null
        name: CRYPTOTRANSFER
        nft_transfers:
        - is_approval: true
          receiver_account_id: 0.0.121
          sender_account_id: 0.0.122
          serial_number: 1
          token_id: 0.0.123
        - is_approval: true
          receiver_account_id: 0.0.321
          sender_account_id: 0.0.422
          serial_number: 2
          token_id: 0.0.123
        node: 0.0.3
        nonce: 0
        parent_consensus_timestamp: "1234567890.000000007"
        result: SUCCESS
        scheduled: false
        staking_reward_transfers:
        - account: 3
          amount: 150
        - account: 9
          amount: 200
        transaction_hash: vigzKe2J7fv4ktHBbNTSzQmKq7Lzdq1/lJMmHT+a2KgvdhAuadlvS4eKeqKjIRmW
        transaction_id: 0.0.8-1234567890-000000006
        token_transfers:
        - token_id: 0.0.90000
          account: 0.0.9
          amount: 1200
          is_approval: false
        - token_id: 0.0.90000
          account: 0.0.8
          amount: -1200
          is_approval: false
        transfers:
        - account: 0.0.3
          amount: 2
          is_approval: false
        - account: 0.0.8
          amount: -3
          is_approval: false
        - account: 0.0.98
          amount: 1
          is_approval: false
        - account: 0.0.800
          amount: 150
          is_approval: false
        - account: 0.0.800
          amount: 200
          is_approval: false
        valid_duration_seconds: 11
        valid_start_timestamp: "1234567890.000000006"
      properties:
        bytes:
          format: byte
          nullable: true
          type: string
        charged_tx_fee:
          format: int64
          type: integer
        consensus_timestamp:
          example: "1586567700.453054000"
          pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
          type: string
        entity_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        max_fee:
          type: string
        memo_base64:
          format: byte
          nullable: true
          type: string
        name:
          $ref: '#/components/schemas/TransactionTypes'
        nft_transfers:
          items:
            $ref: '#/components/schemas/Transaction_nft_transfers_inner'
          type: array
        node:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        nonce:
          minimum: 0
          type: integer
        parent_consensus_timestamp:
          example: "1586567700.453054000"
          nullable: true
          pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
          type: string
        result:
          type: string
        scheduled:
          type: boolean
        staking_reward_transfers:
          items:
            $ref: '#/components/schemas/StakingRewardTransfer'
          type: array
        token_transfers:
          items:
            $ref: '#/components/schemas/Transaction_token_transfers_inner'
          type: array
        transaction_hash:
          format: byte
          type: string
        transaction_id:
          type: string
        transfers:
          items:
            $ref: '#/components/schemas/Transaction_transfers_inner'
          type: array
        valid_duration_seconds:
          type: string
        valid_start_timestamp:
          example: "1586567700.453054000"
          pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
          type: string
      type: object
    TransactionDetail:
      allOf:
      - $ref: '#/components/schemas/Transaction'
      - properties:
          assessed_custom_fees:
            items:
              $ref: '#/components/schemas/TransactionDetail_allOf_assessed_custom_fees'
            type: array
        type: object
      example:
        assessed_custom_fees:
        - amount: 100
          collector_account_id: 0.0.10
          effective_payer_account_ids:
          - 0.0.8
          - 0.0.72
          token_id: 0.0.90001
        bytes: null
        charged_tx_fee: 7
        consensus_timestamp: "1234567890.000000007"
        entity_id: 0.0.2281979
        max_fee: 33
        memo_base64: null
        name: CRYPTOTRANSFER
        nft_transfers:
        - is_approval: true
          receiver_account_id: 0.0.121
          sender_account_id: 0.0.122
          serial_number: 1
          token_id: 0.0.123
        - is_approval: true
          receiver_account_id: 0.0.321
          sender_account_id: 0.0.422
          serial_number: 2
          token_id: 0.0.123
        node: 0.0.3
        nonce: 0
        parent_consensus_timestamp: "1234567890.000000007"
        result: SUCCESS
        scheduled: false
        staking_reward_transfers:
        - account: 3
          amount: 200
        - account: 9
          amount: 300
        transaction_hash: vigzKe2J7fv4ktHBbNTSzQmKq7Lzdq1/lJMmHT+a2KgvdhAuadlvS4eKeqKjIRmW
        transaction_id: 0.0.8-1234567890-000000006
        token_transfers:
        - token_id: 0.0.90000
          account: 0.0.9
          amount: 1200
          is_approval: true
        - token_id: 0.0.90000
          account: 0.0.8
          amount: -1200
          is_approval: true
        transfers:
        - account: 0.0.3
          amount: 2
          is_approval: true
        - account: 0.0.8
          amount: -3
          is_approval: true
        - account: 0.0.98
          amount: 1
          is_approval: true
        - account: 0.0.800
          amount: 200
          is_approval: false
        - account: 0.0.800
          amount: 300
          is_approval: false
        valid_duration_seconds: 11
        valid_start_timestamp: "1234567890.000000006"
    TransactionDetails:
      items:
        $ref: '#/components/schemas/TransactionDetail'
      type: array
    TransactionId:
      properties:
        account_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        nonce:
          example: 0
          format: int32
          minimum: 0
          nullable: true
          type: integer
        scheduled:
          example: false
          nullable: true
          type: boolean
        transaction_valid_start:
          example: "1586567700.453054000"
          pattern: "^\\d{1,10}(\\.\\d{1,9})?$"
          type: string
      type: object
    TransactionIdStr:
      description: A transaction id in string format.
      pattern: "^(\\d+)\\.(\\d+)\\.(\\d+)-(\\d{1,19})-(\\d{1,9})$"
      type: string
    Transactions:
      items:
        $ref: '#/components/schemas/Transaction'
      type: array
    getStateproofInfo_200_response:
      oneOf:
      - $ref: '#/components/schemas/StateProofResponseCompact'
      - $ref: '#/components/schemas/StateProofResponseFull'
    StateProofResponseCompact_record_file:
      description: "The record file the transaction belongs to, in compact format"
      properties:
        head:
          description: The record file head
          format: byte
          type: string
        start_running_hash_object:
          description: The start running hash object
          format: byte
          type: string
        end_running_hash_object:
          description: THe end running hash object
          format: byte
          type: string
        hashes_before:
          description: |
            The hashes of the transactions before the transaction in query, in consensus timestamp ascending order
          items:
            format: byte
            type: string
          type: array
        hashes_after:
          description: |
            The hashes of the transactions after the transaction in query, in consensus timestamp ascending order
          items:
            format: byte
            type: string
          type: array
        record_stream_object:
          description: The record stream object of the transaction in query
          format: byte
          type: string
        block_number:
          description: "The block number, in base64 encoding. Only present if version\
            \ is 6"
          format: byte
          nullable: true
          type: string
      required:
      - block_number
      - end_running_hash_object
      - hashes_after
      - hashes_before
      - head
      - record_stream_object
      - start_running_hash_object
      type: object
    Balance_tokens_inner:
      properties:
        token_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        balance:
          format: int64
          type: integer
      type: object
    Error__status_messages_inner:
      properties:
        data:
          description: Error message in hexadecimal
          example: !!binary |-
            MHgzMDAw
          format: binary
          nullable: true
          pattern: "^0x[0-9a-fA-F]+$"
          type: string
        detail:
          description: Detailed error message
          example: Generic detailed error message
          nullable: true
          type: string
        message:
          description: Error message
          example: Generic error message
          nullable: false
          type: string
      type: object
    Error__status:
      properties:
        messages:
          items:
            $ref: '#/components/schemas/Error__status_messages_inner'
          type: array
      type: object
    FractionalFee_amount:
      example:
        numerator: 12
        denominator: 29
      properties:
        numerator:
          example: 12
          format: int64
          type: integer
        denominator:
          example: 29
          format: int64
          type: integer
      type: object
    RoyaltyFee_amount:
      example:
        numerator: 15
        denominator: 37
      properties:
        numerator:
          example: 15
          format: int64
          type: integer
        denominator:
          example: 37
          format: int64
          type: integer
      type: object
    RoyaltyFee_fallback_fee:
      example:
        denominating_token_id: 0.0.2
        amount: 100
      properties:
        amount:
          example: 100
          format: int64
          type: integer
        denominating_token_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
      type: object
    NetworkNode_staking_period:
      allOf:
      - $ref: '#/components/schemas/TimestampRangeNullable'
      - description: The timestamp range of the staking period
    NetworkStakeResponse_staking_period:
      allOf:
      - $ref: '#/components/schemas/TimestampRange'
      - description: The timestamp range of the staking period
    Block_timestamp:
      properties:
        from:
          $ref: '#/components/schemas/TimestampRange'
        to:
          $ref: '#/components/schemas/TimestampRange'
      type: object
    TokenDistribution_inner:
      properties:
        account:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        balance:
          format: int64
          type: integer
      required:
      - account
      - balance
      type: object
    Transaction_nft_transfers_inner:
      properties:
        is_approval:
          type: boolean
        receiver_account_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        sender_account_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        serial_number:
          example: 1
          format: int64
          type: integer
        token_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
      required:
      - is_approval
      - receiver_account_id
      - sender_account_id
      - serial_number
      - token_id
      type: object
    Transaction_token_transfers_inner:
      properties:
        token_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        account:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        amount:
          format: int64
          type: integer
        is_approval:
          type: boolean
      required:
      - account
      - amount
      - token_id
      type: object
    Transaction_transfers_inner:
      properties:
        account:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        amount:
          format: int64
          type: integer
        is_approval:
          type: boolean
      required:
      - account
      - amount
      type: object
    TransactionDetail_allOf_assessed_custom_fees:
      properties:
        amount:
          format: int64
          type: integer
        collector_account_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
        effective_payer_account_ids:
          items:
            $ref: '#/components/schemas/EntityId'
          type: array
        token_id:
          description: Network entity ID in the format of `shard.realm.num`
          example: 0.0.2
          nullable: true
          pattern: "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$"
          type: string
      type: object
      example: null
