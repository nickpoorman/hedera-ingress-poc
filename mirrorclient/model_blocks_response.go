/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
)

// checks if the BlocksResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlocksResponse{}

// BlocksResponse struct for BlocksResponse
type BlocksResponse struct {
	Blocks []Block `json:"blocks,omitempty"`
	Links *Links `json:"links,omitempty"`
}

// NewBlocksResponse instantiates a new BlocksResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlocksResponse() *BlocksResponse {
	this := BlocksResponse{}
	return &this
}

// NewBlocksResponseWithDefaults instantiates a new BlocksResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlocksResponseWithDefaults() *BlocksResponse {
	this := BlocksResponse{}
	return &this
}

// GetBlocks returns the Blocks field value if set, zero value otherwise.
func (o *BlocksResponse) GetBlocks() []Block {
	if o == nil || IsNil(o.Blocks) {
		var ret []Block
		return ret
	}
	return o.Blocks
}

// GetBlocksOk returns a tuple with the Blocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlocksResponse) GetBlocksOk() ([]Block, bool) {
	if o == nil || IsNil(o.Blocks) {
		return nil, false
	}
	return o.Blocks, true
}

// HasBlocks returns a boolean if a field has been set.
func (o *BlocksResponse) HasBlocks() bool {
	if o != nil && !IsNil(o.Blocks) {
		return true
	}

	return false
}

// SetBlocks gets a reference to the given []Block and assigns it to the Blocks field.
func (o *BlocksResponse) SetBlocks(v []Block) {
	o.Blocks = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *BlocksResponse) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlocksResponse) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *BlocksResponse) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *BlocksResponse) SetLinks(v Links) {
	o.Links = &v
}

func (o BlocksResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlocksResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Blocks) {
		toSerialize["blocks"] = o.Blocks
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	return toSerialize, nil
}

type NullableBlocksResponse struct {
	value *BlocksResponse
	isSet bool
}

func (v NullableBlocksResponse) Get() *BlocksResponse {
	return v.value
}

func (v *NullableBlocksResponse) Set(val *BlocksResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBlocksResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBlocksResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlocksResponse(val *BlocksResponse) *NullableBlocksResponse {
	return &NullableBlocksResponse{value: val, isSet: true}
}

func (v NullableBlocksResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlocksResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


