/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// BalancesAPIService BalancesAPI service
type BalancesAPIService service

type ApiListAccountBalancesRequest struct {
	ctx context.Context
	ApiService *BalancesAPIService
	accountId *string
	accountBalance *string
	accountPublickey *string
	limit *int32
	order *string
	timestamp *[]string
}

// Account id or account alias with no shard realm or evm address with no shard realm
func (r ApiListAccountBalancesRequest) AccountId(accountId string) ApiListAccountBalancesRequest {
	r.accountId = &accountId
	return r
}

// The optional balance value to compare against
func (r ApiListAccountBalancesRequest) AccountBalance(accountBalance string) ApiListAccountBalancesRequest {
	r.accountBalance = &accountBalance
	return r
}

// The account&#39;s public key to compare against
func (r ApiListAccountBalancesRequest) AccountPublickey(accountPublickey string) ApiListAccountBalancesRequest {
	r.accountPublickey = &accountPublickey
	return r
}

// The maximum number of items to return
func (r ApiListAccountBalancesRequest) Limit(limit int32) ApiListAccountBalancesRequest {
	r.limit = &limit
	return r
}

// The order in which items are listed
func (r ApiListAccountBalancesRequest) Order(order string) ApiListAccountBalancesRequest {
	r.order = &order
	return r
}

// The consensus timestamp in seconds.nanoseconds format with an optional comparison operator
func (r ApiListAccountBalancesRequest) Timestamp(timestamp []string) ApiListAccountBalancesRequest {
	r.timestamp = &timestamp
	return r
}

func (r ApiListAccountBalancesRequest) Execute() (*BalancesResponse, *http.Response, error) {
	return r.ApiService.ListAccountBalancesExecute(r)
}

/*
ListAccountBalances List account balances

Returns a timestamped list of account balances on the network, limited to at most 50 token balances per account as outlined in HIP-367. This includes both HBAR and token balances for accounts.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListAccountBalancesRequest
*/
func (a *BalancesAPIService) ListAccountBalances(ctx context.Context) ApiListAccountBalancesRequest {
	return ApiListAccountBalancesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BalancesResponse
func (a *BalancesAPIService) ListAccountBalancesExecute(r ApiListAccountBalancesRequest) (*BalancesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BalancesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BalancesAPIService.ListAccountBalances")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/balances"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "account.id", r.accountId, "")
	}
	if r.accountBalance != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "account.balance", r.accountBalance, "")
	}
	if r.accountPublickey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "account.publickey", r.accountPublickey, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue int32 = 25
		r.limit = &defaultValue
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	} else {
		var defaultValue string = "desc"
		r.order = &defaultValue
	}
	if r.timestamp != nil {
		t := *r.timestamp
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
