/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
)

// checks if the TransactionTokenTransfersInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionTokenTransfersInner{}

// TransactionTokenTransfersInner struct for TransactionTokenTransfersInner
type TransactionTokenTransfersInner struct {
	// Network entity ID in the format of `shard.realm.num`
	TokenId NullableString `json:"token_id"`
	// Network entity ID in the format of `shard.realm.num`
	Account NullableString `json:"account"`
	Amount int64 `json:"amount"`
	IsApproval *bool `json:"is_approval,omitempty"`
}

// NewTransactionTokenTransfersInner instantiates a new TransactionTokenTransfersInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionTokenTransfersInner(tokenId NullableString, account NullableString, amount int64) *TransactionTokenTransfersInner {
	this := TransactionTokenTransfersInner{}
	this.TokenId = tokenId
	this.Account = account
	this.Amount = amount
	return &this
}

// NewTransactionTokenTransfersInnerWithDefaults instantiates a new TransactionTokenTransfersInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionTokenTransfersInnerWithDefaults() *TransactionTokenTransfersInner {
	this := TransactionTokenTransfersInner{}
	return &this
}

// GetTokenId returns the TokenId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *TransactionTokenTransfersInner) GetTokenId() string {
	if o == nil || o.TokenId.Get() == nil {
		var ret string
		return ret
	}

	return *o.TokenId.Get()
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionTokenTransfersInner) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TokenId.Get(), o.TokenId.IsSet()
}

// SetTokenId sets field value
func (o *TransactionTokenTransfersInner) SetTokenId(v string) {
	o.TokenId.Set(&v)
}

// GetAccount returns the Account field value
// If the value is explicit nil, the zero value for string will be returned
func (o *TransactionTokenTransfersInner) GetAccount() string {
	if o == nil || o.Account.Get() == nil {
		var ret string
		return ret
	}

	return *o.Account.Get()
}

// GetAccountOk returns a tuple with the Account field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionTokenTransfersInner) GetAccountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Account.Get(), o.Account.IsSet()
}

// SetAccount sets field value
func (o *TransactionTokenTransfersInner) SetAccount(v string) {
	o.Account.Set(&v)
}

// GetAmount returns the Amount field value
func (o *TransactionTokenTransfersInner) GetAmount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TransactionTokenTransfersInner) GetAmountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TransactionTokenTransfersInner) SetAmount(v int64) {
	o.Amount = v
}

// GetIsApproval returns the IsApproval field value if set, zero value otherwise.
func (o *TransactionTokenTransfersInner) GetIsApproval() bool {
	if o == nil || IsNil(o.IsApproval) {
		var ret bool
		return ret
	}
	return *o.IsApproval
}

// GetIsApprovalOk returns a tuple with the IsApproval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionTokenTransfersInner) GetIsApprovalOk() (*bool, bool) {
	if o == nil || IsNil(o.IsApproval) {
		return nil, false
	}
	return o.IsApproval, true
}

// HasIsApproval returns a boolean if a field has been set.
func (o *TransactionTokenTransfersInner) HasIsApproval() bool {
	if o != nil && !IsNil(o.IsApproval) {
		return true
	}

	return false
}

// SetIsApproval gets a reference to the given bool and assigns it to the IsApproval field.
func (o *TransactionTokenTransfersInner) SetIsApproval(v bool) {
	o.IsApproval = &v
}

func (o TransactionTokenTransfersInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionTokenTransfersInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["token_id"] = o.TokenId.Get()
	toSerialize["account"] = o.Account.Get()
	toSerialize["amount"] = o.Amount
	if !IsNil(o.IsApproval) {
		toSerialize["is_approval"] = o.IsApproval
	}
	return toSerialize, nil
}

type NullableTransactionTokenTransfersInner struct {
	value *TransactionTokenTransfersInner
	isSet bool
}

func (v NullableTransactionTokenTransfersInner) Get() *TransactionTokenTransfersInner {
	return v.value
}

func (v *NullableTransactionTokenTransfersInner) Set(val *TransactionTokenTransfersInner) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionTokenTransfersInner) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionTokenTransfersInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionTokenTransfersInner(val *TransactionTokenTransfersInner) *NullableTransactionTokenTransfersInner {
	return &NullableTransactionTokenTransfersInner{value: val, isSet: true}
}

func (v NullableTransactionTokenTransfersInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionTokenTransfersInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


