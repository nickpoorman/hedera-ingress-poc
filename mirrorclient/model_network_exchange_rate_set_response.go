/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
)

// checks if the NetworkExchangeRateSetResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkExchangeRateSetResponse{}

// NetworkExchangeRateSetResponse struct for NetworkExchangeRateSetResponse
type NetworkExchangeRateSetResponse struct {
	CurrentRate *ExchangeRate `json:"current_rate,omitempty"`
	NextRate *ExchangeRate `json:"next_rate,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
}

// NewNetworkExchangeRateSetResponse instantiates a new NetworkExchangeRateSetResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkExchangeRateSetResponse() *NetworkExchangeRateSetResponse {
	this := NetworkExchangeRateSetResponse{}
	return &this
}

// NewNetworkExchangeRateSetResponseWithDefaults instantiates a new NetworkExchangeRateSetResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkExchangeRateSetResponseWithDefaults() *NetworkExchangeRateSetResponse {
	this := NetworkExchangeRateSetResponse{}
	return &this
}

// GetCurrentRate returns the CurrentRate field value if set, zero value otherwise.
func (o *NetworkExchangeRateSetResponse) GetCurrentRate() ExchangeRate {
	if o == nil || IsNil(o.CurrentRate) {
		var ret ExchangeRate
		return ret
	}
	return *o.CurrentRate
}

// GetCurrentRateOk returns a tuple with the CurrentRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkExchangeRateSetResponse) GetCurrentRateOk() (*ExchangeRate, bool) {
	if o == nil || IsNil(o.CurrentRate) {
		return nil, false
	}
	return o.CurrentRate, true
}

// HasCurrentRate returns a boolean if a field has been set.
func (o *NetworkExchangeRateSetResponse) HasCurrentRate() bool {
	if o != nil && !IsNil(o.CurrentRate) {
		return true
	}

	return false
}

// SetCurrentRate gets a reference to the given ExchangeRate and assigns it to the CurrentRate field.
func (o *NetworkExchangeRateSetResponse) SetCurrentRate(v ExchangeRate) {
	o.CurrentRate = &v
}

// GetNextRate returns the NextRate field value if set, zero value otherwise.
func (o *NetworkExchangeRateSetResponse) GetNextRate() ExchangeRate {
	if o == nil || IsNil(o.NextRate) {
		var ret ExchangeRate
		return ret
	}
	return *o.NextRate
}

// GetNextRateOk returns a tuple with the NextRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkExchangeRateSetResponse) GetNextRateOk() (*ExchangeRate, bool) {
	if o == nil || IsNil(o.NextRate) {
		return nil, false
	}
	return o.NextRate, true
}

// HasNextRate returns a boolean if a field has been set.
func (o *NetworkExchangeRateSetResponse) HasNextRate() bool {
	if o != nil && !IsNil(o.NextRate) {
		return true
	}

	return false
}

// SetNextRate gets a reference to the given ExchangeRate and assigns it to the NextRate field.
func (o *NetworkExchangeRateSetResponse) SetNextRate(v ExchangeRate) {
	o.NextRate = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *NetworkExchangeRateSetResponse) GetTimestamp() string {
	if o == nil || IsNil(o.Timestamp) {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkExchangeRateSetResponse) GetTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *NetworkExchangeRateSetResponse) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *NetworkExchangeRateSetResponse) SetTimestamp(v string) {
	o.Timestamp = &v
}

func (o NetworkExchangeRateSetResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkExchangeRateSetResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrentRate) {
		toSerialize["current_rate"] = o.CurrentRate
	}
	if !IsNil(o.NextRate) {
		toSerialize["next_rate"] = o.NextRate
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	return toSerialize, nil
}

type NullableNetworkExchangeRateSetResponse struct {
	value *NetworkExchangeRateSetResponse
	isSet bool
}

func (v NullableNetworkExchangeRateSetResponse) Get() *NetworkExchangeRateSetResponse {
	return v.value
}

func (v *NullableNetworkExchangeRateSetResponse) Set(val *NetworkExchangeRateSetResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkExchangeRateSetResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkExchangeRateSetResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkExchangeRateSetResponse(val *NetworkExchangeRateSetResponse) *NullableNetworkExchangeRateSetResponse {
	return &NullableNetworkExchangeRateSetResponse{value: val, isSet: true}
}

func (v NullableNetworkExchangeRateSetResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkExchangeRateSetResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


