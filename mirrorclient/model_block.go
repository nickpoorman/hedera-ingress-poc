/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
)

// checks if the Block type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Block{}

// Block struct for Block
type Block struct {
	Count *int32 `json:"count,omitempty"`
	GasUsed NullableInt64 `json:"gas_used,omitempty"`
	HapiVersion NullableString `json:"hapi_version,omitempty"`
	Hash *string `json:"hash,omitempty"`
	// A hex encoded 256-byte array with 0x prefix
	LogsBloom NullableString `json:"logs_bloom,omitempty"`
	Name *string `json:"name,omitempty"`
	Number *int32 `json:"number,omitempty"`
	PreviousHash *string `json:"previous_hash,omitempty"`
	Size NullableInt32 `json:"size,omitempty"`
	Timestamp *BlockTimestamp `json:"timestamp,omitempty"`
}

// NewBlock instantiates a new Block object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlock() *Block {
	this := Block{}
	return &this
}

// NewBlockWithDefaults instantiates a new Block object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockWithDefaults() *Block {
	this := Block{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *Block) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *Block) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *Block) SetCount(v int32) {
	o.Count = &v
}

// GetGasUsed returns the GasUsed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Block) GetGasUsed() int64 {
	if o == nil || IsNil(o.GasUsed.Get()) {
		var ret int64
		return ret
	}
	return *o.GasUsed.Get()
}

// GetGasUsedOk returns a tuple with the GasUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Block) GetGasUsedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.GasUsed.Get(), o.GasUsed.IsSet()
}

// HasGasUsed returns a boolean if a field has been set.
func (o *Block) HasGasUsed() bool {
	if o != nil && o.GasUsed.IsSet() {
		return true
	}

	return false
}

// SetGasUsed gets a reference to the given NullableInt64 and assigns it to the GasUsed field.
func (o *Block) SetGasUsed(v int64) {
	o.GasUsed.Set(&v)
}
// SetGasUsedNil sets the value for GasUsed to be an explicit nil
func (o *Block) SetGasUsedNil() {
	o.GasUsed.Set(nil)
}

// UnsetGasUsed ensures that no value is present for GasUsed, not even an explicit nil
func (o *Block) UnsetGasUsed() {
	o.GasUsed.Unset()
}

// GetHapiVersion returns the HapiVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Block) GetHapiVersion() string {
	if o == nil || IsNil(o.HapiVersion.Get()) {
		var ret string
		return ret
	}
	return *o.HapiVersion.Get()
}

// GetHapiVersionOk returns a tuple with the HapiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Block) GetHapiVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HapiVersion.Get(), o.HapiVersion.IsSet()
}

// HasHapiVersion returns a boolean if a field has been set.
func (o *Block) HasHapiVersion() bool {
	if o != nil && o.HapiVersion.IsSet() {
		return true
	}

	return false
}

// SetHapiVersion gets a reference to the given NullableString and assigns it to the HapiVersion field.
func (o *Block) SetHapiVersion(v string) {
	o.HapiVersion.Set(&v)
}
// SetHapiVersionNil sets the value for HapiVersion to be an explicit nil
func (o *Block) SetHapiVersionNil() {
	o.HapiVersion.Set(nil)
}

// UnsetHapiVersion ensures that no value is present for HapiVersion, not even an explicit nil
func (o *Block) UnsetHapiVersion() {
	o.HapiVersion.Unset()
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *Block) GetHash() string {
	if o == nil || IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetHashOk() (*string, bool) {
	if o == nil || IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *Block) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *Block) SetHash(v string) {
	o.Hash = &v
}

// GetLogsBloom returns the LogsBloom field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Block) GetLogsBloom() string {
	if o == nil || IsNil(o.LogsBloom.Get()) {
		var ret string
		return ret
	}
	return *o.LogsBloom.Get()
}

// GetLogsBloomOk returns a tuple with the LogsBloom field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Block) GetLogsBloomOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LogsBloom.Get(), o.LogsBloom.IsSet()
}

// HasLogsBloom returns a boolean if a field has been set.
func (o *Block) HasLogsBloom() bool {
	if o != nil && o.LogsBloom.IsSet() {
		return true
	}

	return false
}

// SetLogsBloom gets a reference to the given NullableString and assigns it to the LogsBloom field.
func (o *Block) SetLogsBloom(v string) {
	o.LogsBloom.Set(&v)
}
// SetLogsBloomNil sets the value for LogsBloom to be an explicit nil
func (o *Block) SetLogsBloomNil() {
	o.LogsBloom.Set(nil)
}

// UnsetLogsBloom ensures that no value is present for LogsBloom, not even an explicit nil
func (o *Block) UnsetLogsBloom() {
	o.LogsBloom.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Block) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Block) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Block) SetName(v string) {
	o.Name = &v
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *Block) GetNumber() int32 {
	if o == nil || IsNil(o.Number) {
		var ret int32
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.Number) {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *Block) HasNumber() bool {
	if o != nil && !IsNil(o.Number) {
		return true
	}

	return false
}

// SetNumber gets a reference to the given int32 and assigns it to the Number field.
func (o *Block) SetNumber(v int32) {
	o.Number = &v
}

// GetPreviousHash returns the PreviousHash field value if set, zero value otherwise.
func (o *Block) GetPreviousHash() string {
	if o == nil || IsNil(o.PreviousHash) {
		var ret string
		return ret
	}
	return *o.PreviousHash
}

// GetPreviousHashOk returns a tuple with the PreviousHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetPreviousHashOk() (*string, bool) {
	if o == nil || IsNil(o.PreviousHash) {
		return nil, false
	}
	return o.PreviousHash, true
}

// HasPreviousHash returns a boolean if a field has been set.
func (o *Block) HasPreviousHash() bool {
	if o != nil && !IsNil(o.PreviousHash) {
		return true
	}

	return false
}

// SetPreviousHash gets a reference to the given string and assigns it to the PreviousHash field.
func (o *Block) SetPreviousHash(v string) {
	o.PreviousHash = &v
}

// GetSize returns the Size field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Block) GetSize() int32 {
	if o == nil || IsNil(o.Size.Get()) {
		var ret int32
		return ret
	}
	return *o.Size.Get()
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Block) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Size.Get(), o.Size.IsSet()
}

// HasSize returns a boolean if a field has been set.
func (o *Block) HasSize() bool {
	if o != nil && o.Size.IsSet() {
		return true
	}

	return false
}

// SetSize gets a reference to the given NullableInt32 and assigns it to the Size field.
func (o *Block) SetSize(v int32) {
	o.Size.Set(&v)
}
// SetSizeNil sets the value for Size to be an explicit nil
func (o *Block) SetSizeNil() {
	o.Size.Set(nil)
}

// UnsetSize ensures that no value is present for Size, not even an explicit nil
func (o *Block) UnsetSize() {
	o.Size.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *Block) GetTimestamp() BlockTimestamp {
	if o == nil || IsNil(o.Timestamp) {
		var ret BlockTimestamp
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetTimestampOk() (*BlockTimestamp, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *Block) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given BlockTimestamp and assigns it to the Timestamp field.
func (o *Block) SetTimestamp(v BlockTimestamp) {
	o.Timestamp = &v
}

func (o Block) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Block) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if o.GasUsed.IsSet() {
		toSerialize["gas_used"] = o.GasUsed.Get()
	}
	if o.HapiVersion.IsSet() {
		toSerialize["hapi_version"] = o.HapiVersion.Get()
	}
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	if o.LogsBloom.IsSet() {
		toSerialize["logs_bloom"] = o.LogsBloom.Get()
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Number) {
		toSerialize["number"] = o.Number
	}
	if !IsNil(o.PreviousHash) {
		toSerialize["previous_hash"] = o.PreviousHash
	}
	if o.Size.IsSet() {
		toSerialize["size"] = o.Size.Get()
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	return toSerialize, nil
}

type NullableBlock struct {
	value *Block
	isSet bool
}

func (v NullableBlock) Get() *Block {
	return v.value
}

func (v *NullableBlock) Set(val *Block) {
	v.value = val
	v.isSet = true
}

func (v NullableBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlock(val *Block) *NullableBlock {
	return &NullableBlock{value: val, isSet: true}
}

func (v NullableBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


