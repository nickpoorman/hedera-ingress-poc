/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
	"fmt"
)

// GetStateproofInfo200Response - struct for GetStateproofInfo200Response
type GetStateproofInfo200Response struct {
	StateProofResponseCompact *StateProofResponseCompact
	StateProofResponseFull *StateProofResponseFull
}

// StateProofResponseCompactAsGetStateproofInfo200Response is a convenience function that returns StateProofResponseCompact wrapped in GetStateproofInfo200Response
func StateProofResponseCompactAsGetStateproofInfo200Response(v *StateProofResponseCompact) GetStateproofInfo200Response {
	return GetStateproofInfo200Response{
		StateProofResponseCompact: v,
	}
}

// StateProofResponseFullAsGetStateproofInfo200Response is a convenience function that returns StateProofResponseFull wrapped in GetStateproofInfo200Response
func StateProofResponseFullAsGetStateproofInfo200Response(v *StateProofResponseFull) GetStateproofInfo200Response {
	return GetStateproofInfo200Response{
		StateProofResponseFull: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetStateproofInfo200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into StateProofResponseCompact
	err = newStrictDecoder(data).Decode(&dst.StateProofResponseCompact)
	if err == nil {
		jsonStateProofResponseCompact, _ := json.Marshal(dst.StateProofResponseCompact)
		if string(jsonStateProofResponseCompact) == "{}" { // empty struct
			dst.StateProofResponseCompact = nil
		} else {
			match++
		}
	} else {
		dst.StateProofResponseCompact = nil
	}

	// try to unmarshal data into StateProofResponseFull
	err = newStrictDecoder(data).Decode(&dst.StateProofResponseFull)
	if err == nil {
		jsonStateProofResponseFull, _ := json.Marshal(dst.StateProofResponseFull)
		if string(jsonStateProofResponseFull) == "{}" { // empty struct
			dst.StateProofResponseFull = nil
		} else {
			match++
		}
	} else {
		dst.StateProofResponseFull = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.StateProofResponseCompact = nil
		dst.StateProofResponseFull = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetStateproofInfo200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetStateproofInfo200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetStateproofInfo200Response) MarshalJSON() ([]byte, error) {
	if src.StateProofResponseCompact != nil {
		return json.Marshal(&src.StateProofResponseCompact)
	}

	if src.StateProofResponseFull != nil {
		return json.Marshal(&src.StateProofResponseFull)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetStateproofInfo200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.StateProofResponseCompact != nil {
		return obj.StateProofResponseCompact
	}

	if obj.StateProofResponseFull != nil {
		return obj.StateProofResponseFull
	}

	// all schemas are nil
	return nil
}

type NullableGetStateproofInfo200Response struct {
	value *GetStateproofInfo200Response
	isSet bool
}

func (v NullableGetStateproofInfo200Response) Get() *GetStateproofInfo200Response {
	return v.value
}

func (v *NullableGetStateproofInfo200Response) Set(val *GetStateproofInfo200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetStateproofInfo200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetStateproofInfo200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetStateproofInfo200Response(val *GetStateproofInfo200Response) *NullableGetStateproofInfo200Response {
	return &NullableGetStateproofInfo200Response{value: val, isSet: true}
}

func (v NullableGetStateproofInfo200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetStateproofInfo200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


