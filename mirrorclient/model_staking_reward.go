/*
Hedera Mirror Node REST API

The Mirror Node REST API offers the ability to query cryptocurrency transactions and account information from a Hedera managed mirror node.  Base url: [/api/v1](/api/v1)  OpenAPI Spec: [/api/v1/docs/openapi.yml](/api/v1/docs/openapi.yml)

API version: 0.89.0
Contact: mirrornode@hedera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mirrorclient

import (
	"encoding/json"
)

// checks if the StakingReward type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StakingReward{}

// StakingReward struct for StakingReward
type StakingReward struct {
	// Network entity ID in the format of `shard.realm.num`
	AccountId NullableString `json:"account_id"`
	// The number of tinybars awarded
	Amount int64 `json:"amount"`
	Timestamp string `json:"timestamp"`
}

// NewStakingReward instantiates a new StakingReward object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStakingReward(accountId NullableString, amount int64, timestamp string) *StakingReward {
	this := StakingReward{}
	this.AccountId = accountId
	this.Amount = amount
	this.Timestamp = timestamp
	return &this
}

// NewStakingRewardWithDefaults instantiates a new StakingReward object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStakingRewardWithDefaults() *StakingReward {
	this := StakingReward{}
	return &this
}

// GetAccountId returns the AccountId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *StakingReward) GetAccountId() string {
	if o == nil || o.AccountId.Get() == nil {
		var ret string
		return ret
	}

	return *o.AccountId.Get()
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StakingReward) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountId.Get(), o.AccountId.IsSet()
}

// SetAccountId sets field value
func (o *StakingReward) SetAccountId(v string) {
	o.AccountId.Set(&v)
}

// GetAmount returns the Amount field value
func (o *StakingReward) GetAmount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *StakingReward) GetAmountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *StakingReward) SetAmount(v int64) {
	o.Amount = v
}

// GetTimestamp returns the Timestamp field value
func (o *StakingReward) GetTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *StakingReward) GetTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *StakingReward) SetTimestamp(v string) {
	o.Timestamp = v
}

func (o StakingReward) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StakingReward) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_id"] = o.AccountId.Get()
	toSerialize["amount"] = o.Amount
	toSerialize["timestamp"] = o.Timestamp
	return toSerialize, nil
}

type NullableStakingReward struct {
	value *StakingReward
	isSet bool
}

func (v NullableStakingReward) Get() *StakingReward {
	return v.value
}

func (v *NullableStakingReward) Set(val *StakingReward) {
	v.value = val
	v.isSet = true
}

func (v NullableStakingReward) IsSet() bool {
	return v.isSet
}

func (v *NullableStakingReward) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStakingReward(val *StakingReward) *NullableStakingReward {
	return &NullableStakingReward{value: val, isSet: true}
}

func (v NullableStakingReward) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStakingReward) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


